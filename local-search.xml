<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RPC相关学习</title>
    <link href="/2025/10/12/RPC%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/10/12/RPC%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="RPC相关学习"><a href="#RPC相关学习" class="headerlink" title="RPC相关学习"></a>RPC相关学习</h1><h2 id="RPC-理论"><a href="#RPC-理论" class="headerlink" title="RPC 理论"></a>RPC 理论</h2><h3 id="RPC是什么？"><a href="#RPC是什么？" class="headerlink" title="RPC是什么？"></a>RPC是什么？</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li>RPC（Remote Procedure Call Protocol） 远程过程调用协议。</li><li>RPC是一种通过网络从远程计算机程序上请求服务，不需要了解底层网络技术的协议。</li><li>RPC主要作用就是不同的服务间方法调用就像本地调用一样便捷。</li></ol><h4 id="常用RPC技术或框架"><a href="#常用RPC技术或框架" class="headerlink" title="常用RPC技术或框架"></a>常用RPC技术或框架</h4><ul><li>应用级的服务框架：阿里的 Dubbo&#x2F;Dubbox、Google gRPC、Spring Boot&#x2F;Spring Cloud。 </li><li>远程通信协议：RMI、Socket、SOAP(HTTP XML)、REST(HTTP JSON)。 </li><li>通信框架：MINA 和 Netty</li></ul><h4 id="为什么要有RPC？"><a href="#为什么要有RPC？" class="headerlink" title="为什么要有RPC？"></a>为什么要有RPC？</h4><ol><li>服务化：微服务化，跨平台的服务之间远程调用；</li><li>分布式系统架构：分布式服务跨机器进行远程调用；</li><li>服务可重用：开发一个公共能力服务，供多个服务远程调用。</li><li>系统间交互调用：两台服务器A、B，服务器A上的应用a需要调用服务器B上的应用b提供的方法，而应用a和应用b不在一个内存空间，不能直接调用，此时，需要通过网络传输来表达需要调用的语义及传输调用的数据。</li></ol><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li>大型网站：内部涉及多个子系统，服务、接口较多。</li><li>注册发现机制：如Nacos、Dubbo等，一般都有注册中心，服务有多个实例，调用方调用的哪个实例无感知。</li><li>安全性：不暴露资源</li><li>服务化治理：微服务架构、分布式架构。</li></ol><h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><img src="/2025/10/12/RPC%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/hexo-blog\source\_posts\RPC相关学习\RPC架构图.png" alt="RPC架构图" style="zoom: 50%;"><h4 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h4><p>核心功能主要为<strong>服务寻址、序列化与反序列化、网络传输功能</strong>。</p><h5 id="1-服务寻址"><a href="#1-服务寻址" class="headerlink" title="1. 服务寻址"></a>1. 服务寻址</h5><p>​本地方法调用：函数体通过函数指针来指定</p><p>​远程方法调用：由于两个进程的地址空间完全不一样，函数指针不起作用。RPC中所有函数或者方法都有自己的一个ID，在所有进程中是唯一的。客户端在远程调用时，必须附上这个ID，然后客户端会查表寻找对应的Call ID，传给服务端，接着服务端查表来确定客户端所需的函数，执行响应代码。这个Call ID映射表一般是哈希表结构。</p><h5 id="2-序列化与反序列化"><a href="#2-序列化与反序列化" class="headerlink" title="2. 序列化与反序列化"></a>2. 序列化与反序列化</h5><p>​序列化：将消息对象转换成二进制流；</p><p>​反序列化：将二进制流转化成消息对象</p><blockquote><p>消息对象又是什么呢？其实就是一个java对象，里面包含了通信所需的各种信息。</p><p>请求消息对象通常包含：调用的接口名、方法名、方法参数、参数类型、请求唯一id等等。</p><p>响应消息对象通常包含：请求id、状态码（成功&#x2F;失败）、提示信息、执行结果对象</p></blockquote><p>​远程调用涉及到数据的传输，在本地调用中，只需要将数据压入栈中，然后让函数去栈中读取即可。 但远程的数据传输，由于客户端和服务端不在同一个服务器上，涉及不同的进程，不能通过内存传递参数，此时就需要将客户端先将请求参数转成字节流（编码），传递给服务端，服务端再将字节流转为自己可读取格式（解码），这就是序列化和反序列化的过程。反之，服务端返回值也逆向经历序列化和反序列化到客户端。</p><p>​将消息对象转为二进制字节流，<strong>便于网络传输、跨平台、跨语言</strong>。如Python编写的客户端请求序列化参数传输到Java编写的服务端进行反序列化。</p><h5 id="3-网络传输功能"><a href="#3-网络传输功能" class="headerlink" title="3. 网络传输功能"></a>3. 网络传输功能</h5><p>​客户端：将Call id和序列化后的参数字节流传输给服务端</p><p>​服务端：将序列化后的调用结果回传给客户端</p><p>​相关协议：</p><ol><li><p>基于TCP协议：客户端和服务端建立<strong>Socket连接</strong>。 </p><p>客户端通过Socket将需要调用的接口名称、方法名称及参数序列化后传递给服务端。</p><p>服务端反序列化后再利用反射调用对应的方法，将结果返回给客户端。</p></li><li><p>基于UDP协议：客户端和服务端通过 <strong>DatagramSocket</strong> 建立无连接通信通道。</p><p>客户端将需要调用的接口名称、方法名称及参数 序列化为字节数据包，然后通过 UDP 将数据包发送至服务端指定端口。</p><p>服务端接收到数据包后，对其中的内容进行反序列化，利用反射机制调用对应的服务方法，并将结果再次序列化为数据包发送回客户端。</p></li><li><p>基于HTTP协议：</p><p>客户端向服务端发送请求，如GET、POST、PUT、DELETE等请求。</p><p>服务端根据不同的请求参数和请求URL进行方法调用，返回JSON或者XML数据结果。</p></li></ol><hr><h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><h4 id="RPC-的常见问题"><a href="#RPC-的常见问题" class="headerlink" title="RPC 的常见问题"></a>RPC 的常见问题</h4><p>在分布式系统中使用 RPC 时，常见问题有：</p><ol><li><strong>服务注册</strong><ul><li>提供服务的节点可能有多个实例（负载均衡）</li><li>这些实例 IP&#x2F;端口可能会变动</li></ul></li><li><strong>服务发现</strong><ul><li>客户端如何找到可用的服务节点？</li><li>如果服务挂掉或新增，客户端如何感知？</li></ul></li><li><strong>节点状态监控</strong><ul><li>服务节点的上线、下线或故障需要被及时发现</li></ul></li></ol><h4 id="Zookeeper-的作用"><a href="#Zookeeper-的作用" class="headerlink" title="Zookeeper 的作用"></a>Zookeeper 的作用</h4><p>Zookeeper 在 RPC 系统中主要承担 **注册中心（Service Registry）**的角色：</p><h5 id="1-服务注册"><a href="#1-服务注册" class="headerlink" title="(1) 服务注册"></a>(1) 服务注册</h5><ul><li><p>服务提供者（Provider）启动时，将自己的 <strong>服务名称、IP、端口等信息注册到 Zookeeper</strong>。</p></li><li><p>例如：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">/rpc</span><br>   <span class="hljs-string">/UserService</span><br>      <span class="hljs-string">/192.168.1.100</span><span class="hljs-function">:8080</span><br>      <span class="hljs-string">/192.168.1.101</span><span class="hljs-function">:8080</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="2-服务发现"><a href="#2-服务发现" class="headerlink" title="(2) 服务发现"></a>(2) 服务发现</h5><ul><li>客户端（Consumer）调用 RPC 服务时，从 Zookeeper 获取可用服务列表。</li><li>客户端可以订阅节点变化（watcher），<strong>自动感知服务上线&#x2F;下线</strong>。</li><li>这样客户端不需要硬编码服务地址。</li></ul><h5 id="3-动态负载均衡"><a href="#3-动态负载均衡" class="headerlink" title="(3) 动态负载均衡"></a>(3) 动态负载均衡</h5><ul><li>客户端获取服务列表后，可以随机、轮询、加权等方式选择节点调用，实现负载均衡。</li><li>当某个节点挂掉，Zookeeper 的 watcher 会通知客户端更新列表。</li></ul><h5 id="4-高可用"><a href="#4-高可用" class="headerlink" title="(4) 高可用"></a>(4) 高可用</h5><ul><li>Zookeeper 自身是分布式的，保证服务注册中心不会成为单点故障。</li><li>服务提供者和消费者都可以依赖 Zookeeper 获取一致的服务状态。</li></ul><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Zookeeper 在 RPC 中的作用是 <strong>“服务注册中心 + 状态监控”</strong>，它解决了分布式 RPC 的 <strong>服务动态管理 和 高可用问题</strong>。</p><table><thead><tr><th>功能</th><th>Zookeeper 作用</th></tr></thead><tbody><tr><td>服务注册</td><td>提供者启动时注册服务信息</td></tr><tr><td>服务发现</td><td>客户端动态获取可用服务列表</td></tr><tr><td>节点监控</td><td>服务上线、下线变化通知客户端</td></tr><tr><td>负载均衡</td><td>客户端根据获取的服务列表实现负载均衡</td></tr><tr><td>高可用</td><td>注册中心自身是分布式，避免单点故障</td></tr></tbody></table><hr><h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h3><blockquote><p>参考链接🔗：<a href="https://zhuanlan.zhihu.com/p/181239748">超详细Netty入门，看这篇就够了！ - 知乎</a></p></blockquote><h4 id="Netty是什么？"><a href="#Netty是什么？" class="headerlink" title="Netty是什么？"></a>Netty是什么？</h4><p>官方介绍：Netty is an <strong>asynchronous event-driven network application framework</strong> for rapid development of maintainable high performance protocol servers &amp; clients.</p><p><strong>Netty</strong>是 一个<strong>异步事件驱动</strong>的网络应用程序框架，用于<strong>快速开发可维护的高性能协议服务器和客户端</strong>。</p><p><img src="/2025/10/12/RPC%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/hexo-blog\source_posts\RPC相关学习\Netty架构图.png" alt="Netty架构图"></p><p>绿色部分为<strong>核心</strong>部分，包含零拷贝，API库，可扩展的事件模型</p><p>橙色部分为<strong>协议支持</strong>，包含HTTP协议、webSocket、SSL（安全套接字协议）、谷歌Protobuf协议、zlib&#x2F;gzip压缩与解压缩、大文件传输协议等等</p><p>红色部分为<strong>传输服务</strong>，包括Socket、Datagram、Http Tunnel等等。</p><p>可以看到Netty的功能、协议和传输方式比较全面和强大</p><h4 id="Netty的整体流程"><a href="#Netty的整体流程" class="headerlink" title="Netty的整体流程"></a>Netty的整体流程</h4><ol><li><p>核心组成</p><p>Netty的网络通信一般由三大核心模块构成：</p><table><thead><tr><th>模块</th><th>作用</th></tr></thead><tbody><tr><td><strong>Bootstrap &#x2F; ServerBootstrap</strong></td><td>启动引导类，用于配置和启动客户端或服务端</td></tr><tr><td><strong>ChannelPipeline</strong></td><td>责任链结构，内部包含多个 Handler（处理器）</td></tr><tr><td><strong>ChannelHandler</strong></td><td>真正处理事件的逻辑单元（编码、解码、业务处理）</td></tr></tbody></table></li><li><p>整体流程</p><ol><li><p>服务端启动流程**（Server端）**</p><ol><li><strong>ServerBootstrap 初始化</strong><ul><li>服务端使用 <code>ServerBootstrap</code>；</li><li>指定两个线程组：<ul><li><code>bossGroup</code>：负责接收客户端连接请求</li><li><code>workerGroup</code>：负责真正的数据读写处理。</li></ul></li></ul></li><li><strong>绑定端口、监听连接</strong><ul><li>调用 <code>bind(port)</code>；</li><li>内部开启 <code>ServerSocketChannel</code>；</li><li>等待客户端的 TCP 连接请求（相当于底层的 <code>accept()</code>，但是非阻塞的）。</li></ul></li><li><strong>连接建立后，创建 Pipeline</strong><ul><li>当有新连接到来时，Netty 会自动为每个连接创建一个 <strong>ChannelPipeline</strong>；</li><li>然后将你在初始化时配置好的 Handler（如编解码器、业务处理器）装入这个 Pipeline；</li><li>每个客户端连接对应一个独立的 pipeline（互不干扰）。</li></ul></li><li><strong>数据收发过程</strong><ul><li>当客户端发消息时，数据通过 <code>ChannelPipeline</code> 顺序经过一系列的 inbound handler（入站处理器）；</li><li>服务端处理后，如果要回复，也会通过 outbound handler（出站处理器）写回数据；</li><li>所有事件都是异步、非阻塞的。</li></ul></li></ol></li><li><p>客户端通信流程（Client端）</p><ol><li><strong>Bootstrap 初始化</strong><ul><li>客户端使用 <code>Bootstrap</code>；</li><li>指定一个线程组 <code>EventLoopGroup</code>；</li><li>配置通道类型（如 <code>NioSocketChannel</code>）；</li><li>指定连接的服务端地址和端口。</li></ul></li><li><strong>连接建立</strong><ul><li>调用 <code>connect(host, port)</code>；</li><li>Netty 底层会用 <code>SocketChannel</code> 发起 TCP 三次握手；</li><li>一旦握手成功，就建立一个通信通道 <code>Channel</code>；</li><li>同时为该通道创建一个 <code>ChannelPipeline</code>。</li></ul></li><li><strong>发送消息</strong><ul><li>应用层调用 <code>channel.writeAndFlush(msg)</code>；</li><li>消息经过 pipeline 中的 <strong>outbound handler</strong>（出站处理链，比如编码器）；</li><li>最终转换为字节发送到对端（服务端）。</li></ul></li><li><strong>等待响应</strong><ul><li>Netty 使用异步 Future 机制；</li><li>当服务端回复时，客户端的 <code>pipeline</code> 会触发 <strong>inbound handler</strong>（入站处理链）；</li><li>最终到达你的业务处理 handler（比如 <code>channelRead()</code> 方法）。</li></ul></li><li><strong>接收消息</strong><ul><li>消息经过解码器、业务 handler；</li><li>你在 handler 中处理完毕后，Netty 自动回收缓冲区；</li><li>整个过程无需阻塞等待（不同于传统 BIO）。</li></ul></li></ol></li><li><p>完整工作流程示例</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">步骤<span class="hljs-number">1</span>：客户端连接<br><span class="hljs-number">3</span> 个 Client 同时连接服务器<br>    ↓<br>Boss <span class="hljs-keyword">Group</span> 的 <span class="hljs-keyword">Selector</span> 监听到    (<span class="hljs-keyword">step</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">select</span>)<br>    ↓<br>Boss 的 NioEventLoop 执行 Accept (<span class="hljs-keyword">step</span> <span class="hljs-number">2</span>: processSelectedKeys)<br>    ↓<br>创建 <span class="hljs-number">3</span> 个 Channel（连接）<br>    ↓<br>通过 <span class="hljs-keyword">Selector</span> 注册到 Worker <span class="hljs-keyword">Group</span><br><br>步骤<span class="hljs-number">2</span>：分配给Worker<br>Boss <span class="hljs-keyword">Group</span> 将 Channel 分配给 Worker <span class="hljs-keyword">Group</span><br><br>Channel-<span class="hljs-number">1</span> ──&gt; 注册到 Worker EventLoop-<span class="hljs-number">1</span> 的 <span class="hljs-keyword">Selector</span><br>Channel-<span class="hljs-number">2</span> ──&gt; 注册到 Worker EventLoop-<span class="hljs-number">2</span> 的 <span class="hljs-keyword">Selector</span>  <br>Channel-<span class="hljs-number">3</span> ──&gt; 注册到 Worker EventLoop-<span class="hljs-number">1</span> 的 <span class="hljs-keyword">Selector</span><br>              (轮询分配)<br><br>步骤<span class="hljs-number">3</span>：Worker处理读写<br>Worker EventLoop-<span class="hljs-number">1</span>:<br>    ↓<br><span class="hljs-keyword">step</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">select</span><br>    ├─ 发现 Channel-<span class="hljs-number">1</span> 有数据可读<br>    └─ 发现 Channel-<span class="hljs-number">3</span> 可以写数据<br>    ↓<br><span class="hljs-keyword">step</span> <span class="hljs-number">2</span>: processSelectedKeys<br>    ├─ 读取 Channel-<span class="hljs-number">1</span> 的数据 → 传给 Pipeline<br>    └─ 向 Channel-<span class="hljs-number">3</span> 写数据<br>    ↓<br><span class="hljs-keyword">step</span> <span class="hljs-number">3</span>: runAllTasks<br>    └─ 处理任务队列中的其他任务<br>    <br>步骤<span class="hljs-number">4</span>：Pipeline处理业务<br>Channel-<span class="hljs-number">1</span> 的数据传入 Pipeline<br>    ↓<br>Pipeline（处理器链）<br>    ├─ ChannelHandler-<span class="hljs-number">1</span>（解码器）：字节 → 对象<br>    ├─ ChannelHandler-<span class="hljs-number">2</span>（业务处理）：处理 RPC 请求<br>    ├─ ChannelHandler-<span class="hljs-number">3</span>（编码器）：对象 → 字节<br>    └─ 写回响应<br></code></pre></td></tr></table></figure></li></ol></li><li><p>数据流方向</p><p>Netty中，数据流向是双向的：</p><table><thead><tr><th>类型</th><th>方向</th><th>对应触发事件</th><th>常见 Handler 类型</th></tr></thead><tbody><tr><td><strong>Inbound（入站）</strong></td><td>从底层 Socket → 应用层</td><td>读数据、连接建立</td><td>Decoder、业务逻辑 Handler</td></tr><tr><td><strong>Outbound（出站）</strong></td><td>从应用层 → 底层 Socket</td><td>写数据、关闭连接</td><td>Encoder、异常处理 Handler</td></tr></tbody></table><p>整个过程形成一个“事件驱动的流水线”</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">客户端 <span class="hljs-keyword">write</span>() → outbound <span class="hljs-keyword">handler</span>（出站） → 网络传输 →<br>服务端 inbound <span class="hljs-keyword">handler</span>（入站） → 业务逻辑处理 →<br>服务端 outbound <span class="hljs-keyword">handler</span>（出站） → 网络传输 →<br>客户端 inbound <span class="hljs-keyword">handler</span>（入站） → 接收响应<br></code></pre></td></tr></table></figure></li></ol><h4 id="Netty对比传统BIO和NIO"><a href="#Netty对比传统BIO和NIO" class="headerlink" title="Netty对比传统BIO和NIO"></a>Netty对比传统BIO和NIO</h4><p>BIO，简单来说就是一个连接需要一个线程，简单但效率很低，高并发场景下不合适；NIO就是一个线程可以管理多个连接，搞笑但编程复杂；Netty是事件驱动、线程池化的NIO封装，性能高又易用。</p><table><thead><tr><th>对比维度</th><th><strong>BIO（阻塞 I&#x2F;O）</strong></th><th><strong>NIO（非阻塞 I&#x2F;O）</strong></th><th><strong>Netty（NIO 封装框架）</strong></th></tr></thead><tbody><tr><td><strong>I&#x2F;O 模型</strong></td><td>同步阻塞 I&#x2F;O</td><td>同步非阻塞 I&#x2F;O</td><td>异步事件驱动（基于 NIO）</td></tr><tr><td><strong>数据传输方式</strong></td><td>面向流（Stream）</td><td>面向缓冲区（Buffer）</td><td>面向 ByteBuf（改进的缓冲系统）</td></tr><tr><td><strong>通道（Channel）</strong></td><td>Socket、ServerSocket（阻塞）</td><td>SocketChannel、ServerSocketChannel</td><td>基于 NIO Channel 封装（如 NioSocketChannel）</td></tr><tr><td><strong>Selector 机制</strong></td><td>无</td><td>有，需要手动管理</td><td>内部封装 Selector，自动事件分发</td></tr><tr><td><strong>线程模型</strong></td><td>一个连接一个线程（典型）</td><td>一个线程可处理多个连接（多路复用）</td><td>Reactor 模型（BossGroup + WorkerGroup）自动管理线程</td></tr><tr><td><strong>阻塞情况</strong></td><td>accept() 和 read() 都阻塞</td><td>非阻塞，轮询 selector</td><td>完全异步，不阻塞业务逻辑</td></tr><tr><td><strong>性能表现</strong></td><td>连接数少时简单稳定</td><td>连接数多时性能好，但编程复杂</td><td>高性能、可扩展性强，适合海量并发</td></tr><tr><td><strong>编程复杂度</strong></td><td>简单</td><td>复杂（需处理 selector、buffer、事件）</td><td>简单（封装 pipeline、handler）</td></tr><tr><td><strong>资源利用率</strong></td><td>低（线程多，CPU 空转）</td><td>高（少量线程处理多连接）</td><td>更高（线程复用、零拷贝、内存池优化）</td></tr><tr><td><strong>适用场景</strong></td><td>小规模应用（如管理后台）</td><td>高并发服务（需手动优化）</td><td>高性能网络框架、RPC、IM、游戏服务器等</td></tr><tr><td><strong>典型代码结构</strong></td><td><code>ServerSocket.accept()</code> + 多线程</td><td><code>Selector</code> + <code>Channel</code> + 事件轮询</td><td><code>Bootstrap</code> + <code>ChannelPipeline</code> + <code>Handler</code></td></tr><tr><td><strong>维护与扩展性</strong></td><td>差，难调优</td><td>中等，需经验丰富</td><td>优秀，模块化、事件驱动、支持多协议</td></tr><tr><td><strong>错误与异常处理</strong></td><td>手动捕获和恢复</td><td>手动编写状态逻辑</td><td>自动传播与捕获机制（Handler 链）</td></tr></tbody></table><h2 id="RPC实践"><a href="#RPC实践" class="headerlink" title="RPC实践"></a>RPC实践</h2><h3 id="RpcClient"><a href="#RpcClient" class="headerlink" title="RpcClient"></a>RpcClient</h3><ul><li>顶层接口：定义客户端发送RPC请求的统一接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RpcClient</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 定义底层通信的方法</span><br><span class="hljs-comment">     * 输入：RpcRequest- 包含接口名、方法名、参数等</span><br><span class="hljs-comment">     * 输出：RpcResponse - 包含返回值、状态码等</span><br><span class="hljs-comment">     */</span><br>    RpcResponse <span class="hljs-title function_">sendRequest</span><span class="hljs-params">(RpcRequest request)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>设计成接口的目的：</p><ol><li>解耦：上层（ClientProxy）并不关心底层使用的是什么通信技术</li><li>可扩展：可以替换底层实现（比如：Socket，Netty，gRPC，HTTP等）</li><li>符合开闭原则：对扩展开放，对修改关闭</li></ol><p>sendRequest的流程：</p><ol><li>确定通信目标，找到服务端的host和port</li><li>建立连接</li><li>序列化消息对象并发送</li><li>等待服务端响应</li><li>收到响应并反序列化</li><li>返回响应</li></ol></blockquote><h4 id="实现1：SimpleSocketRpcClient"><a href="#实现1：SimpleSocketRpcClient" class="headerlink" title="实现1：SimpleSocketRpcClient"></a>实现1：SimpleSocketRpcClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleSocketRpcCilent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RpcClient</span> &#123;<br>    <span class="hljs-keyword">private</span> String host;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleSocketRpcCilent</span><span class="hljs-params">(String host, <span class="hljs-type">int</span> port)</span>&#123;<br>        <span class="hljs-built_in">this</span>.host = host;<br>        <span class="hljs-built_in">this</span>.port = port;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> RpcResponse <span class="hljs-title function_">sendRequest</span><span class="hljs-params">(RpcRequest request)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1. 创建 Socket 连接</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(host, port);<br>            <br>            <span class="hljs-comment">// 2. 获取输入输出流</span><br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br><br>            <span class="hljs-comment">// 3. 发送请求（JDK 序列化）</span><br>            oos.writeObject(request);<br>            oos.flush();<br><br>            <span class="hljs-comment">// 4. 阻塞等待响应</span><br>            <span class="hljs-type">RpcResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (RpcResponse) ois.readObject();<br>            <span class="hljs-keyword">return</span> response;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>工作流程：</p><ol><li>客户端调用 <code>SendRequest(request)</code></li><li><code>new Socket(host, port)</code> ，创建一个到服务端的 TCP 连接。<code>host</code> 和 <code>port</code> 指向服务端地址</li><li>获取输出流<code>ObjectOutputStream</code>，用于向服务端发送数据；获取输入流<code>ObjectInputStream </code>，用于接收服务端的返回</li><li><code>oos.writeObject(request)</code>，将 <code>RpcRequest</code>对象序列化后，通过 TCP 发送</li><li>阻塞等待服务端返回结果</li><li>将结果<code> (RpcResponse) ois.readObject()</code>反序列化为 RpcResponse</li><li>方法结束后关闭Socket</li></ol></li><li><p>优点：</p><ul><li><p>简单易懂：只用了 Socket + 对象流，代码清晰</p></li><li><p>学习友好：适合理解 RPC 基本原理</p></li><li><p>依赖少：只依赖 JDK，无需额外框架</p></li></ul></li><li><p>缺点：</p><ul><li>性能差：BIO 阻塞，无法支撑高并发</li><li>资源浪费：每次请求新建连接，不复用</li><li>序列化固定：只能用 JDK 序列化（体积大、慢）</li><li>无服务发现：需要手动指定 host 和 port</li><li>无负载均衡：只能连接单一服务器</li></ul></li></ul><blockquote><p>补充内容：</p><p>Q1：oos.flush() 的作用是是什么？</p><blockquote><p>作用是强制将缓冲区中还没发送的数据立即写出到网络通道（socket 的输出流）中。在 Java 的 I&#x2F;O 体系中，<strong>输出流（OutputStream）是带缓冲区的</strong>，<code>oos.writeObject(request);</code>他不是立即发出，而是缓冲区满了、或手动调用 <code>flush()</code>、或关闭流时，缓冲区中的数据才会被真正“推送”到目标端（即服务端）。</p></blockquote><p>Q2：SimpleSocketRpcClient 是什么 I&#x2F;O 模型？</p><blockquote><ul><li>阻塞点1：new Socket(host, port)，阻塞等待 TCP 三次握手完成，如果服务端不可达，会阻塞到超时；</li><li>阻塞点2：oos.writeObject(request) ，阻塞等待数据发送完</li><li>阻塞点3：ois.readObject()<strong>（核心阻塞）</strong>，完全阻塞，直到服务端返回完整的 Response 对象，期间该线程无法做任何其他事情。</li><li>缺点：<ul><li>每个请求需要占用一个线程，高并发时线程数暴增。</li><li>线程在等待 I&#x2F;O 期间完全空闲，资源利用率低。</li><li>不适合生产环境的高并发场景。</li></ul></li></ul></blockquote><p>Q3：SimpleSocketRpcClient如何实现的序列化和反序列化：</p><blockquote><p> 使用 JDK 原生序列化（ObjectOutputStream&#x2F;ObjectInputStream）实现的。序列化后的字节流结构大致为：</p><p>┌─────────────────────────────────────────┐<br>│ AC ED 00 05                                                               │ ← 魔数（标识这是 Java 序列化）<br>│ 73                                                                                │ ← 新对象标记<br>│ 72 00 1D part1.common.Message.RpcRequest  │ ← 类名<br>│ 00 00 00 00 00 00 00 01                                          │ ← serialVersionUID<br>│ 02                                                                                │ ← 标志位<br>│ 00 04                                                                           │ ← 字段数量 &#x3D; 4<br>│ 4C 00 0D interfaceName                                         │ ← 字段名<br>│ 74 00 12 Ljava&#x2F;lang&#x2F;String;                                     │ ← 字段类型<br>│ … (其他字段)<br>│ 78                                                                                │ ← 对象数据开始<br>│ 70                                                                                │ ← null 值<br>│ 74 00 1F part1.common.service.UserService      │ ← interfaceName 值<br>│ … (其他字段值)<br>└─────────────────────────────────────────┘</p><p>这种序列化结果包含完整的类元数据，<strong>体积较大</strong>，且<strong>性能不好</strong>，序列化&#x2F;反序列化速度慢。<strong>无法切换</strong>其他序列化方式（如 JSON、Protobuf），也<strong>不支持跨语言</strong>（只支持java），且<strong>存在安全隐患</strong>，若反序列化恶意流，可能执行任意代码（反序列化漏洞）</p></blockquote><p>Q4：Socket最后是自己关闭的吗？不需要手动.close()吗？</p><blockquote><p>Socket 不会在方法结束后自动关闭，需要修改，通过try-with-resources自动关闭资源_修改了他的代码</p></blockquote></blockquote><h4 id="实现2：NettyRpcClient"><a href="#实现2：NettyRpcClient" class="headerlink" title="实现2：NettyRpcClient"></a>实现2：NettyRpcClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyRpcClient</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RpcClient</span> &#123;<br>    <span class="hljs-comment">// 静态共享（单例模式）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Bootstrap bootstrap;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> EventLoopGroup eventLoopGroup;<br>    <br>    <span class="hljs-comment">// 服务发现</span><br>    <span class="hljs-keyword">private</span> ServiceCenter serviceCenter;<br>    <br>    <span class="hljs-comment">// 构造函数：初始化服务中心</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NettyRpcClient</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-built_in">this</span>.serviceCenter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZKServiceCenter</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 静态代码块：Netty 客户端初始化（只执行一次）</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        eventLoopGroup = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(); <span class="hljs-comment">// 创建线程池</span><br>        bootstrap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();              <span class="hljs-comment">// 创建bootstrap启动器</span><br>        bootstrap.group(eventLoopGroup)           <span class="hljs-comment">// 配置bootstrap</span><br>            .channel(NioSocketChannel.class)  <span class="hljs-comment">// 设置客户端的通道实现类型   </span><br>            .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyClientInitializer</span>());  <span class="hljs-comment">// 配置处理器handler</span><br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> RpcResponse <span class="hljs-title function_">sendRequest</span><span class="hljs-params">(RpcRequest request)</span> &#123;<br>        <span class="hljs-comment">// 1. 从服务中心获取服务地址</span><br>        <span class="hljs-type">InetSocketAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> serviceCenter.serviceDiscovery(<br>            request.getInterfaceName()<br>        );<br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> address.getHostName();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> address.getPort();<br>        <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 2. 建立连接（非阻塞）</span><br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(host, port).sync();<br>            <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> channelFuture.channel();<br>            <br>            <span class="hljs-comment">// 3. 发送请求（自动序列化）</span><br>            channel.writeAndFlush(request);<br>            <br>            <span class="hljs-comment">// 4. 等待连接关闭</span><br>            channel.closeFuture().sync();<br>            <br>            <span class="hljs-comment">// 5. 通过 AttributeKey 获取响应（线程安全）</span><br>            AttributeKey&lt;RpcResponse&gt; key = AttributeKey.valueOf(<span class="hljs-string">&quot;RPCResponse&quot;</span>);<br>            <span class="hljs-type">RpcResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> channel.attr(key).get();<br>            <br>            System.out.println(response);<br>            <span class="hljs-keyword">return</span> response;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>工作流程：</p><ul><li>静态初始化（类加载时执行1次）<ol><li>创建 EventLoopGroup（NIO 线程池）</li><li>创建 Bootstrap（客户端启动器）</li><li>配置 NettyClientInitializer：MyEncoder（序列化：对象 → 字节）、MyDecoder（反序列化：字节 → 对象）、NettyClientHandler（处理响应）</li></ol></li><li>调用sendRequest方法<ol><li>serviceCenter.serviceDiscovery(“UserService”)：查本地缓存—查zookeeper—负载均衡（一致性哈希）—返回服务端地址</li><li>bootstrap.connect(host, port).sync()：EventLoopGroup 分配 NIO 线程、建立 TCP 连接、返回 ChannelFuture</li><li>channel.writeAndFlush(request)：触发 MyEncoder.encode()、JsonSerializer 序列化、写入 TCP 缓冲区、发送到服务端</li><li>channel.closeFuture().sync()  ← 阻塞等待响应</li><li>NettyClientHandler.channelRead0() 被触发，MyDecoder 自动反序列化，通过 AttributeKey 保存响应，关闭连接</li><li>channel.attr(key).get()  ← 获取响应</li><li>返回 RpcResponse</li></ol></li></ul></li><li><p>核心技术点：</p><ul><li><p><strong>静态共享资源</strong>：netty客户端初始化采用static{}，主要有几个原因：（1）复用资源：所有请求共享同一个线程池和启动器（2）提升性能：避免重复创建 EventLoopGroup（昂贵操作）（3）线程安全：Bootstrap 是线程安全的</p></li><li><p><strong>服务发现</strong>：动态从Zookeeper中获取，支持多实例和负载均衡</p></li><li><p><strong>AttributeKey 机制</strong>：由于Netty是异步的，需要把响应传回，所以需要这种机制：每个 Channel 有一个 AttributeMap（类似 ThreadLocal），Handler 接收响应后，存入 attr(“RPCResponse”)，sendRequest 通过同样的 key 取出响应。这是线程安全的，因为每个channel独立，不会串数据，类似treadlocal的设计，线程隔离。</p><blockquote><p>“AttributeMap 是 Netty 提供的一种类型安全、线程安全的属性存储机制</p><blockquote><p> 核心特点：</p><ol><li><p>每个 Channel 都实现了 AttributeMap 接口，拥有独立的属性存储空间</p></li><li><p>通过 AttributeKey 来存取值，保证类型安全，不需要强制转换</p></li><li><p>底层使用原子数组实现，比普通 Map 性能更高</p></li></ol></blockquote><blockquote><p> 使用场景：</p><p>在我们的 RPC 项目中，用它来在不同线程间传递响应对象：</p><ul><li><p>I&#x2F;O 线程（NettyClientHandler）接收到响应后，存入 AttributeMap</p></li><li><p>业务线程（sendRequest）通过同样的 key 获取响应</p></li></ul></blockquote></blockquote></li></ul></li><li><p>优点：</p><ul><li>高性能：NIO 非阻塞，支持高并发</li><li>连接复用：Bootstrap 和 EventLoopGroup 复用</li><li>集成服务发现：自动从 ZooKeeper 获取地址</li><li>可扩展序列化：支持 JSON、Protobuf 等</li><li>响应处理：AttributeKey 机制</li></ul></li><li><p>缺点：</p><ul><li><p>复杂度高：需要理解 Netty 机制</p></li><li><p>依赖多：需要 Netty 框架</p></li><li><p>调试困难：异步逻辑不如同步直观</p></li></ul></li><li><p>我的几个问题：</p><ul><li><p>Bootstrap是什么？</p><ul><li><p>Bootstrap 是 Netty 自带的客户端启动器（引导类）</p></li><li><p>作用：封装Netty客户端的启动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>bootstrap<br>    .group(eventLoopGroup)              <span class="hljs-comment">// 1. 指定线程模型（NIO线程池）</span><br>    .channel(NioSocketChannel.class)    <span class="hljs-comment">// 2. 指定传输类型（NIO Socket）</span><br>    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyClientInitializer</span>()); <span class="hljs-comment">// 3. 配置数据处理管道</span><br></code></pre></td></tr></table></figure></li><li><p>要配置哪些内容？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 7个配置项示意</span><br><span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>bootstrap<br>    .group(eventLoopGroup)                    <span class="hljs-comment">// 1. 配置线程组 ⭐必须</span><br>    .channel(NioSocketChannel.class)          <span class="hljs-comment">// 2. 配置 Channel 类型 ⭐必须</span><br>    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyClientInitializer</span>())    <span class="hljs-comment">// 3. 配置处理器 ⭐必须</span><br>    .option(ChannelOption.SO_KEEPALIVE, <span class="hljs-literal">true</span>) <span class="hljs-comment">// 4. 配置 TCP 参数（可选），开启TCP 保活机制</span><br>    .option(ChannelOption.TCP_NODELAY, <span class="hljs-literal">true</span>)  <span class="hljs-comment">// 5. 禁用 Nagle 算法（可选）</span><br>    .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="hljs-number">5000</span>) <span class="hljs-comment">// 6. 连接超时（可选）</span><br>    .remoteAddress(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9999</span>);        <span class="hljs-comment">// 7. 远程地址（可选，也可以在 connect 时指定）</span><br></code></pre></td></tr></table></figure><ul><li><p><code>.group(EventLoopGroup) </code>- 配置线程组（必须）， 指定处理 I&#x2F;O 操作的线程池</p></li><li><p><code>.channel(Class&lt;? extends Channel&gt;) </code>- 配置 Channel 类型（必须），指定客户端使用的 Channel 实现类</p><table><thead><tr><th align="left">Channel 类型</th><th align="left">使用场景</th><th align="left">I&#x2F;O 模型</th></tr></thead><tbody><tr><td align="left">NioSocketChannel</td><td align="left">标准 TCP 客户端</td><td align="left">NIO（非阻塞）</td></tr><tr><td align="left">OioSocketChannel</td><td align="left">BIO 兼容（已弃用）</td><td align="left">BIO（阻塞）</td></tr><tr><td align="left">EpollSocketChannel</td><td align="left">Linux 专用（高性能）</td><td align="left">epoll</td></tr><tr><td align="left">KQueueSocketChannel</td><td align="left">Mac&#x2F;BSD 专用</td><td align="left">kqueue</td></tr></tbody></table></li><li><p><code>.handler(ChannelHandler)</code> - <strong>配置处理器</strong>（必须）， 配置 Channel 的Pipeline，这是最核心的配置，决定如何处理数据，这里配置了编码器、解码器和业务处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyClientInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> &#123;<br>        <span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> ch.pipeline();<br>        <span class="hljs-comment">// 出站：编码器（对象 → 字节）</span><br>        pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyEncoder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonSerializer</span>()));<br>        <span class="hljs-comment">// 入站：解码器（字节 → 对象）</span><br>        pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDecoder</span>());<br>        <span class="hljs-comment">// 入站：业务处理器</span><br>        pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyClientHandler</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>.option(ChannelOption, value)</code> - 配置 TCP 参数（可选），常用TCP参数：<code>SO_KEEPALIVE - TCP </code>保活机制、<code>TCP_NODELAY </code>- 禁用 Nagle 算法、<code>CONNECT_TIMEOUT_MILLIS </code>- 连接超时时间、<code>SO_RCVBUF / SO_SNDBUF</code> - 接收&#x2F;发送缓冲区大小</p></li><li><p>.remoteAddress(host, port) - 远程地址（可选），预先设置远程地址</p></li></ul></li></ul></li><li><p>AttrybuteKey是什么？</p><ul><li><p>AttributeKey &#x3D; Channel 的”临时存储空间”</p></li><li><p>作用：使用AttrybuteKey作为异步I&#x2F;O的响应传递箱</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs q">【业务线程】                         【Netty I/O 线程】<br>发送请求<br>    ↓<br>等待响应（阻塞）                    收到响应<br>    ↓                               ↓<br>    ┌───────────────────────────┐   ChannelHandler<br>    │  Channel AttributeMap     │   ↓<br>    │  ┌───────────────────┐    │   把响应放入 Channel<br>    │  │ <span class="hljs-string">&quot;RPCResponse&quot;</span>     │◄───┼───<span class="hljs-built_in">attr</span>(<span class="hljs-built_in">key</span>).<span class="hljs-built_in">set</span>(response)<br>    │  │  → RpcResponse    │    │<br>    │  └───────────────────┘    │<br>    └───────────────────────────┘<br>         ↓<br>    从 Channel 取出响应<br>    channel.<span class="hljs-built_in">attr</span>(<span class="hljs-built_in">key</span>).<span class="hljs-built_in">get</span>()<br></code></pre></td></tr></table></figure></li><li><p>是线程安全的，因为每个channel有独立的AttrybuteMap</p></li></ul></li><li><p>Netty也是阻塞的，为什么性能更好？</p><ul><li><p>Netty的阻塞是业务层阻塞，I&#x2F;O层非阻塞</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">【业务线程 Thread-<span class="hljs-number">1</span>】              【EventLoop 线程（NIO）】<br>    ↓                               <br><span class="hljs-function"><span class="hljs-title">sendRequest</span><span class="hljs-params">()</span></span><br>    ↓                               <br>bootstrap<span class="hljs-selector-class">.connect</span>()<span class="hljs-selector-class">.sync</span>()  ← 阻塞   EventLoop 处理连接（非阻塞）<br>    ↓                               ├─ 处理 Channel1 的连接<br>channel<span class="hljs-selector-class">.writeAndFlush</span>()      ──→    ├─ 处理 Channel2 的写入<br>    ↓                               ├─ 处理 Channel3 的读取<br>channel<span class="hljs-selector-class">.closeFuture</span>()<span class="hljs-selector-class">.sync</span>() ← 阻塞  └─ 轮询所有 Channel 事件<br>    ↓                               <br>等待响应...                         收到 Channel1 的响应<br>    ↓                               ↓<br><span class="hljs-function"><span class="hljs-title">attr</span><span class="hljs-params">(key)</span></span><span class="hljs-selector-class">.get</span>()              ←──── <span class="hljs-built_in">attr</span>(key)<span class="hljs-selector-class">.set</span>(response)<br>    ↓<br>return response<br><br><span class="hljs-comment">// 100 个并发请求 = 100 个业务线程阻塞 + 10 个 EventLoop 线程工作</span><br></code></pre></td></tr></table></figure></li><li><p>Netty的I&#x2F;O模型是非阻塞 I&#x2F;O + 多路复用，EventLoop的工作模式是，一个线程同时监听多个Channel，非阻塞轮询处理</p></li><li><p>Netty的解码和编码、序列化、业务处理在不同的Handler中异步执行，可以并行处理</p></li><li><p>Netty的ByteBuf和FileChannel支持零拷贝，能够减少内存复制次数</p></li><li><p>Netty中Bootstrap 和 EventLoopGroup 是静态共享的，避免了每次请求都创建线程池的开销。BIO 每次都要创建新的 Socket</p></li></ul></li></ul></li></ul><blockquote><p>我的思考：</p><p>Q1: 为什么 sendRequest 是阻塞的，Netty 不是异步的吗？</p><blockquote><p>Netty 底层是异步的，但这里为了简化使用，用 sync() 阻塞等待结果。也可以改成异步模式，用 ChannelFuture.addListener() 回调处理响应，但对业务代码不够友好。这里选择”底层异步 + 上层同步”的折中方案。</p></blockquote><p>Q2: 如果同时发送多个请求，AttributeKey 会混乱吗？</p><blockquote><p>不会。每次 connect() 都会创建新的 Channel，每个 Channel 有独立的 AttributeMap。虽然都用同一个 key 名称 “RPCResponse”，但存储在不同 Channel 中，不会互相干扰。</p></blockquote><p>Q3: EventLoopGroup 为什么要 static？</p><blockquote><p>EventLoopGroup 内部维护线程池，创建和销毁开销很大。设为 static 后，整个应用只创建一次，所有 RpcClient 实例共享，提升性能。但要注意应用关闭时调用 shutdownGracefully() 释放资源。</p></blockquote></blockquote><ul><li><p>两个实现类对比</p><table><thead><tr><th><strong>功能</strong></th><th><strong>SimpleSocket 实现</strong></th><th><strong>Netty 实现</strong></th></tr></thead><tbody><tr><td><strong>连接建立</strong></td><td><code>new Socket(host, port)</code></td><td><code>bootstrap.connect(host, port)</code></td></tr><tr><td><strong>序列化方式</strong></td><td>JDK 自带 <code>ObjectOutputStream</code></td><td>自定义 <code>MyEncoder</code>（基于 ByteBuf）</td></tr><tr><td><strong>发送请求</strong></td><td><code>oos.writeObject(request)</code></td><td><code>channel.writeAndFlush(request)</code></td></tr><tr><td><strong>接收响应</strong></td><td><code>ois.readObject()</code></td><td><code>channel.attr(key).get()</code>（异步获取响应）</td></tr><tr><td><strong>服务发现</strong></td><td>无（需手动指定 host、port）</td><td>调用 <code>serviceCenter.serviceDiscovery()</code> 从 ZooKeeper 获取地址</td></tr><tr><td><strong>连接复用</strong></td><td>否（每次请求新建 Socket）</td><td>是（<code>Bootstrap</code> 单例复用连接池）</td></tr><tr><td><strong>I&#x2F;O 模型</strong></td><td>阻塞 I&#x2F;O（BIO）</td><td>异步非阻塞 I&#x2F;O（NIO）</td></tr><tr><td><strong>性能特性</strong></td><td>简单易懂但性能较低</td><td>高并发、高吞吐、低延迟</td></tr></tbody></table></li></ul><h3 id="RpcServer"><a href="#RpcServer" class="headerlink" title="RpcServer"></a>RpcServer</h3><ul><li><p>顶层接口：定义客户端发送RPC请求的统一接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RpcServer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span>;  <span class="hljs-comment">// 启动服务器，监听指定端口</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>;           <span class="hljs-comment">// 停止服务器</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="实现1：SimpleRPCServer"><a href="#实现1：SimpleRPCServer" class="headerlink" title="实现1：SimpleRPCServer"></a>实现1：SimpleRPCServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleRPCRPCServer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RpcServer</span> &#123;<br>    <span class="hljs-keyword">private</span> ServiceProvider serviceProvide;  <span class="hljs-comment">// ← 服务提供者</span><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 步骤 1：创建 ServerSocket，监听端口</span><br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(port);<br>            System.out.println(<span class="hljs-string">&quot;服务器启动了&quot;</span>);<br>            <br>            <span class="hljs-comment">// 步骤 2：无限循环，等待客户端连接</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 步骤 3：阻塞等待客户端连接（Accept）</span><br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();  <span class="hljs-comment">// ← 阻塞在这里</span><br>                <br>                <span class="hljs-comment">// 步骤 4：为每个连接创建一个新线程处理</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkThread</span>(socket, serviceProvide)).start();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>WorkThread工作线程干了什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket socket;                    <span class="hljs-comment">// ← 客户端连接</span><br>    <span class="hljs-keyword">private</span> ServiceProvider serviceProvide;   <span class="hljs-comment">// ← 服务提供者</span><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 步骤 1：获取输入输出流</span><br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>            <br>            <span class="hljs-comment">// 步骤 2：读取客户端请求（阻塞）</span><br>            <span class="hljs-type">RpcRequest</span> <span class="hljs-variable">rpcRequest</span> <span class="hljs-operator">=</span> (RpcRequest) ois.readObject();<br>            <br>            <span class="hljs-comment">// 步骤 3：反射调用服务方法</span><br>            <span class="hljs-type">RpcResponse</span> <span class="hljs-variable">rpcResponse</span> <span class="hljs-operator">=</span> getResponse(rpcRequest);<br>            <br>            <span class="hljs-comment">// 步骤 4：写入响应</span><br>            oos.writeObject(rpcResponse);<br>            oos.flush();<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//反射调用服务方法</span><br>    <span class="hljs-keyword">private</span> RpcResponse <span class="hljs-title function_">getResponse</span><span class="hljs-params">(RpcRequest rpcRequest)</span>&#123;<br>        <span class="hljs-comment">//得到服务名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">interfaceName</span> <span class="hljs-operator">=</span> rpcRequest.getInterfaceName();<br>        <span class="hljs-comment">//得到服务端相应服务实现类</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> serviceProvide.getService(interfaceName);<br>        <span class="hljs-comment">//反射调用方法</span><br>        Method method=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            method= service.getClass().getMethod(rpcRequest.getMethodName(), rpcRequest.getParamsType());<br>            Object invoke=method.invoke(service,rpcRequest.getParams());<br>            <span class="hljs-keyword">return</span> RpcResponse.sussess(invoke);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;方法执行错误&quot;</span>);<br>            <span class="hljs-keyword">return</span> RpcResponse.fail();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="实现2：NettyRPCServer"><a href="#实现2：NettyRPCServer" class="headerlink" title="实现2：NettyRPCServer"></a>实现2：NettyRPCServer</h4><ul><li><p>整体架构</p><p>NettyRPCRPCServer (启动层)<br>↓ 创建<br>NioEventLoopGroup × 2 (线程层，服务线程组boss负责建立连接， work负责具体的请求)<br>↓ 配置<br>NettyServerInitializer (Pipeline 配置层)<br>↓ 处理<br>Pipeline (处理链层)<br>├─ MyEncoder (出站编码器)<br>├─ MyDecoder (入站解码器)<br>└─ NettyRPCServerHandler (业务处理器)</p><img src="/2025/10/12/RPC%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/hexo-blog\source\_posts\RPC相关学习\Server端整体架构图.png" alt="Server端整体架构图" style="zoom: 50%;"></li><li><p>代码实现</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyRPCRPCServer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RpcServer</span> &#123;<br>    <span class="hljs-keyword">private</span> ServiceProvider serviceProvider;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span> &#123;<br>        <span class="hljs-comment">//1. netty 服务线程组boss负责建立连接， work负责具体的请求</span><br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">bossGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();  <span class="hljs-comment">// 处理链接</span><br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">workGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();  <span class="hljs-comment">// 处理IO</span><br>        System.out.println(<span class="hljs-string">&quot;netty服务端启动了&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//2. 配置 ServerBootstrap</span><br>            <span class="hljs-comment">//启动netty服务器</span><br>            <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">serverBootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>            <span class="hljs-comment">//初始化</span><br>            serverBootstrap.group(bossGroup,workGroup).channel(NioServerSocketChannel.class)<br>                    .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyServerInitializer</span>(serviceProvider));<br><br>            <span class="hljs-comment">//3. 绑定端口并启动</span><br>            <span class="hljs-comment">//同步堵塞</span><br>            ChannelFuture channelFuture=serverBootstrap.bind(port).sync();<br>            <span class="hljs-comment">//4. 阻塞等待关闭</span><br>            <span class="hljs-comment">//死循环监听</span><br>            channelFuture.channel().closeFuture().sync();<br>        &#125;<span class="hljs-keyword">catch</span> (InterruptedException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            bossGroup.shutdownGracefully();<br>            workGroup.shutdownGracefully();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>核心技术点</p><ul><li><p>bossGroup（老板组）</p><ul><li><p>作用：专门接收客户端连接（Accept）</p></li><li><p>线程数：默认 1 个</p></li><li><p>工作内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>selector.select();  <span class="hljs-comment">// 监听 ACCEPT 事件</span><br><span class="hljs-keyword">if</span> (有新连接) &#123;<br><span class="hljs-type">SocketChannel</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> serverChannel.accept();<br>注册到 workGroup;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>workGroup（工人组）</p><ul><li><p>作用：处理已建立连接的读写操作</p></li><li><p>线程数：默认 CPU 核心数 × 2（假设 16 个）</p></li><li><p>工作内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>selector.select();  <span class="hljs-comment">// 监听 READ/WRITE 事件</span><br><span class="hljs-keyword">if</span> (Channel 有数据可读) &#123;<br>读取数据 → Pipeline 处理;<br>&#125;<br><span class="hljs-keyword">if</span> (Channel 可以写) &#123;<br>发送数据;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>ServerBootstrap的配置</p><ul><li><p>这里配置主从Reactor，boosGroup为主，workGroup为从</p></li><li><p>服务端channel的类型为NioServerSocketChannel，作用是监听端口，接受连接；对比客户端的为NioSocketChannel，作用为连接到服务器。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">客户端：<br>NioSocketChannel client = <span class="hljs-built_in">new</span> NioSocketChannel();<br>client.<span class="hljs-keyword">connect</span>(serverAddress);  // ← 主动连接<br><br>服务端：<br>NioServerSocketChannel <span class="hljs-keyword">server</span> = <span class="hljs-built_in">new</span> NioServerSocketChannel();<br><span class="hljs-keyword">server</span>.bind(port);              // ← 监听端口<br>NioSocketChannel client = <span class="hljs-keyword">server</span>.accept();  // ← 接收连接<br></code></pre></td></tr></table></figure></li><li><p>完整配置项参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">serverBootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br><br>serverBootstrap<br>    <span class="hljs-comment">// ===== 必选配置 =====</span><br>    .group(bossGroup, workGroup)              <span class="hljs-comment">// 配置线程组</span><br>    .channel(NioServerSocketChannel.class)    <span class="hljs-comment">// 配置服务端 Channel 类型</span><br>    .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyServerInitializer</span>(...))  <span class="hljs-comment">// 配置客户端连接的处理器</span><br>    <br>    <span class="hljs-comment">// ===== 可选配置（常用） =====</span><br>    .option(ChannelOption.SO_BACKLOG, <span class="hljs-number">128</span>)    <span class="hljs-comment">// 配置 ServerSocketChannel 参数</span><br>    .childOption(ChannelOption.SO_KEEPALIVE, <span class="hljs-literal">true</span>)  <span class="hljs-comment">// 配置 SocketChannel 参数</span><br>    .childOption(ChannelOption.TCP_NODELAY, <span class="hljs-literal">true</span>)   <span class="hljs-comment">// 禁用 Nagle 算法</span><br>    <br>    <span class="hljs-comment">// ===== 可选配置（不常用） =====</span><br>    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>())            <span class="hljs-comment">// 配置 ServerSocketChannel 的处理器</span><br>    .localAddress(<span class="hljs-number">9999</span>);                      <span class="hljs-comment">// 配置绑定地址（可以不配，bind 时指定）</span><br></code></pre></td></tr></table></figure></li><li><p>为什么这里没有使用.handler()，而是配置  .childHandler()</p><p>两者的区别：</p><table><thead><tr><th align="left">特性</th><th align="left">.handler()</th><th align="left">.childHandler()</th></tr></thead><tbody><tr><td align="left">作用对象</td><td align="left">ServerSocketChannel（服务器自己）</td><td align="left">SocketChannel（每个客户端连接）</td></tr><tr><td align="left">何时调用</td><td align="left">服务器启动时（bind 时）</td><td align="left">每次 accept 新连接时</td></tr><tr><td align="left">调用次数</td><td align="left">1 次（服务器生命周期内）</td><td align="left">N 次（每个客户端连接各一次）</td></tr><tr><td align="left">使用频率</td><td align="left">⭐（很少用）</td><td align="left">⭐⭐⭐⭐⭐（必须配置）</td></tr><tr><td align="left">典型用途</td><td align="left">服务器启动日志、监控</td><td align="left"><strong>业务处理</strong>（编解码、RPC 调用）</td></tr></tbody></table><p>因为childHandler()才是处理业务的，服务器自己的事件比如bind成功了，bind失败了这些通常不需要通过配置来特殊处理，反而是客户端连接的事件，比如连接，接收数据等这才是核心业务逻辑，必须处理</p></li></ul></li><li><p>NettyServerInitializer：Pipeline配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyServerInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt; &#123;<br>    <span class="hljs-keyword">private</span> ServiceProvider serviceProvider;  <span class="hljs-comment">// ← 需要传递给 Handler</span><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> ch.pipeline();<br>        <br>        <span class="hljs-comment">// 配置处理器链</span><br>        pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyEncoder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonSerializer</span>()));  <span class="hljs-comment">// 出站编码器</span><br>        pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDecoder</span>());                       <span class="hljs-comment">// 入站解码器</span><br>        pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyRPCServerHandler</span>(serviceProvider));  <span class="hljs-comment">// 业务处理器</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>编码器和解码器对Client和Server是可以复用的</p></li><li><p>Netty会自动识别Handler的类型（在实现handler的时候需要<strong>继承入站&#x2F;出站handler的基类</strong>），对于接受请求（入站），只会走入站Handler(MyEncoder-NettyRPCServerHandler)，而发送响应（出站），只会走出站Handler（MyDecoder），这里的配置处理链顺序写成MyEncoder（出站）-MyDecoder（入站）-NettyRPCServerHandler（入站），入站和出站作为整体可以调换顺序，但是，内部不能调换顺序，比如**不能写成：NettyRPCServerHandler（入站）-MyDecoder（入站）**这样是有问题的，入站的执行顺序是按照添加顺序的，会出错</p><table><thead><tr><th align="left">Handler 基类</th><th align="left">类型</th><th align="left">处理方向</th></tr></thead><tbody><tr><td align="left">MessageToByteEncoder</td><td align="left">出站</td><td align="left">数据发送时</td></tr><tr><td align="left">ByteToMessageDecoder</td><td align="left">入站</td><td align="left">数据接收时</td></tr><tr><td align="left">SimpleChannelInboundHandler</td><td align="left">入站</td><td align="left">数据接收时</td></tr><tr><td align="left">ChannelOutboundHandler</td><td align="left">出站</td><td align="left">数据发送时</td></tr></tbody></table><table><thead><tr><th align="left">场景</th><th align="left">顺序要求</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">入站 + 出站混合Handler</td><td align="left">❌ 不重要</td><td align="left">Netty 自动分离</td></tr><tr><td align="left">多个入站 Handler</td><td align="left">✅ 重要</td><td align="left">按添加顺序执行</td></tr><tr><td align="left">多个出站 Handler</td><td align="left">✅ 重要</td><td align="left">按添加相反顺序执行（ctx.write()触发的情况下）</td></tr></tbody></table><blockquote><p>补充知识：</p><ul><li><p>ctx.write()触发点位当前 Handler 的 ctx，扫描方向是向 Head 查找下一个出站 Handler，找到 Handler 后，Handler 内的 <code>ctx.write()</code> 会继续沿 Pipeline 向 Head 传播</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ===== 多个出站 Handler =====</span><br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EncryptEncoder</span>());  <span class="hljs-comment">// 出站（加密 ByteBuf）</span><br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectEncoder</span>());   <span class="hljs-comment">// 出站（Object → ByteBuf）</span><br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandler</span>());       <span class="hljs-comment">// 入站</span><br>    <br><span class="hljs-comment">// pipeline：head-EncryptEncoder-ObjectEncoder-MyHandler-tail</span><br>    <br><span class="hljs-comment">// 当 MyHandler 触发 ctx.write(object)：</span><br><span class="hljs-comment">// 出站顺序（向前查找）：ObjectEncoder → EncryptEncoder</span><br><span class="hljs-comment">// 数据流：Object → ByteBuf → 加密的 ByteBuf ✅</span><br>    <br><span class="hljs-comment">// 如果顺序反了：</span><br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectEncoder</span>());   <span class="hljs-comment">// 出站</span><br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EncryptEncoder</span>());  <span class="hljs-comment">// 出站</span><br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandler</span>());       <span class="hljs-comment">// 入站</span><br>    <br><span class="hljs-comment">// 当 MyHandler 触发 ctx.write(object)：</span><br><span class="hljs-comment">// 出站顺序（向前查找）：EncryptEncoder → ObjectEncoder</span><br><span class="hljs-comment">// 数据流：Object → EncryptEncoder（期望 ByteBuf，实际是 Object）❌</span><br></code></pre></td></tr></table></figure></li><li><p>channel.write()触发点为tail，扫描方向为从 Tail → Head，以上文为例，扫描方向为：TailContext → MyHandler → EncryptEncoder → ObjectEncoder → HeadContext， <strong>Handler 的 write 方法执行顺序按 Pipeline 添加顺序（逻辑顺序）</strong>，因此在出站handler添加的时候需要与ctx.write()触发方式的添加顺序相反：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectEncoder</span>());   <span class="hljs-comment">// 出站，首先执行</span><br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EncryptEncoder</span>());  <span class="hljs-comment">// 出站，最后执行</span><br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandler</span>());       <span class="hljs-comment">// 入站</span><br></code></pre></td></tr></table></figure></li></ul></blockquote></li></ul></li><li><p>NettyRPCServerHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyRPCServerHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;RpcRequest&gt; &#123;<br>    <span class="hljs-keyword">private</span> ServiceProvider serviceProvider;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, RpcRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">RpcResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> getResponse(request);<br>        ctx.writeAndFlush(response);<br>        ctx.close();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exceptionCaught</span><span class="hljs-params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        cause.printStackTrace();<br>        ctx.close();<br>    &#125;<br>    <span class="hljs-keyword">private</span> RpcResponse <span class="hljs-title function_">getResponse</span><span class="hljs-params">(RpcRequest rpcRequest)</span>&#123;<br>        <span class="hljs-comment">//得到服务名</span><br>        String interfaceName=rpcRequest.getInterfaceName();<br>        <span class="hljs-comment">//得到服务端相应服务实现类</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> serviceProvider.getService(interfaceName);<br>        <span class="hljs-comment">//反射调用方法</span><br>        Method method=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            method= service.getClass().getMethod(rpcRequest.getMethodName(), rpcRequest.getParamsType());<br>            Object invoke=method.invoke(service,rpcRequest.getParams());<br>            <span class="hljs-keyword">return</span> RpcResponse.sussess(invoke);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;方法执行错误&quot;</span>);<br>            <span class="hljs-keyword">return</span> RpcResponse.fail();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>与Simple实现不同的是I&#x2F;O处理方式，getResponse()方法是一样的</p><table><thead><tr><th align="left">特性</th><th align="left">Simple (WorkThread)</th><th align="left">Netty (NettyRPCServerHandler)</th></tr></thead><tbody><tr><td align="left">输入获取</td><td align="left">ObjectInputStream.readObject()</td><td align="left">channelRead0(ctx, request) 参数自动传入</td></tr><tr><td align="left">反序列化</td><td align="left">JDK 原生（ObjectInputStream）</td><td align="left">Pipeline 前置处理（MyDecoder）</td></tr><tr><td align="left">输出发送</td><td align="left">ObjectOutputStream.writeObject()</td><td align="left">ctx.writeAndFlush(response)</td></tr><tr><td align="left">序列化</td><td align="left">JDK 原生（ObjectOutputStream）</td><td align="left">Pipeline 后置处理（MyEncoder）</td></tr><tr><td align="left">连接关闭</td><td align="left">socket.close()</td><td align="left">ctx.close()</td></tr></tbody></table></li></ul></li><li><p>主从Reactor多线程模式</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">┌─────────────────────────────────────────────────────────────┐<br>│  主 Reactor（bossGroup）                                     │<br>│  ┌──────────────────────────────────────┐                   │<br>│  │  EventLoop-boss（单个线程）            │                   │<br>│  │                                      │                   │<br>│  │  <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;                      │                   │<br>│  │    events = selector.<span class="hljs-keyword">select</span>();       │                   │<br>│  │    <span class="hljs-keyword">for</span> (event : events) &#123;            │                   │<br>│  │      <span class="hljs-keyword">if</span> (event == ACCEPT) &#123;          │                   │<br>│  │        SocketChannel client = accept(); ← 只负责接收连接   │<br>│  │        注册到 subReactor;             │                   │<br>│  │      &#125;                               │                   │<br>│  │    &#125;                                 │                   │<br>│  │  &#125;                                   │                   │<br>│  └──────────────────────────────────────┘                   │<br>└─────────────────────────────────────────────────────────────┘<br>                    ↓ 注册连接<br>┌─────────────────────────────────────────────────────────────┐<br>│  从 Reactor（workGroup）                                     │<br>│  ┌────────────────┐  ┌────────────────┐  ┌────────────────┐ │<br>│  │ EventLoop<span class="hljs-number">-1</span>    │  │ EventLoop<span class="hljs-number">-2</span>    │  │ EventLoop<span class="hljs-number">-3</span>    │ │<br>│  │                │  │                │  │                │ │<br>│  │ <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123; │  │ <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123; │  │ <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123; │ │<br>│  │   <span class="hljs-keyword">select</span>();    │  │   <span class="hljs-keyword">select</span>();    │  │   <span class="hljs-keyword">select</span>();    │ │<br>│  │   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">READ</span>) &#123;  │  │   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">READ</span>) &#123;  │  │   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">READ</span>) &#123;  │ │<br>│  │     <span class="hljs-keyword">read</span>();    │  │     <span class="hljs-keyword">read</span>();    │  │     <span class="hljs-keyword">read</span>();    │ │<br>│  │     decode();  │  │     decode();  │  │     decode();  │ │<br>│  │     process(); │  │     process(); │  │     process(); │ │<br>│  │     encode();  │  │     encode();  │  │     encode();  │ │<br>│  │     <span class="hljs-keyword">write</span>();   │  │     <span class="hljs-keyword">write</span>();   │  │     <span class="hljs-keyword">write</span>();   │ │<br>│  │   &#125;            │  │   &#125;            │  │   &#125;            │ │<br>│  │ &#125;              │  │ &#125;              │  │ &#125;              │ │<br>│  └────────────────┘  └────────────────┘  └────────────────┘ │<br>│       ↑                   ↑                   ↑             │<br>│    Channel<span class="hljs-number">-1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>      Channel<span class="hljs-number">-2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>      Channel<span class="hljs-number">-3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>    │<br>└─────────────────────────────────────────────────────────────┘<br><br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>主 Reactor 专注接收连接（Accept），不会被阻塞</li><li>从 Reactor 并行处理 I&#x2F;O（Read&#x2F;Write）</li><li>充分利用多核 CPU</li><li>高并发下性能最佳</li></ol></li></ul></li><li><p>工作流程</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">【阶段 <span class="hljs-number">1</span>：服务器启动】<br>main 线程<br>    ↓<br>NettyRPCRPCServer.<span class="hljs-keyword">start</span>(<span class="hljs-number">9999</span>)<br>    ↓<br>创建 bossGroup (<span class="hljs-number">1</span> 线程) + workGroup (<span class="hljs-number">16</span> 线程)<br>    ↓<br>配置 ServerBootstrap<br>    ↓<br>bind(<span class="hljs-number">9999</span>).sync()<br>    ↓<br>NioServerSocketChannel 开始监听 <span class="hljs-number">9999</span> 端口<br>    ↓<br>bossGroup 的 EventLoop<span class="hljs-number">-0</span> 开始 <span class="hljs-keyword">select</span>()<br>    ↓<br>main 线程阻塞在 closeFuture().sync()  ← 服务器持续运行<br><br><br>【阶段 <span class="hljs-number">2</span>：客户端连接】<br>客户端发起连接到 <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9999</span><br>    ↓<br>bossGroup 的 Selector 检测到 ACCEPT 事件<br>    ↓<br>EventLoop<span class="hljs-number">-0</span> 执行 accept()<br>    ↓<br>创建 SocketChannel<span class="hljs-number">-1</span>（客户端连接）<br>    ↓<br>调用 NettyServerInitializer.initChannel(SocketChannel<span class="hljs-number">-1</span>)<br>    ↓<br>配置 Pipeline：<br>    ├─ MyEncoder<br>    ├─ MyDecoder<br>    └─ NettyRPCServerHandler<br>    ↓<br>将 SocketChannel<span class="hljs-number">-1</span> 注册到 workGroup 的 EventLoop<span class="hljs-number">-5</span><br>    ↓<br>EventLoop<span class="hljs-number">-5</span> 开始监听 SocketChannel<span class="hljs-number">-1</span> 的 <span class="hljs-keyword">READ</span> 事件<br><br><br>【阶段 <span class="hljs-number">3</span>：接收请求】<br>客户端发送 RpcRequest<br>    ↓<br>数据到达服务器<br>    ↓<br>EventLoop<span class="hljs-number">-5</span> 的 Selector 检测到 <span class="hljs-keyword">READ</span> 事件<br>    ↓<br>读取字节流<br>    ↓<br>Pipeline 入站处理：<br>    ├─ MyDecoder.decode()<br>    │   ├─ 读取消息头（<span class="hljs-number">16</span> 字节）<br>    │   │   ├─ 魔数：<span class="hljs-number">0x12345678</span><br>    │   │   ├─ 消息类型：<span class="hljs-number">0</span> (Request)<br>    │   │   ├─ 序列化方式：<span class="hljs-number">1</span> (<span class="hljs-type">JSON</span>)<br>    │   │   └─ 数据长度：<span class="hljs-number">256</span><br>    │   ├─ 读取消息体（<span class="hljs-number">256</span> 字节）<br>    │   └─ JsonSerializer.deserialize() → RpcRequest 对象<br>    │<br>    └─ NettyRPCServerHandler.channelRead0(ctx, request)<br><br><br>【阶段 <span class="hljs-number">4</span>：处理请求（核心业务）】<br>NettyRPCServerHandler.channelRead0()<br>    ↓<br>调用 getResponse(request)<br>    ↓<br>步骤 <span class="hljs-number">1</span>：获取接口名<br>    interfaceName = &quot;part1.common.service.UserService&quot;<br>    ↓<br>步骤 <span class="hljs-number">2</span>：从 ServiceProvider 获取服务实例<br>    service = serviceProvider.getService(interfaceName)<br>    返回：UserServiceImpl@<span class="hljs-number">12345</span><br>    ↓<br>步骤 <span class="hljs-number">3</span>：反射获取方法<br>    <span class="hljs-keyword">Method</span> <span class="hljs-keyword">method</span> = UserServiceImpl.<span class="hljs-keyword">class</span>.getMethod(<br>        &quot;getUserByUserId&quot;,  // 方法名<br>        <span class="hljs-type">Integer</span>.<span class="hljs-keyword">class</span>       // 参数类型<br>    )<br>    ↓<br>步骤 <span class="hljs-number">4</span>：反射调用方法<br>    <span class="hljs-keyword">Object</span> result = <span class="hljs-keyword">method</span>.invoke(<br>        userServiceImpl,  // 实例<br>        <span class="hljs-number">1</span>                 // 参数值<br>    )<br>    等价于：userServiceImpl.getUserByUserId(<span class="hljs-number">1</span>)<br>    返回：<span class="hljs-keyword">User</span>(id=<span class="hljs-number">1</span>, userName=<span class="hljs-type">UUID</span>, sex=random)<br>    ↓<br>步骤 <span class="hljs-number">5</span>：封装响应<br>    RpcResponse response = RpcResponse.success(result)<br>    返回 response<br><br><br>【阶段 <span class="hljs-number">5</span>：返回响应】<br>NettyRPCServerHandler<br>    ↓<br>ctx.writeAndFlush(response)  ← 触发出站<br>    ↓<br>Pipeline 出站处理：<br>    MyEncoder.encode()<br>        ├─ JsonSerializer.serialize(response) → byte[]<br>        ├─ 写入消息头（魔数、类型、长度）<br>        └─ 写入消息体<br>    ↓<br>字节流写入 TCP 缓冲区<br>    ↓<br>网络发送给客户端<br><br><br>【阶段 <span class="hljs-number">6</span>：关闭连接】<br>ctx.<span class="hljs-keyword">close</span>()<br>    ↓<br>触发 <span class="hljs-keyword">CLOSE</span> 事件<br>    ↓<br>SocketChannel<span class="hljs-number">-1</span> 关闭<br>    ↓<br>从 workGroup 的 EventLoop<span class="hljs-number">-5</span> 注销<br>    ↓<br>TCP 四次挥手<br>    ↓<br>连接断开<br></code></pre></td></tr></table></figure></li><li><p>相关问题：</p><ul><li><p>Netty 版本的 RPC 服务器是如何工作的？</p><p>NettyRPCServer 基于 Netty 框架实现，采用主从 Reactor 多线程模式。</p><p>核心组件：</p><ol><li><p>bossGroup：1 个线程，专门 Accept 客户端连接</p></li><li><p>workGroup：多个线程（默认 CPU 核心数 × 2），处理已建立连接的 I&#x2F;O 操作</p></li><li><p>Pipeline：每个连接有独立的处理器链（Decoder → Handler → Encoder）</p></li></ol><p>启动流程：</p><ol><li><p>创建 bossGroup 和 workGroup</p></li><li><p>配置 ServerBootstrap（线程组、Channel 类型、Handler）</p></li><li><p>绑定端口（如 9999），开始监听</p></li><li><p>主线程阻塞，服务器持续运行</p></li></ol><p>请求处理：</p><ol><li><p>boss 线程 Accept 新连接，创建 SocketChannel</p></li><li><p>注册到 worker 线程，配置 Pipeline</p></li><li><p>worker 线程通过 Selector 监听读事件</p></li><li><p>数据到达 → MyDecoder 解码 → Handler 反射调用 → MyEncoder 编码 → 发送响应</p></li></ol><p>性能优势：</p><ul><li><p>用 17 个线程处理上千个连接（SimpleRPCServer 需要上千个线程）</p></li><li><p>NIO 多路复用，非阻塞 I&#x2F;O</p></li><li><p>Pipeline 流水线处理，解耦且高效</p></li><li><p>适合高并发场景？</p></li></ul></li><li><p>名词理解</p><table><thead><tr><th align="left">名词</th><th align="left">层次</th><th align="left">作用</th><th align="left">数量</th><th align="left">生命周期</th></tr></thead><tbody><tr><td align="left">Reactor</td><td align="left">概念</td><td align="left">设计模式</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">ServerBootstrap</td><td align="left">启动器</td><td align="left">配置和启动服务器</td><td align="left">1 个</td><td align="left">配置阶段</td></tr><tr><td align="left">EventLoopGroup</td><td align="left">线程组</td><td align="left">管理多个 EventLoop</td><td align="left">2 个（boss&#x2F;work）</td><td align="left">服务器运行期间</td></tr><tr><td align="left">EventLoop</td><td align="left">事件循环</td><td align="left">处理 I&#x2F;O 事件</td><td align="left">boss:1, work:多个</td><td align="left">服务器运行期间</td></tr><tr><td align="left">Thread</td><td align="left">Java 线程</td><td align="left">执行事件循环</td><td align="left">与 EventLoop 1:1</td><td align="left">服务器运行期间</td></tr><tr><td align="left">Selector</td><td align="left">NIO 选择器</td><td align="left">监听 I&#x2F;O 事件</td><td align="left">与 EventLoop 1:1</td><td align="left">服务器运行期间</td></tr><tr><td align="left">Channel</td><td align="left">通道</td><td align="left">网络连接的抽象</td><td align="left">1 个 Server + N 个 Client</td><td align="left">连接期间</td></tr><tr><td align="left">Pipeline</td><td align="left">处理器链</td><td align="left">组织 Handler</td><td align="left">与 Channel 1:1</td><td align="left">连接期间</td></tr><tr><td align="left">Handler</td><td align="left">处理器</td><td align="left">处理业务逻辑</td><td align="left">每个 Pipeline 多个</td><td align="left">连接期间</td></tr></tbody></table></li></ul></li></ul><h3 id="ServiceRegister"><a href="#ServiceRegister" class="headerlink" title="ServiceRegister"></a>ServiceRegister</h3><h4 id="整体架构图"><a href="#整体架构图" class="headerlink" title="整体架构图"></a>整体架构图</h4><img src="/2025/10/12/RPC%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/hexo-blog\source\_posts\RPC相关学习\RPC服务注册与发现整体架构图.png" alt="RPC服务注册与发现整体架构图" style="zoom:50%;"><h4 id="服务端启动并注册服务"><a href="#服务端启动并注册服务" class="headerlink" title="服务端启动并注册服务"></a>服务端启动并注册服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// testServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 1. 创建服务实现</span><br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>    <br>    <span class="hljs-comment">// 2. 创建服务提供者，指定自己的地址</span><br>    <span class="hljs-type">ServiceProvider</span> <span class="hljs-variable">serviceProvider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceProvider</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9999</span>);<br>    <br>    <span class="hljs-comment">// 3. 注册服务到ZooKeeper</span><br>    serviceProvider.provideServiceInterface(userService);<br>    <br>    <span class="hljs-comment">// 4. 启动RPC服务器</span><br>    <span class="hljs-type">RpcServer</span> <span class="hljs-variable">rpcServer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyRPCRPCServer</span>(serviceProvider);<br>    rpcServer.start(<span class="hljs-number">9999</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>UserServiceImpl类：服务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserByUserId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端查询了&quot;</span>+id+<span class="hljs-string">&quot;的用户&quot;</span>);<br>        <span class="hljs-comment">// 模拟从数据库中取用户的行为</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> User.builder().userName(UUID.randomUUID().toString())<br>                .id(id)<br>                .sex(random.nextBoolean()).build();<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">insertUserId</span><span class="hljs-params">(User user)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;插入数据成功&quot;</span>+user.getUserName());<br>        <span class="hljs-keyword">return</span> user.getId();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ServiceProvider类：创建服务提供者+注册服务到zookeeper（provideServiceInterface）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceProvider</span> &#123;<br>    <span class="hljs-comment">//本地服务映射表（Map）</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; interfaceProvider;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;<br>    <span class="hljs-keyword">private</span> String host;<br>    <span class="hljs-comment">//注册服务类</span><br>    <span class="hljs-keyword">private</span> ServiceRegister serviceRegister;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServiceProvider</span><span class="hljs-params">(String host,<span class="hljs-type">int</span> port)</span>&#123;<br>        <span class="hljs-comment">//需要传入服务端自身的网络地址</span><br>        <span class="hljs-built_in">this</span>.host=host;<br>        <span class="hljs-built_in">this</span>.port=port;<br>        <span class="hljs-built_in">this</span>.interfaceProvider=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-built_in">this</span>.serviceRegister=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ZKServiceRegister</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">provideServiceInterface</span><span class="hljs-params">(Object service)</span>&#123;<br>        String serviceName=service.getClass().getName();<br>        Class&lt;?&gt;[] interfaceName=service.getClass().getInterfaces();<br><br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; clazz:interfaceName)&#123;<br>            <span class="hljs-comment">//本机的映射表</span><br>            interfaceProvider.put(clazz.getName(),service);<br>            <span class="hljs-comment">//在注册中心注册服务</span><br>            serviceRegister.register(clazz.getName(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(host,port));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getService</span><span class="hljs-params">(String interfaceName)</span>&#123;<br>        <span class="hljs-keyword">return</span> interfaceProvider.get(interfaceName);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>本地注册</strong>（Local Registry）：<code> interfaceProvider.put(clazz.getName(),service);</code></p><ul><li>保存接口名 → 服务实例映射</li><li>用于 RPC 请求到达服务端时调用对应对象</li></ul></li><li><p><strong>远程注册</strong>（Service Registry）：<code>serviceRegister.register(clazz.getName(),new InetSocketAddress(host,port));</code></p><ul><li><p>把接口名 → 服务地址注册到注册中心（Zookeeper）</p></li><li><p>客户端通过接口名查询可用服务实例，实现 <strong>服务发现</strong></p></li><li><p>调用**ZKServiceRegister.register（）**方法实现zookeeper的服务注册：</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZKServiceRegister</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServiceRegister</span> &#123;<br>    <span class="hljs-comment">// curator 提供的zookeeper客户端</span><br>    <span class="hljs-keyword">private</span> CuratorFramework client;<br>    <span class="hljs-comment">//zookeeper根路径节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROOT_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MyRPC&quot;</span>;<br><br>    <span class="hljs-comment">//负责zookeeper客户端的初始化，并与zookeeper服务端进行连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ZKServiceRegister</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">RetryPolicy</span> <span class="hljs-variable">policy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExponentialBackoffRetry</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-built_in">this</span>.client = CuratorFrameworkFactory.builder().connectString(<span class="hljs-string">&quot;127.0.0.1:2181&quot;</span>)<br>                .sessionTimeoutMs(<span class="hljs-number">40000</span>).retryPolicy(policy).namespace(ROOT_PATH).build();<br>        <span class="hljs-built_in">this</span>.client.start();<br>        System.out.println(<span class="hljs-string">&quot;zookeeper 连接成功&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//注册服务到注册中心</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(String serviceName, InetSocketAddress serviceAddress)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// serviceName创建成永久节点，服务提供者下线时，不删服务名，只删地址</span><br>            <span class="hljs-keyword">if</span>(client.checkExists().forPath(<span class="hljs-string">&quot;/&quot;</span> + serviceName) == <span class="hljs-literal">null</span>)&#123;<br>                client.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(<span class="hljs-string">&quot;/&quot;</span> + serviceName);<br>            &#125;<br>            <span class="hljs-comment">// 路径地址，一个/代表一个节点</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/&quot;</span> + serviceName +<span class="hljs-string">&quot;/&quot;</span>+ getServiceAddress(serviceAddress);<br>            <span class="hljs-comment">// 临时节点，服务器下线就删除节点</span><br>            client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(path);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;此服务已存在&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 地址 -&gt; XXX.XXX.XXX.<span class="hljs-doctag">XXX:</span>port 字符串</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getServiceAddress</span><span class="hljs-params">(InetSocketAddress serverAddress)</span> &#123;<br>        <span class="hljs-keyword">return</span> serverAddress.getHostName() +<br>                <span class="hljs-string">&quot;:&quot;</span> +<br>                serverAddress.getPort();<br>    &#125;<br>    <span class="hljs-comment">// 字符串解析为地址</span><br>    <span class="hljs-keyword">private</span> InetSocketAddress <span class="hljs-title function_">parseAddress</span><span class="hljs-params">(String address)</span> &#123;<br>        String[] result = address.split(<span class="hljs-string">&quot;:&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(result[<span class="hljs-number">0</span>], Integer.parseInt(result[<span class="hljs-number">1</span>]));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>构造函数：初始化 Zookeeper 客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ZKServiceRegister</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 失败重试策略：指数退避</span><br>    <span class="hljs-type">RetryPolicy</span> <span class="hljs-variable">policy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExponentialBackoffRetry</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-comment">// connectString：Zookeeper 服务地址</span><br>    <span class="hljs-comment">// sessionTimeoutMs：会话超时时间</span><br>    <span class="hljs-comment">// retryPolicy：失败重试策略，这里是指数退避</span><br>    <span class="hljs-comment">// namespace(ROOT_PATH)：CURATOR 内置的命名空间，相当于给所有操作加上根路径 MyRPC</span><br>    <span class="hljs-comment">// client.start()：启动客户端连接</span><br>    <span class="hljs-built_in">this</span>.client = CuratorFrameworkFactory.builder()<br>                .connectString(<span class="hljs-string">&quot;127.0.0.1:2181&quot;</span>)<br>                .sessionTimeoutMs(<span class="hljs-number">40000</span>)<br>                .retryPolicy(policy)<br>                .namespace(ROOT_PATH)<br>                .build();<br>    <span class="hljs-built_in">this</span>.client.start();<br>    System.out.println(<span class="hljs-string">&quot;zookeeper 连接成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的client通过CuratorFramework来初始化客户端。CuratorFramework是对原生 Zookeeper 的封装，提供稳定、易用、高级 API，用它来实现注册中心客户端，可以让 ZK 注册&#x2F;发现逻辑简单、健壮、易维护。</p></li><li><p>register：注册服务方法，目标是在 Zookeeper 中记录服务名和服务地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(String serviceName, InetSocketAddress serviceAddress)</span><br></code></pre></td></tr></table></figure><ul><li><p>创建<strong>服务名节点</strong>（永久节点）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(client.checkExists().forPath(<span class="hljs-string">&quot;/&quot;</span> + serviceName) == <span class="hljs-literal">null</span>)&#123;<br>    client.create().creatingParentsIfNeeded()<br>          .withMode(CreateMode.PERSISTENT)<br>          .forPath(<span class="hljs-string">&quot;/&quot;</span> + serviceName);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>serviceName</strong> 对应服务类型，如 <code>com.example.UserService</code></p><p><strong>永久节点</strong>：即使服务提供者下线，这个节点仍然存在</p><p>这样服务名不会被删除，保证服务结构稳定</p></li><li><p>创建<strong>服务地址节点</strong>（临时节点）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/&quot;</span> + serviceName +<span class="hljs-string">&quot;/&quot;</span>+ getServiceAddress(serviceAddress);<br>client.create().creatingParentsIfNeeded()<br>      .withMode(CreateMode.EPHEMERAL)<br>      .forPath(path);<br></code></pre></td></tr></table></figure><p><code>getServiceAddress</code> 将 <code>InetSocketAddress</code> 转成 <code>&quot;IP:Port&quot;</code> 字符串</p><p><strong>临时节点</strong>：服务下线或客户端断开，ZK 会自动删除该节点</p><p>效果：每个服务提供者注册一个 <strong>临时节点</strong>，客户端可以订阅这些节点列表来发现可用服务</p></li><li><p>补充：什么时候创建永久节点？什么时候创建临时节点？</p><p>Zookeeper 主要有两类节点：</p><table><thead><tr><th>类型</th><th>描述</th><th>生命周期</th></tr></thead><tbody><tr><td><strong>永久节点（PERSISTENT）</strong></td><td>节点一直存在，除非手动删除</td><td>客户端断开或服务下线也不会删除</td></tr><tr><td><strong>临时节点（EPHEMERAL）</strong></td><td>节点依赖客户端会话</td><td>客户端断开、会话过期，节点自动删除</td></tr></tbody></table><p>在服务注册中心的设计里，通常会把服务信息拆分成两层：</p><ol><li><strong>服务类型（Service Name）</strong><ul><li>表示一类服务，比如：<code>UserService</code>、<code>OrderService</code></li><li>这个概念和 <strong>服务名&#x2F;接口名</strong> 对应</li><li>节点类型：<strong>永久节点</strong><ul><li>因为服务类型是长期存在的，不随单个服务实例上下线变化而删除</li></ul></li><li>示例：<code>/MyRPC/UserService</code></li></ul></li><li><strong>服务实例（Service Instance）</strong><ul><li>表示具体一台提供服务的机器&#x2F;端口</li><li>例如：<code>127.0.0.1:8080</code>、<code>127.0.0.1:8081</code></li><li>节点类型：<strong>临时节点</strong><ul><li>因为实例上下线频繁，Zookeeper 自动删除临时节点可以保证客户端发现的服务列表始终是“活的实例”</li></ul></li><li>示例：<code>/MyRPC/UserService/127.0.0.1:8080</code></li></ul></li></ol></li></ul></li><li><p>辅助方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getServiceAddress</span><span class="hljs-params">(InetSocketAddress serverAddress)</span><br><span class="hljs-keyword">private</span> InetSocketAddress <span class="hljs-title function_">parseAddress</span><span class="hljs-params">(String address)</span><br></code></pre></td></tr></table></figure><p><code>getServiceAddress</code>：把 <code>InetSocketAddress</code> 转成 <code>&quot;ip:port&quot; </code>，zookeeper节点只能存储字符串，所以需要将服务实例信息转换成字符串形式</p><p><code>parseAddress</code>：把 <code>&quot;ip:port&quot;</code> 转回 <code>InetSocketAddress</code>，客户端在获取子节点列表的时候需要把字符串转换成InetSocketAddress才能建立连接</p><p>作用：方便 Zookeeper 存储和客户端读取</p></li></ul></li></ol><h4 id="客户端启动并发现服务"><a href="#客户端启动并发现服务" class="headerlink" title="客户端启动并发现服务"></a>客户端启动并发现服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// testClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 创建客户端代理对象</span><br>    ClientProxy clientProxy=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientProxy</span>();<br>    <span class="hljs-comment">//ClientProxy clientProxy=new proxy.Client.part1.ClientProxy(&quot;127.0.0.1&quot;,9999,0);</span><br>    UserService proxy=clientProxy.getProxy(UserService.class);<br>    <span class="hljs-comment">//第一次RPC调用</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> proxy.getUserByUserId(<span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;从服务端得到的user=&quot;</span>+user.toString());<br>    <span class="hljs-comment">//第二次RPC调用</span><br>    User u=User.builder().id(<span class="hljs-number">100</span>).userName(<span class="hljs-string">&quot;wxx&quot;</span>).sex(<span class="hljs-literal">true</span>).build();<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> proxy.insertUserId(u);<br>    System.out.println(<span class="hljs-string">&quot;向服务端插入user的id&quot;</span>+id);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>new ClientProxy();创建客户端代理对象</p><ol><li><p>创建NettyRPCClient对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientProxy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    rpcClient=<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyRpcClient</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>NettyRpcClient构造函数会初始化：</p><ul><li><p><strong>ZK服务中心</strong>：<code>new ZKServiceCenter()</code></p></li><li><p><strong>Netty客户端</strong>：静态初始化 Bootstrap 和 EventLoopGroup</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyRpcClient</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RpcClient</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Bootstrap bootstrap;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> EventLoopGroup eventLoopGroup;<br><br>    <span class="hljs-keyword">private</span> ServiceCenter serviceCenter;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NettyRpcClient</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-built_in">this</span>.serviceCenter=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ZKServiceCenter</span>();<span class="hljs-comment">// 创建zookeeper服务中心</span><br>    &#125;<br><br>    <span class="hljs-comment">//netty客户端初始化</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        eventLoopGroup = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        bootstrap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>        bootstrap.group(eventLoopGroup).channel(NioSocketChannel.class)<br>                .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyClientInitializer</span>());<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> RpcResponse <span class="hljs-title function_">sendRequest</span><span class="hljs-params">(RpcRequest request)</span> &#123;<br>        <span class="hljs-comment">//1. 从注册中心获取服务地址：host,post</span><br>        <span class="hljs-type">InetSocketAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> serviceCenter.serviceDiscovery(request.getInterfaceName());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> address.getHostName();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> address.getPort();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//2. 通过Netty建立连接</span><br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span>  <span class="hljs-operator">=</span> bootstrap.connect(host, port).sync();<br>            <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> channelFuture.channel();<br>            <span class="hljs-comment">//3. 发送请求</span><br>            channel.writeAndFlush(request);<br>            <span class="hljs-comment">//sync()堵塞获取结果</span><br>            channel.closeFuture().sync();<br>            <span class="hljs-comment">// 阻塞的获得结果，通过给channel设计别名，获取特定名字下的channel中的内容（这个在hanlder中设置）</span><br>            <span class="hljs-comment">// AttributeKey是，线程隔离的，不会由线程安全问题。</span><br>            <span class="hljs-comment">// 当前场景下选择堵塞获取结果</span><br>            <span class="hljs-comment">// 其它场景也可以选择添加监听器的方式来异步获取结果 channelFuture.addListener...</span><br>            <span class="hljs-comment">// 4. 阻塞等待响应（通过attributeKey获取）</span><br>            AttributeKey&lt;RpcResponse&gt; key = AttributeKey.valueOf(<span class="hljs-string">&quot;RPCResponse&quot;</span>);<br>            <span class="hljs-type">RpcResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> channel.attr(key).get();<br><br>            System.out.println(response);<br>            <span class="hljs-keyword">return</span> response;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ZKServiceCenter构造函数执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZKServiceCenter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServiceCenter</span>&#123;<br>    <span class="hljs-comment">// curator 提供的zookeeper客户端</span><br>    <span class="hljs-keyword">private</span> CuratorFramework client;<br>    <span class="hljs-comment">//zookeeper根路径节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROOT_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MyRPC&quot;</span>;<br>    <span class="hljs-comment">//serviceCache</span><br>    <span class="hljs-keyword">private</span> serviceCache cache;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ZKServiceCenter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 1. 设置重试策略：失败后每隔1秒重试，最多3次</span><br>    <span class="hljs-type">RetryPolicy</span> <span class="hljs-variable">policy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExponentialBackoffRetry</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">3</span>);<br>    <br>    <span class="hljs-comment">// 2. 连接到本地ZooKeeper（127.0.0.1:2181）</span><br>    <span class="hljs-comment">// namespace(&quot;MyRPC&quot;) 表示所有操作都在 /MyRPC 路径下</span><br>    <span class="hljs-built_in">this</span>.client = CuratorFrameworkFactory.builder()<br>            .connectString(<span class="hljs-string">&quot;127.0.0.1:2181&quot;</span>)<br>            .sessionTimeoutMs(<span class="hljs-number">40000</span>)  <span class="hljs-comment">// 会话超时40秒</span><br>            .retryPolicy(policy)<br>            .namespace(ROOT_PATH)     <span class="hljs-comment">// ROOT_PATH = &quot;MyRPC&quot;</span><br>            .build();<br>    <span class="hljs-built_in">this</span>.client.start();  <span class="hljs-comment">// 启动ZK客户端</span><br>    System.out.println(<span class="hljs-string">&quot;zookeeper 连接成功&quot;</span>);<br>    <br>    <span class="hljs-comment">// 3. 初始化本地缓存（用于存储服务地址列表）</span><br>    cache=<span class="hljs-keyword">new</span> <span class="hljs-title class_">serviceCache</span>();<br>    <br>    <span class="hljs-comment">// 4. 创建ZK监听器，监听服务节点的变化</span><br>    watchZK watcher=<span class="hljs-keyword">new</span> <span class="hljs-title class_">watchZK</span>(client,cache);<br>    <br>    <span class="hljs-comment">// 5. 启动监听（监听 /MyRPC 下的所有节点变化）</span><br>    watcher.watchToUpdate(ROOT_PATH);<br>&#125;<br>    <br>    <span class="hljs-comment">//根据服务名（接口名）返回地址</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> InetSocketAddress <span class="hljs-title function_">serviceDiscovery</span><span class="hljs-params">(String serviceName)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//先从本地缓存中找</span><br>            List&lt;String&gt; serviceList=cache.getServiceListFromCache(serviceName);<br>            <span class="hljs-comment">//如果找不到，再去zookeeper中找</span><br>            <span class="hljs-comment">//这种i情况基本不会发生，或者说只会出现在初始化阶段</span><br>            <span class="hljs-keyword">if</span>(serviceList==<span class="hljs-literal">null</span>) &#123;<br>                serviceList=client.getChildren().forPath(<span class="hljs-string">&quot;/&quot;</span> + serviceName);<br>            &#125;<br>            <span class="hljs-comment">// 负载均衡得到地址</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsistencyHashBalance</span>().balance(serviceList);<br>            <span class="hljs-keyword">return</span> parseAddress(address);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 地址 -&gt; XXX.XXX.XXX.<span class="hljs-doctag">XXX:</span>port 字符串</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getServiceAddress</span><span class="hljs-params">(InetSocketAddress serverAddress)</span> &#123;<br>        <span class="hljs-keyword">return</span> serverAddress.getHostName() +<br>                <span class="hljs-string">&quot;:&quot;</span> +<br>                serverAddress.getPort();<br>    &#125;<br>    <span class="hljs-comment">// 字符串解析为地址</span><br>    <span class="hljs-keyword">private</span> InetSocketAddress <span class="hljs-title function_">parseAddress</span><span class="hljs-params">(String address)</span> &#123;<br>        String[] result = address.split(<span class="hljs-string">&quot;:&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(result[<span class="hljs-number">0</span>], Integer.parseInt(result[<span class="hljs-number">1</span>]));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p><code>UserService proxy=clientProxy.getProxy(UserService.class);</code>获取接口的动态代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> &lt;T&gt;T <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span>&#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(<br>        clazz.getClassLoader(),    <span class="hljs-comment">// 类加载器</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;clazz&#125;,        <span class="hljs-comment">// 要代理的接口（UserService.class）</span><br>        <span class="hljs-built_in">this</span>                       <span class="hljs-comment">// InvocationHandler（ClientProxy自己）</span><br>    );<br>    <span class="hljs-keyword">return</span> (T)o;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>使用JDK动态代理创建<code>UserService</code>接口的代理对象</p></li><li><p>这个代理对象的所有方法调用都会被拦截，转发到ClientProxy.invoke() 方法</p></li></ol></li><li><p><code>User user = proxy.getUserByUserId(1);</code>调用代理对象的方法（第一次RPC调用），涉及到<strong>服务发现</strong></p><ol><li><p>当你调用 <code>proxy.getUserByUserId(1)</code> 时，实际上会触发 ClientProxy.invoke() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//ClientProxy类中的方法</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-comment">// 参数说明：</span><br>    <span class="hljs-comment">// proxy: 代理对象本身</span><br>    <span class="hljs-comment">// method: 被调用的方法（getUserByUserId）</span><br>    <span class="hljs-comment">// args: 方法参数（[1]）</span><br>    <br>    <span class="hljs-comment">// 步骤1：构建RPC请求对象</span><br>    RpcRequest request=RpcRequest.builder()<br>            .interfaceName(method.getDeclaringClass().getName())  <br>        <span class="hljs-comment">// &quot;part1.common.service.UserService&quot;</span><br>            .methodName(method.getName())                         <br>        <span class="hljs-comment">// &quot;getUserByUserId&quot;</span><br>            .params(args)                                         <br>        <span class="hljs-comment">// [1]</span><br>            .paramsType(method.getParameterTypes())              <br>        <span class="hljs-comment">// [Integer.class]</span><br>            .build();<br>    <br>    <span class="hljs-comment">// 步骤2：发送请求并等待响应</span><br>    RpcResponse response= rpcClient.sendRequest(request);<br>    <br>    <span class="hljs-comment">// 步骤3：返回结果</span><br>    <span class="hljs-keyword">return</span> response.getData();  <span class="hljs-comment">// 返回User对象</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发送请求： NettyRpcClient.sendRequest()（netty实现接口）（前面有介绍了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> RpcResponse <span class="hljs-title function_">sendRequest</span><span class="hljs-params">(RpcRequest request)</span> &#123;<br>    <span class="hljs-comment">// ========== 步骤1：服务发现 ==========</span><br>    <span class="hljs-comment">// 根据接口名从ZK获取服务提供者的地址</span><br>    <span class="hljs-type">InetSocketAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> serviceCenter.serviceDiscovery(request.getInterfaceName());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> address.getHostName();  <span class="hljs-comment">// 例如：127.0.0.1</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> address.getPort();         <span class="hljs-comment">// 例如：9000</span><br>    <br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// ========== 步骤2：建立Netty连接 ==========</span><br>        <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(host, port).sync();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> channelFuture.channel();<br>        <br>        <span class="hljs-comment">// ========== 步骤3：发送请求 ==========</span><br>        <span class="hljs-comment">// request会被编码器序列化成字节流发送</span><br>        channel.writeAndFlush(request);<br>        <br>        <span class="hljs-comment">// ========== 步骤4：等待连接关闭 ==========</span><br>        <span class="hljs-comment">// 服务端处理完会关闭连接，这里阻塞等待</span><br>        channel.closeFuture().sync();<br>        <br>        <span class="hljs-comment">// ========== 步骤5：获取响应 ==========</span><br>        <span class="hljs-comment">// 响应已经被NettyClientHandler放入channel的属性中</span><br>        AttributeKey&lt;RpcResponse&gt; key = AttributeKey.valueOf(<span class="hljs-string">&quot;RPCResponse&quot;</span>);<br>        <span class="hljs-type">RpcResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> channel.attr(key).get();<br>        <br>        System.out.println(response);<br>        <span class="hljs-keyword">return</span> response;<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>sendRequest方法中需要<strong>服务发现</strong>：<code>serviceCenter.serviceDiscovery();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> InetSocketAddress <span class="hljs-title function_">serviceDiscovery</span><span class="hljs-params">(String serviceName)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 步骤1：先从本地缓存查找</span><br>        List&lt;String&gt; serviceList=cache.getServiceListFromCache(serviceName);<br>        <br>        <span class="hljs-comment">// 步骤2：如果缓存没有，从ZK查询</span><br>        <span class="hljs-keyword">if</span>(serviceList==<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 查询 /MyRPC/part1.common.service.UserService 下的所有子节点</span><br>            <span class="hljs-comment">// 子节点格式：127.0.0.1:9000, 127.0.0.1:9001 等</span><br>            serviceList=client.getChildren().forPath(<span class="hljs-string">&quot;/&quot;</span> + serviceName);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 步骤3：负载均衡选择一个地址</span><br>        <span class="hljs-comment">// 使用一致性哈希算法从多个服务实例中选一个</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsistencyHashBalance</span>().balance(serviceList);<br>        <br>        <span class="hljs-comment">// 步骤4：解析地址字符串为 InetSocketAddress</span><br>        <span class="hljs-keyword">return</span> parseAddress(address);  <span class="hljs-comment">// &quot;127.0.0.1:9000&quot; -&gt; InetSocketAddress</span><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>第二次RPC调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//ClientTest</span><br>User u=User.builder().id(<span class="hljs-number">100</span>).userName(<span class="hljs-string">&quot;wxx&quot;</span>).sex(<span class="hljs-literal">true</span>).build();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> proxy.insertUserId(u);<br>System.out.println(<span class="hljs-string">&quot;向服务端插入user的id&quot;</span>+id);<br></code></pre></td></tr></table></figure><p>这次调用与第3步完全相同的流程：</p><ol><li>触发 invoke() 方法</li><li>构建 <code>RpcRequest</code>（方法名：insertUserId，参数：User对象）</li><li>服务发现 → 建立连接 → 发送请求 → 等待响应</li><li>返回结果（Integer类型的id）</li></ol></li><li><p>其他细节问题</p><ul><li><p>RPC动态代理的流程</p><blockquote><p>传统动态代理的实现步骤：</p><ul><li>创建接口，定义目标对象（被代理类）要完成的功能；</li><li>创建目标对象实现接口</li><li>创建InvocationHandler接口的实现类，重写invoke()方法，在里面实现代理类的功能：调用目标类方法+功能增强</li><li>使用Proxy的静态方法newProxyInstance()创建代理对象，并将返回值转换为接口类型</li></ul></blockquote><p>而RPC是远程调用，接口需要对用户端和服务端暴露因此目标对象类只在服务端存在，而用户端重写invoke()方法不是调用本地方法进行功能增强，而是发起网络请求远程调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ========== 步骤1：定义接口（在common模块，客户端和服务端共享） ==========</span><br><span class="hljs-comment">// 位置：part1/common/service/UserService.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    User <span class="hljs-title function_">getUserByUserId</span><span class="hljs-params">(Integer id)</span>;<br>    Integer <span class="hljs-title function_">insertUserId</span><span class="hljs-params">(User user)</span>;<br>&#125;<br><br><span class="hljs-comment">// ========== 步骤2：服务端实现接口 ==========</span><br><span class="hljs-comment">// 位置：part1/common/service/Impl/UserServiceImpl.java</span><br><span class="hljs-comment">// 注意：这个类只在服务端存在，客户端没有！</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserByUserId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-comment">// 真实业务逻辑</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// ========== 步骤3：客户端创建InvocationHandler ==========</span><br><span class="hljs-comment">// 位置：part1/Client/proxy/ClientProxy.java</span><br><span class="hljs-comment">// 关键：没有持有真实对象，而是持有RpcClient（网络通信工具）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> RpcClient rpcClient;  <span class="hljs-comment">// 不是真实对象，是网络客户端！</span><br>    <br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>        <span class="hljs-comment">// 不是调用本地方法，而是发起网络请求！</span><br>        <span class="hljs-type">RpcRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> RpcRequest.builder()<br>            .interfaceName(method.getDeclaringClass().getName())<br>            .methodName(method.getName())<br>            .params(args)<br>            .paramsType(method.getParameterTypes())<br>            .build();<br>        <br>        <span class="hljs-comment">// 通过网络发送请求到服务端</span><br>        <span class="hljs-type">RpcResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> rpcClient.sendRequest(request);<br>        <span class="hljs-keyword">return</span> response.getData();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// ========== 步骤4：创建代理对象 ==========</span><br><span class="hljs-type">ClientProxy</span> <span class="hljs-variable">clientProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientProxy</span>();<br><span class="hljs-type">UserService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> clientProxy.getProxy(UserService.class);<br><br><span class="hljs-comment">// ========== 步骤5：调用代理对象的方法 ==========</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> proxy.getUserByUserId(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// 实际执行流程：</span><br><span class="hljs-comment">// 1. 调用被拦截 → 进入 ClientProxy.invoke()</span><br><span class="hljs-comment">// 2. 构建 RpcRequest（包含方法名、参数等）</span><br><span class="hljs-comment">// 3. 通过 Netty 发送到服务端</span><br><span class="hljs-comment">// 4. 服务端找到 UserServiceImpl.getUserByUserId() 执行</span><br><span class="hljs-comment">// 5. 服务端返回结果</span><br><span class="hljs-comment">// 6. 客户端收到响应，返回给调用者</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">特性</th><th align="left">传统代理</th><th align="left">RPC动态代理</th></tr></thead><tbody><tr><td align="left"><strong>真实对象位置</strong></td><td align="left">在客户端本地</td><td align="left">在远程服务端</td></tr><tr><td align="left"><strong>InvocationHandler持有</strong></td><td align="left">真实对象引用</td><td align="left">网络通信客户端</td></tr><tr><td align="left"><strong>invoke()做什么</strong></td><td align="left">调用本地方法</td><td align="left">发起网络请求</td></tr><tr><td align="left"><strong>目的</strong></td><td align="left">增强本地方法</td><td align="left">远程方法调用</td></tr><tr><td align="left"><strong>客户端是否有实现类</strong></td><td align="left">有</td><td align="left"><strong>没有</strong>（只有接口）</td></tr></tbody></table><ul><li>invoke中的核心逻辑：<ul><li>通过反射获取方法名、参数类型等信息</li><li>封装成RpcRequest对象</li><li>通过NettyRpcClient发送到服务端</li><li>等待服务端返回RpcRequest</li><li>提取相应中的数据返回调用者</li></ul></li></ul></li></ul></li></ol><h3 id="ZooKeeper监听器"><a href="#ZooKeeper监听器" class="headerlink" title="ZooKeeper监听器"></a>ZooKeeper监听器</h3><ol><li><p>监听器初始化：在zookeeper进行客户端启动时就初始化监听器，指定监听路径：MyRPC&#x2F;下的所有节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ZKServiceCenter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 1.1 创建重试策略</span><br>    <span class="hljs-type">RetryPolicy</span> <span class="hljs-variable">policy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExponentialBackoffRetry</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-comment">// 参数说明：</span><br>    <span class="hljs-comment">// - 1000ms：初始重试间隔</span><br>    <span class="hljs-comment">// - 3：最大重试次数</span><br>    <span class="hljs-comment">// - 指数退避：第1次1秒，第2次2秒，第3次4秒</span><br>    <br>    <span class="hljs-comment">// 1.2 创建并启动 Curator 客户端</span><br>    <span class="hljs-built_in">this</span>.client = CuratorFrameworkFactory.builder()<br>        .connectString(<span class="hljs-string">&quot;127.0.0.1:2181&quot;</span>)    <span class="hljs-comment">// ZK服务器地址</span><br>        .sessionTimeoutMs(<span class="hljs-number">40000</span>)            <span class="hljs-comment">// 会话超时：40秒</span><br>        .retryPolicy(policy)                <span class="hljs-comment">// 重试策略</span><br>        .namespace(ROOT_PATH)               <span class="hljs-comment">// 命名空间：&quot;MyRPC&quot;</span><br>        .build();<br>    <span class="hljs-built_in">this</span>.client.start();<br>    <br>    <span class="hljs-comment">// 关键：namespace(&quot;MyRPC&quot;) 的作用</span><br>    <span class="hljs-comment">// 所有操作的路径都会自动加上 /MyRPC 前缀</span><br>    <span class="hljs-comment">// 例如：client.getChildren().forPath(&quot;/UserService&quot;)</span><br>    <span class="hljs-comment">// 实际访问：/MyRPC/UserService</span><br>    <br>    <span class="hljs-comment">// 1.3 创建本地缓存</span><br>    cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">serviceCache</span>();<br>    <span class="hljs-comment">// 此时缓存是空的：cache = &#123;&#125;</span><br>    <br>    <span class="hljs-comment">// 1.4 创建监听器</span><br>    <span class="hljs-type">watchZK</span> <span class="hljs-variable">watcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">watchZK</span>(client, cache);<br>    <span class="hljs-comment">// 传入：ZK客户端 + 本地缓存引用</span><br>    <br>    <span class="hljs-comment">// 1.5 启动监听</span><br>    watcher.watchToUpdate(ROOT_PATH);<br>    <span class="hljs-comment">// 参数 ROOT_PATH = &quot;MyRPC&quot;（但实际监听的是 &quot;/&quot;）</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>监听器的核心机制</p><ol><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">watchZK</span> &#123;<br>    <span class="hljs-comment">// curator 提供的zookeeper客户端</span><br>    <span class="hljs-keyword">private</span> CuratorFramework client;<br>    <span class="hljs-comment">//本地缓存</span><br>    serviceCache cache;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">watchZK</span><span class="hljs-params">(CuratorFramework client, serviceCache cache)</span>&#123;<br>        <span class="hljs-built_in">this</span>.client=client;<br>        <span class="hljs-built_in">this</span>.cache=cache;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听当前节点和子节点的 更新，创建，删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> path</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">watchToUpdate</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">CuratorCache</span> <span class="hljs-variable">curatorCache</span> <span class="hljs-operator">=</span> CuratorCache.build(client, <span class="hljs-string">&quot;/&quot;</span>);<br>        curatorCache.listenable().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CuratorCacheListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">event</span><span class="hljs-params">(Type type, ChildData childData, ChildData childData1)</span> &#123;<br>                <span class="hljs-comment">// 第一个参数：事件类型（枚举）</span><br>                <span class="hljs-comment">// 第二个参数：节点更新前的状态、数据</span><br>                <span class="hljs-comment">// 第三个参数：节点更新后的状态、数据</span><br>                <span class="hljs-comment">// 创建节点时：节点刚被创建，不存在 更新前节点 ，所以第二个参数为 null</span><br>                <span class="hljs-comment">// 删除节点时：节点被删除，不存在 更新后节点 ，所以第三个参数为 null</span><br>                <span class="hljs-comment">// 节点创建时没有赋予值 create /curator/app1 只创建节点，在这种情况下，更新前节点的 data 为 null，获取不到更新前节点的数据</span><br>                <span class="hljs-keyword">switch</span> (type.name()) &#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;NODE_CREATED&quot;</span>: <span class="hljs-comment">// 监听器第一次执行时节点存在也会触发次事件</span><br>                        String[] pathList= pasrePath(childData1);<br>                        <span class="hljs-keyword">if</span>(pathList.length&lt;=<span class="hljs-number">2</span>) <span class="hljs-keyword">break</span>;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            String serviceName=pathList[<span class="hljs-number">1</span>];<br>                            String address=pathList[<span class="hljs-number">2</span>];<br>                            <span class="hljs-comment">//将新注册的服务加入到本地缓存中</span><br>                            cache.addServcieToCache(serviceName,address);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;NODE_CHANGED&quot;</span>: <span class="hljs-comment">// 节点更新</span><br>                        <span class="hljs-keyword">if</span> (childData.getData() != <span class="hljs-literal">null</span>) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;修改前的数据: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(childData.getData()));<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            System.out.println(<span class="hljs-string">&quot;节点第一次赋值!&quot;</span>);<br>                        &#125;<br>                        String[] oldPathList=pasrePath(childData);<br>                        String[] newPathList=pasrePath(childData1);<br>                        cache.replaceServiceAddress(oldPathList[<span class="hljs-number">1</span>],oldPathList[<span class="hljs-number">2</span>],newPathList[<span class="hljs-number">2</span>]);<br>                        System.out.println(<span class="hljs-string">&quot;修改后的数据: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(childData1.getData()));<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;NODE_DELETED&quot;</span>: <span class="hljs-comment">// 节点删除</span><br>                        String[] pathList_d= pasrePath(childData);<br>                        <span class="hljs-keyword">if</span>(pathList_d.length&lt;=<span class="hljs-number">2</span>) <span class="hljs-keyword">break</span>;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            String serviceName=pathList_d[<span class="hljs-number">1</span>];<br>                            String address=pathList_d[<span class="hljs-number">2</span>];<br>                            <span class="hljs-comment">//将新注册的服务加入到本地缓存中</span><br>                            cache.delete(serviceName,address);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>:<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//开启监听</span><br>        curatorCache.start();<br>    &#125;<br>    <span class="hljs-comment">//解析节点对应地址</span><br>    <span class="hljs-keyword">public</span> String[] pasrePath(ChildData childData)&#123;<br>        <span class="hljs-comment">//获取更新的节点的路径</span><br>        String path=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(childData.getPath());<br>        <span class="hljs-comment">//按照格式 ，读取</span><br>        <span class="hljs-keyword">return</span> path.split(<span class="hljs-string">&quot;/&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>CuratorCache的工作原理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">// ========== watchZK.watchToUpdate() 方法（第29-79行）==========</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">watchToUpdate</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 步骤1：创建 CuratorCache</span><br>    <span class="hljs-type">CuratorCache</span> <span class="hljs-variable">curatorCache</span> <span class="hljs-operator">=</span> CuratorCache.build(client, <span class="hljs-string">&quot;/&quot;</span>);<br>    <br>    <span class="hljs-comment">// 关键点分析：</span><br>    <span class="hljs-comment">// - client：已经设置了 namespace(&quot;MyRPC&quot;)</span><br>    <span class="hljs-comment">// - &quot;/&quot;：监听根路径</span><br>    <span class="hljs-comment">// - 实际监听：/MyRPC/ 下的所有节点</span><br><br></code></pre></td></tr></table></figure><p>CuratorCache的特性：</p><ul><li>会缓存整个子树的数据</li><li>监听所有类型的变化（创建、修改、删除）</li><li>自动处理连接断开重连</li><li>线程安全</li></ul></li><li><p>监听器回调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">// ========== 步骤2：添加监听器（第31-76行）==========</span><br>curatorCache.listenable().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CuratorCacheListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">event</span><span class="hljs-params">(Type type, ChildData childData, ChildData childData1)</span> &#123;<br>        <span class="hljs-comment">// 参数详解：</span><br>        <span class="hljs-comment">// - type：事件类型（NODE_CREATED/NODE_CHANGED/NODE_DELETED）</span><br>        <span class="hljs-comment">// - childData：变更前的节点数据（删除时有值，创建时为null）</span><br>        <span class="hljs-comment">// - childData1：变更后的节点数据（创建/修改时有值，删除时为null）</span><br>        <br>        <span class="hljs-comment">// ChildData 包含的信息：</span><br>        <span class="hljs-comment">// - getPath()：节点路径，如 &quot;/part1.common.service.UserService/127.0.0.1:9000&quot;</span><br>        <span class="hljs-comment">// - getData()：节点数据（字节数组）</span><br>        <span class="hljs-comment">// - getStat()：节点状态信息</span><br></code></pre></td></tr></table></figure></li><li><p>详解三种事件的处理</p><ol><li><p>NODE_CREATED 事件（服务上线）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;NODE_CREATED&quot;</span>: <br>    <span class="hljs-comment">// 场景1：监听器启动时，ZK中已存在的节点会触发此事件</span><br>    <span class="hljs-comment">// 场景2：新服务实例注册时触发</span><br>    <br>    <span class="hljs-comment">// 步骤1：解析路径</span><br>    String[] pathList = pasrePath(childData1);<br>    <span class="hljs-comment">// childData1.getPath() 示例：</span><br>    <span class="hljs-comment">// &quot;/part1.common.service.UserService/127.0.0.1:9000&quot;</span><br>    <br>    <span class="hljs-comment">// 步骤2：调用的pasrePath() 解析，下面是pasrePath()方法：</span><br>    <span class="hljs-keyword">public</span> String[] pasrePath(ChildData childData)&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(childData.getPath());<br>        <span class="hljs-comment">// path = &quot;/part1.common.service.UserService/127.0.0.1:9000&quot;</span><br>        <br>        <span class="hljs-keyword">return</span> path.split(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-comment">// 返回：[&quot;&quot;, &quot;part1.common.service.UserService&quot;, &quot;127.0.0.1:9000&quot;]</span><br>        <span class="hljs-comment">//       [0]  [1]                                [2]</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 步骤3：过滤根节点和服务名节点</span><br>    <span class="hljs-keyword">if</span>(pathList.length &lt;= <span class="hljs-number">2</span>) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">// pathList.length = 3 时才处理（说明是服务实例节点）</span><br>    <span class="hljs-comment">// 过滤掉：</span><br>    <span class="hljs-comment">// - pathList.length = 1：根节点 &quot;/&quot;</span><br>    <span class="hljs-comment">// - pathList.length = 2：服务名节点 &quot;/UserService&quot;</span><br>    <br>    <span class="hljs-comment">// 步骤4：提取服务名和地址</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">serviceName</span> <span class="hljs-operator">=</span> pathList[<span class="hljs-number">1</span>];  <span class="hljs-comment">// &quot;part1.common.service.UserService&quot;</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> pathList[<span class="hljs-number">2</span>];      <span class="hljs-comment">// &quot;127.0.0.1:9000&quot;</span><br>    <br>    <span class="hljs-comment">// 步骤5：加入本地缓存</span><br>    cache.addServiceToCache(serviceName, address);<br></code></pre></td></tr></table></figure><ul><li><code>addServiceToCache()</code>的具体实现：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//key: serviceName 服务名  value： addressList 服务提供者列表</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; cache=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><span class="hljs-comment">// serviceCache.java 第22-32行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addServcieToCache</span><span class="hljs-params">(String serviceName, String address)</span>&#123;<br>    <span class="hljs-keyword">if</span>(cache.containsKey(serviceName))&#123;<br>        <span class="hljs-comment">// 情况1：服务名已存在，添加新地址到列表</span><br>        List&lt;String&gt; addressList = cache.get(serviceName);<br>        addressList.add(address);<br>        System.out.println(<span class="hljs-string">&quot;将name为&quot;</span>+serviceName+<span class="hljs-string">&quot;和地址为&quot;</span>+address+<span class="hljs-string">&quot;的服务添加到本地缓存中&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 情况2：服务名不存在，创建新列表</span><br>        List&lt;String&gt; addressList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        addressList.add(address);<br>        cache.put(serviceName, addressList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>示例执行过程：<ul><li>初始状态：<code>cache = &#123;&#125;</code></li><li>第1次调用：<code>addServcieToCache(&quot;UserService&quot;, &quot;127.0.0.1:9000&quot;)</code><br>结果：<code>cache = &#123;&quot;UserService&quot;: [&quot;127.0.0.1:9000&quot;]&#125;</code></li><li>第2次调用：<code>addServcieToCache(&quot;UserService&quot;, &quot;127.0.0.1:9001&quot;)</code><br>结果：<code>cache = &#123;&quot;UserService&quot;: [&quot;127.0.0.1:9000&quot;, &quot;127.0.0.1:9001&quot;]&#125;</code></li><li>第3次调用：<code>addServcieToCache(&quot;OrderService&quot;, &quot;127.0.0.1:8000&quot;)</code><br>结果：<code>cache = &#123; &quot;UserService&quot;: [&quot;127.0.0.1:9000&quot;, &quot;127.0.0.1:9001&quot;], &quot;OrderService&quot;: [&quot;127.0.0.1:8000&quot;]  &#125;</code></li></ul></li></ul></li><li><p>NODE_DELETED 事件（服务下线）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;NODE_DELETED&quot;</span>:  <span class="hljs-comment">// 第62-71行</span><br>    <span class="hljs-comment">// 触发场景：</span><br>    <span class="hljs-comment">// 1. 服务端主动关闭</span><br>    <span class="hljs-comment">// 2. 服务端宕机（临时节点自动删除）</span><br>    <span class="hljs-comment">// 3. 网络断开超过会话超时时间</span><br>    <br>    <span class="hljs-comment">// 步骤1：解析路径（使用 childData，因为节点已删除）</span><br>    String[] pathList_d = pasrePath(childData);<br>    <span class="hljs-comment">// childData 包含删除前的节点信息</span><br>    <br>    <span class="hljs-comment">// 步骤2：过滤</span><br>    <span class="hljs-keyword">if</span>(pathList_d.length &lt;= <span class="hljs-number">2</span>) <span class="hljs-keyword">break</span>;<br>    <br>    <span class="hljs-comment">// 步骤3：提取信息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">serviceName</span> <span class="hljs-operator">=</span> pathList_d[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> pathList_d[<span class="hljs-number">2</span>];<br>    <br>    <span class="hljs-comment">// 步骤4：从缓存删除</span><br>    cache.delete(serviceName, address);<br></code></pre></td></tr></table></figure><ul><li><code>delete()</code>的详细实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">// serviceCache.java 第52-56行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String serviceName, String address)</span>&#123;<br>    List&lt;String&gt; addressList = cache.get(serviceName);<br>    addressList.remove(address);  <span class="hljs-comment">// 从列表中移除指定地址</span><br>    System.out.println(<span class="hljs-string">&quot;将name为&quot;</span>+serviceName+<span class="hljs-string">&quot;和地址为&quot;</span>+address+<span class="hljs-string">&quot;的服务从本地缓存中删除&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>示例执行过程：</p><ul><li><p>初始状态：<code>cache = &#123;&quot;UserService&quot;: [&quot;127.0.0.1:9000&quot;, &quot;127.0.0.1:9001&quot;, &quot;127.0.0.1:9002&quot;]&#125;</code></p></li><li><p>调用：<code>delete(&quot;UserService&quot;, &quot;127.0.0.1:9001&quot;)</code><br>结果：<code>cache = &#123; &quot;UserService&quot;: [&quot;127.0.0.1:9000&quot;, &quot;127.0.0.1:9002&quot;]&#125;</code></p></li><li><p>如果 <code>127.0.0.1:9001</code> 宕机，客户端后续调用不会再选择这个地址</p></li></ul></li></ul></li><li><p>NODE_CHANGED 事件（服务变更）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;NODE_CHANGED&quot;</span>:  <span class="hljs-comment">// 第51-61行</span><br>    <span class="hljs-comment">// 触发场景：节点数据发生变化（较少使用）</span><br>    <br>    <span class="hljs-comment">// 步骤1：打印变更前的数据</span><br>    <span class="hljs-keyword">if</span> (childData.getData() != <span class="hljs-literal">null</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;修改前的数据: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(childData.getData()));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;节点第一次赋值!&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 步骤2：解析旧路径和新路径</span><br>    String[] oldPathList = pasrePath(childData);   <span class="hljs-comment">// 变更前</span><br>    String[] newPathList = pasrePath(childData1);  <span class="hljs-comment">// 变更后</span><br>    <br>    <span class="hljs-comment">// 步骤3：替换缓存中的地址</span><br>    cache.replaceServiceAddress(<br>        oldPathList[<span class="hljs-number">1</span>],   <span class="hljs-comment">// serviceName</span><br>        oldPathList[<span class="hljs-number">2</span>],   <span class="hljs-comment">// oldAddress</span><br>        newPathList[<span class="hljs-number">2</span>]    <span class="hljs-comment">// newAddress</span><br>    );<br>    <br>    System.out.println(<span class="hljs-string">&quot;修改后的数据: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(childData1.getData()));<br></code></pre></td></tr></table></figure><p><code>replaceServiceAddress() </code>详细实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">// serviceCache.java 第34-42行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">replaceServiceAddress</span><span class="hljs-params">(String serviceName, String oldAddress, String newAddress)</span>&#123;<br>    <span class="hljs-keyword">if</span>(cache.containsKey(serviceName))&#123;<br>        List&lt;String&gt; addressList = cache.get(serviceName);<br>        addressList.remove(oldAddress);  <span class="hljs-comment">// 删除旧地址</span><br>        addressList.add(newAddress);     <span class="hljs-comment">// 添加新地址</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;修改失败，服务不存在&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>示例：服务实例的IP或端口发生变化</p><ul><li><p>初始：<code>cache = &#123; &quot;UserService&quot;: [&quot;127.0.0.1:9000&quot;, &quot;127.0.0.1:9001&quot;]&#125;</code></p></li><li><p>调用：<code>replaceServiceAddress(&quot;UserService&quot;, &quot;127.0.0.1:9000&quot;, &quot;192.168.1.100:9000&quot;)</code></p></li><li><p>结果：<code>cache = &#123; &quot;UserService&quot;: [&quot;127.0.0.1:9001&quot;, &quot;192.168.1.100:9000&quot;]&#125;</code></p></li></ul></li></ul></li><li><p>启动监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">// watchZK.watchToUpdate() 第78行</span><br>curatorCache.start();<br><br><span class="hljs-comment">// 执行效果：</span><br><span class="hljs-comment">// 1. 监听器开始工作</span><br><span class="hljs-comment">// 2. 立即触发 NODE_CREATED 事件（对已存在的节点）</span><br><span class="hljs-comment">// 3. 本地缓存被初始化填充</span><br><span class="hljs-comment">// 4. 后续节点变化会实时触发回调</span><br></code></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="服务发现的三层架构"><a href="#服务发现的三层架构" class="headerlink" title="服务发现的三层架构"></a>服务发现的三层架构</h3><h4 id="三层架构示意"><a href="#三层架构示意" class="headerlink" title="三层架构示意"></a>三层架构示意</h4><img src="/2025/10/12/RPC%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/hexo-blog\source\_posts\RPC相关学习\client服务发现三层架构.png" alt="client服务发现三层架构" style="zoom: 80%;"><ul><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> InetSocketAddress <span class="hljs-title function_">serviceDiscovery</span><span class="hljs-params">(String serviceName)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// ========== 第1层：查询本地缓存 ==========</span><br>        List&lt;String&gt; serviceList=cache.getServiceListFromCache(serviceName);<br>        <span class="hljs-comment">// ========== 第2层：ZooKeeper查询（缓存未命中时）==========</span><br>        <span class="hljs-keyword">if</span>(serviceList==<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 从ZK查询子节点</span><br>            serviceList=client.getChildren().forPath(<span class="hljs-string">&quot;/&quot;</span> + serviceName);<br>            <span class="hljs-comment">// 实际访问路径（因为有namespace）：</span><br>            <span class="hljs-comment">// /MyRPC/part1.common.service.UserService</span><br>            <br>            <span class="hljs-comment">// 返回子节点列表：</span><br>            <span class="hljs-comment">// [&quot;127.0.0.1:9000&quot;, &quot;127.0.0.1:9001&quot;, &quot;127.0.0.1:9002&quot;]</span><br>            <br>            <span class="hljs-comment">// 注意：这种情况很少发生，通常只在以下场景：</span><br>            <span class="hljs-comment">// 1. 客户端刚启动，监听器还没触发</span><br>            <span class="hljs-comment">// 2. 监听器异常导致缓存未更新</span><br>        &#125;<br>        <span class="hljs-comment">// ========== 第3层：负载均衡 ==========</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsistencyHashBalance</span>().balance(serviceList);<br>        <span class="hljs-comment">// ========== 第4步：解析地址 ==========</span><br>        <span class="hljs-keyword">return</span> parseAddress(address);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="负载均衡实现"><a href="#负载均衡实现" class="headerlink" title="负载均衡实现"></a>负载均衡实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">LoadBalance</span> &#123;<br>    String <span class="hljs-title function_">balance</span><span class="hljs-params">(List&lt;String&gt; addressList)</span>; <span class="hljs-comment">// 负载均衡选择</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(String node)</span> ;<span class="hljs-comment">// 添加节点</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delNode</span><span class="hljs-params">(String node)</span>;<span class="hljs-comment">// 删除节点</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实现1：随机负载均衡"><a href="#实现1：随机负载均衡" class="headerlink" title="实现1：随机负载均衡"></a>实现1：随机负载均衡</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomLoadBalance</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoadBalance</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">balance</span><span class="hljs-params">(List&lt;String&gt; addressList)</span> &#123;<br>        Random random=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">choose</span> <span class="hljs-operator">=</span> random.nextInt(addressList.size());<span class="hljs-comment">// 从传入的列表中随机选择</span><br>        System.out.println(<span class="hljs-string">&quot;负载均衡选择了&quot;</span>+choose+<span class="hljs-string">&quot;服务器&quot;</span>);<br>        <span class="hljs-keyword">return</span> addressList.get(choose);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(String node)</span>&#123;&#125; ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delNode</span><span class="hljs-params">(String node)</span>&#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实现2：轮询负载均衡"><a href="#实现2：轮询负载均衡" class="headerlink" title="实现2：轮询负载均衡"></a>实现2：轮询负载均衡</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoundLoadBalance</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoadBalance</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> choose=-<span class="hljs-number">1</span>;<span class="hljs-comment">// 只维护一个计数器</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">balance</span><span class="hljs-params">(List&lt;String&gt; addressList)</span> &#123;<br>        choose++;<br>        choose=choose%addressList.size();  <span class="hljs-comment">// 取模保证不越界</span><br>        System.out.println(<span class="hljs-string">&quot;负载均衡选择了&quot;</span>+choose+<span class="hljs-string">&quot;服务器&quot;</span>);<br>        <span class="hljs-keyword">return</span> addressList.get(choose);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(String node)</span> &#123;&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delNode</span><span class="hljs-params">(String node)</span>&#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实现3：一致性哈希算法-负载均衡"><a href="#实现3：一致性哈希算法-负载均衡" class="headerlink" title="实现3：一致性哈希算法 负载均衡"></a>实现3：一致性哈希算法 负载均衡</h5><blockquote><p> 参考🔗：<a href="https://developer.aliyun.com/article/1082388">图解一致性哈希算法，看这一篇就够了！ -阿里云开发者社区</a></p></blockquote><ul><li><p>一致性哈希：</p><blockquote><p>传统哈希的问题在于当服务器数量变化时，几乎所有的映射关系都会变化。</p><ul><li><p>初始：3台服务器</p><ul><li>hash(“request1”) % 3 &#x3D; 0 → 服务器0</li><li>hash(“request2”) % 3 &#x3D; 1 → 服务器1 </li><li>hash(“request3”) % 3 &#x3D; 2 → 服务器2</li></ul></li><li><p>新增1台服务器后：4台服务器</p><ul><li>hash(“request1”) % 4 &#x3D; 0 → 服务器0 (不变) </li><li>hash(“request2”) % 4 &#x3D; 1 → 服务器1 (不变) </li><li>hash(“request3”) % 4 &#x3D; 3 → 服务器3 (改变！)</li></ul></li></ul><p>这会导致大量数据需要重新分配</p></blockquote><p>一致性哈希的核心思想在于：将<strong>服务器和请求</strong>都<strong>映射</strong>到一个<strong>哈希环</strong>上，请求<strong>顺时针</strong>找到最近的服务器</p><ul><li><p>首先将整个哈希值空间想象成一个环</p></li><li><p>将每台服务器通过哈希函数映射到环上的某个位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs BASH">Server1 -&gt; <span class="hljs-built_in">hash</span>(<span class="hljs-string">&quot;Server1&quot;</span>)<br>Server2 -&gt; <span class="hljs-built_in">hash</span>(<span class="hljs-string">&quot;Server2&quot;</span>)<br>Server3 -&gt; <span class="hljs-built_in">hash</span>(<span class="hljs-string">&quot;Server3&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>每个key通过哈希函数映射到环上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">key -&gt; <span class="hljs-built_in">hash</span>(<span class="hljs-string">&quot;key&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>存储规则：每个 key <strong>顺时针</strong>找到的第一个服务器，就是它的归属服务器。</p></li></ul><p>由于哈希计算的随机性，一致性哈希存在<strong>数据倾斜</strong>的问题，即大多数key会映射到少量的几个节点上，这就会导致个别服务器的负载过大。为了解决这个问题，一致性哈希算法映入了<strong>虚拟节点机制</strong>。</p><p>虚拟节点机制：对每<strong>一个物理服务节点映射多个虚拟节点</strong>，将这些虚拟节点计算哈希值并映射到哈希环上，当请求找到某个虚拟节点后，将被重新映射到具体的物理节点。虚拟节点越多，哈希环上的节点就越多，数据分布就越均匀，从而避免了数据倾斜的问题。</p><ul><li>物理节点映射多个虚拟节点</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs LESS"><span class="hljs-selector-tag">Server1</span><span class="hljs-selector-id">#1</span>, <span class="hljs-selector-tag">Server1</span><span class="hljs-selector-id">#2</span>, ..., <span class="hljs-selector-tag">Server1</span><span class="hljs-selector-id">#100</span><br><span class="hljs-selector-tag">Server2</span><span class="hljs-selector-id">#1</span>, <span class="hljs-selector-tag">Server2</span><span class="hljs-selector-id">#2</span>, ..., <span class="hljs-selector-tag">Server2</span><span class="hljs-selector-id">#100</span><br></code></pre></td></tr></table></figure><ul><li>当key映射到虚拟节点后，再映射到真实服务器上：比如映射到虚拟节点<code>Server1#2</code>，再映射到真实服务器<code>Server1</code>上。</li></ul></li><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsistencyHashBalance</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoadBalance</span> &#123;<br>    <span class="hljs-comment">// 虚拟节点的个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">VIRTUAL_NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">// 虚拟节点分配，key是hash值，value是虚拟节点服务器名称</span><br>    <span class="hljs-keyword">private</span> SortedMap&lt;Integer, String&gt; shards = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;Integer, String&gt;();<br><br>    <span class="hljs-comment">// 真实节点列表</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; realNodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;String&gt;();<br><br>    <span class="hljs-comment">//模拟初始服务器</span><br>    <span class="hljs-keyword">private</span> String[] servers =<span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(List&lt;String&gt; serviceList)</span> &#123;<br>        <span class="hljs-keyword">for</span> (String server :serviceList) &#123;<br>            realNodes.add(server);<br>            System.out.println(<span class="hljs-string">&quot;真实节点[&quot;</span> + server + <span class="hljs-string">&quot;] 被添加&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; VIRTUAL_NUM; i++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">virtualNode</span> <span class="hljs-operator">=</span> server + <span class="hljs-string">&quot;&amp;&amp;VN&quot;</span> + i;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> getHash(virtualNode);<br>                shards.put(hash, virtualNode);<br>                System.out.println(<span class="hljs-string">&quot;虚拟节点[&quot;</span> + virtualNode + <span class="hljs-string">&quot;] hash:&quot;</span> + hash + <span class="hljs-string">&quot;，被添加&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取被分配的节点名</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span>  String <span class="hljs-title function_">getServer</span><span class="hljs-params">(String node,List&lt;String&gt; serviceList)</span> &#123;<br>        init(serviceList);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> getHash(node);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        SortedMap&lt;Integer, String&gt; subMap = shards.tailMap(hash);<br>        <span class="hljs-keyword">if</span> (subMap.isEmpty()) &#123;<br>            key = shards.lastKey();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            key = subMap.firstKey();<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">virtualNode</span> <span class="hljs-operator">=</span> shards.get(key);<br>        <span class="hljs-keyword">return</span> virtualNode.substring(<span class="hljs-number">0</span>, virtualNode.indexOf(<span class="hljs-string">&quot;&amp;&amp;&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加节点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(String node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!realNodes.contains(node)) &#123;<br>            realNodes.add(node);<br>            System.out.println(<span class="hljs-string">&quot;真实节点[&quot;</span> + node + <span class="hljs-string">&quot;] 上线添加&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; VIRTUAL_NUM; i++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">virtualNode</span> <span class="hljs-operator">=</span> node + <span class="hljs-string">&quot;&amp;&amp;VN&quot;</span> + i;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> getHash(virtualNode);<br>                shards.put(hash, virtualNode);<br>                System.out.println(<span class="hljs-string">&quot;虚拟节点[&quot;</span> + virtualNode + <span class="hljs-string">&quot;] hash:&quot;</span> + hash + <span class="hljs-string">&quot;，被添加&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除节点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">delNode</span><span class="hljs-params">(String node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (realNodes.contains(node)) &#123;<br>            realNodes.remove(node);<br>            System.out.println(<span class="hljs-string">&quot;真实节点[&quot;</span> + node + <span class="hljs-string">&quot;] 下线移除&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; VIRTUAL_NUM; i++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">virtualNode</span> <span class="hljs-operator">=</span> node + <span class="hljs-string">&quot;&amp;&amp;VN&quot;</span> + i;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> getHash(virtualNode);<br>                shards.remove(hash);<br>                System.out.println(<span class="hljs-string">&quot;虚拟节点[&quot;</span> + virtualNode + <span class="hljs-string">&quot;] hash:&quot;</span> + hash + <span class="hljs-string">&quot;，被移除&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * FNV1_32_HASH算法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHash</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-number">16777619</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) <span class="hljs-number">2166136261L</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++)<br>            hash = (hash ^ str.charAt(i)) * p;<br>        hash += hash &lt;&lt; <span class="hljs-number">13</span>;<br>        hash ^= hash &gt;&gt; <span class="hljs-number">7</span>;<br>        hash += hash &lt;&lt; <span class="hljs-number">3</span>;<br>        hash ^= hash &gt;&gt; <span class="hljs-number">17</span>;<br>        hash += hash &lt;&lt; <span class="hljs-number">5</span>;<br>        <span class="hljs-comment">// 如果算出来的值为负数则取其绝对值</span><br>        <span class="hljs-keyword">if</span> (hash &lt; <span class="hljs-number">0</span>)<br>            hash = Math.abs(hash);<br>        <span class="hljs-keyword">return</span> hash;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">balance</span><span class="hljs-params">(List&lt;String&gt; addressList)</span> &#123;<br>        String random= UUID.randomUUID().toString();<br>        <span class="hljs-keyword">return</span> getServer(random,addressList);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>代码详解</p><ul><li><p>关键成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsistencyHashBalance</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoadBalance</span> &#123;<br>    <span class="hljs-comment">// 虚拟节点数量：每个真实节点创建5个虚拟节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">VIRTUAL_NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <br>    <span class="hljs-comment">// 哈希环：TreeMap自动按key排序，模拟环形结构</span><br>    <span class="hljs-comment">// key: 虚拟节点的hash值</span><br>    <span class="hljs-comment">// value: 虚拟节点名称（格式：真实地址&amp;&amp;VN编号）</span><br>    <span class="hljs-keyword">private</span> SortedMap&lt;Integer, String&gt; shards = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>    <br>    <span class="hljs-comment">// 真实节点列表</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; realNodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>&#125;<br>    <span class="hljs-comment">//模拟初始服务器</span><br>    <span class="hljs-keyword">private</span> String[] servers =<span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p>为什么要使用？</p><ul><li><strong>自动按照key(hash值)排序</strong></li><li>支持taiMap(hash)快速查找&gt;&#x3D;hash 的所有节点</li><li>时间复杂度：O(log n)</li></ul></li><li><p>初始化哈希环（init方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(List&lt;String&gt; serviceList)</span> &#123;<br>    <span class="hljs-comment">// serviceList = [&quot;127.0.0.1:9000&quot;, &quot;127.0.0.1:9001&quot;, &quot;127.0.0.1:9002&quot;]</span><br>    <br>    <span class="hljs-keyword">for</span> (String server : serviceList) &#123;<br>        realNodes.add(server);<br>        System.out.println(<span class="hljs-string">&quot;真实节点[&quot;</span> + server + <span class="hljs-string">&quot;] 被添加&quot;</span>);<br>        <br>        <span class="hljs-comment">// 为每个真实节点创建5个虚拟节点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; VIRTUAL_NUM; i++) &#123;<br>            <span class="hljs-comment">// 虚拟节点命名：真实地址 + &quot;&amp;&amp;VN&quot; + 编号</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">virtualNode</span> <span class="hljs-operator">=</span> server + <span class="hljs-string">&quot;&amp;&amp;VN&quot;</span> + i;<br>            <span class="hljs-comment">// 例如：&quot;127.0.0.1:9000&amp;&amp;VN0&quot;</span><br>            <br>            <span class="hljs-comment">// 计算虚拟节点的hash值</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> getHash(virtualNode);<br>            <br>            <span class="hljs-comment">// 加入哈希环（TreeMap自动排序）</span><br>            shards.put(hash, virtualNode);<br>            System.out.println(<span class="hljs-string">&quot;虚拟节点[&quot;</span> + virtualNode + <span class="hljs-string">&quot;] hash:&quot;</span> + hash + <span class="hljs-string">&quot;，被添加&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>FNV1_32_HASH 算法（getHash方法）</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHash</span><span class="hljs-params">(String str)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-number">16777619</span>;           <span class="hljs-comment">// FNV质数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) <span class="hljs-number">2166136261L</span>;     <span class="hljs-comment">// FNV偏移基础</span><br>    <br>    <span class="hljs-comment">// 对字符串的每个字符进行哈希</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++)<br>        hash = (hash ^ str.charAt(i)) * p;  <span class="hljs-comment">// 异或 + 乘法</span><br>    <br>    <span class="hljs-comment">// 额外的位运算混淆，提高分布均匀性</span><br>    hash += hash &lt;&lt; <span class="hljs-number">13</span>;   <span class="hljs-comment">// 左移13位并加到自身</span><br>    hash ^= hash &gt;&gt; <span class="hljs-number">7</span>;    <span class="hljs-comment">// 右移7位并异或</span><br>    hash += hash &lt;&lt; <span class="hljs-number">3</span>;    <span class="hljs-comment">// 左移3位并加到自身</span><br>    hash ^= hash &gt;&gt; <span class="hljs-number">17</span>;   <span class="hljs-comment">// 右移17位并异或</span><br>    hash += hash &lt;&lt; <span class="hljs-number">5</span>;    <span class="hljs-comment">// 左移5位并加到自身</span><br>    <br>    <span class="hljs-comment">// 确保返回正数</span><br>    <span class="hljs-keyword">if</span> (hash &lt; <span class="hljs-number">0</span>)<br>        hash = Math.abs(hash);<br>    <br>    <span class="hljs-keyword">return</span> hash;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>查找服务器（getServer方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServer</span><span class="hljs-params">(String node, List&lt;String&gt; serviceList)</span> &#123;<br>    <span class="hljs-comment">// 步骤1：初始化哈希环</span><br>    init(serviceList);<br>    <br>    <span class="hljs-comment">// 步骤2：计算请求的hash值</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> getHash(node);<br>    <span class="hljs-comment">// node = &quot;550e8400-e29b-41d4-a716-446655440000&quot; (UUID)</span><br>    <span class="hljs-comment">// hash = 例如 300000000</span><br>    <br>    <span class="hljs-comment">// 步骤3：在哈希环上查找</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    SortedMap&lt;Integer, String&gt; subMap = shards.tailMap(hash);<br>    <span class="hljs-comment">// tailMap(hash)：返回所有 key &gt;= hash 的节点</span><br>    <br>    <span class="hljs-keyword">if</span> (subMap.isEmpty()) &#123;<br>        <span class="hljs-comment">// 情况1：hash值大于所有虚拟节点，选择第一个节点（环形）</span><br>        key = shards.lastKey();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 情况2：选择第一个 &gt;= hash 的虚拟节点</span><br>        key = subMap.firstKey();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 步骤4：获取虚拟节点名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">virtualNode</span> <span class="hljs-operator">=</span> shards.get(key);<br>    <span class="hljs-comment">// 例如：&quot;127.0.0.1:9001&amp;&amp;VN2&quot;</span><br>    <br>    <span class="hljs-comment">// 步骤5：提取真实节点地址</span><br>    <span class="hljs-keyword">return</span> virtualNode.substring(<span class="hljs-number">0</span>, virtualNode.indexOf(<span class="hljs-string">&quot;&amp;&amp;&quot;</span>));<br>    <span class="hljs-comment">// 返回：&quot;127.0.0.1:9001&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>负载均衡入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">balance</span><span class="hljs-params">(List&lt;String&gt; addressList)</span> &#123;<br>    <span class="hljs-comment">// 生成随机UUID作为请求标识</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <span class="hljs-comment">// 例如：&quot;550e8400-e29b-41d4-a716-446655440000&quot;</span><br>    <br>    <span class="hljs-comment">// 调用 getServer 查找服务器</span><br>    <span class="hljs-keyword">return</span> getServer(random, addressList);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>为什么用随机UUID？</strong></p><ul><li>保证每次请求的hash值不同</li><li>实现请求的均匀分布</li><li>缺点是无状态，不能实现会话保持</li></ul><p>如果用固定值（例如用户ID），可以实现会话保持</p></li><li><p>添加节点（addNode方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(String node)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!realNodes.contains(node)) &#123;<br>        realNodes.add(node);<br>        System.out.println(<span class="hljs-string">&quot;真实节点[&quot;</span> + node + <span class="hljs-string">&quot;] 上线添加&quot;</span>);<br>        <br>        <span class="hljs-comment">// 为新节点创建5个虚拟节点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; VIRTUAL_NUM; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">virtualNode</span> <span class="hljs-operator">=</span> node + <span class="hljs-string">&quot;&amp;&amp;VN&quot;</span> + i;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> getHash(virtualNode);<br>            shards.put(hash, virtualNode);  <span class="hljs-comment">// 加入哈希环</span><br>            System.out.println(<span class="hljs-string">&quot;虚拟节点[&quot;</span> + virtualNode + <span class="hljs-string">&quot;] hash:&quot;</span> + hash + <span class="hljs-string">&quot;，被添加&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>删除节点（delNode方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delNode</span><span class="hljs-params">(String node)</span> &#123;<br>    <span class="hljs-keyword">if</span> (realNodes.contains(node)) &#123;<br>        realNodes.remove(node);<br>        System.out.println(<span class="hljs-string">&quot;真实节点[&quot;</span> + node + <span class="hljs-string">&quot;] 下线移除&quot;</span>);<br>        <br>        <span class="hljs-comment">// 从哈希环中删除该节点的所有虚拟节点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; VIRTUAL_NUM; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">virtualNode</span> <span class="hljs-operator">=</span> node + <span class="hljs-string">&quot;&amp;&amp;VN&quot;</span> + i;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> getHash(virtualNode);<br>            shards.remove(hash);  <span class="hljs-comment">// 从哈希环移除</span><br>            System.out.println(<span class="hljs-string">&quot;虚拟节点[&quot;</span> + virtualNode + <span class="hljs-string">&quot;] hash:&quot;</span> + hash + <span class="hljs-string">&quot;，被移除&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>docker学习记录</title>
    <link href="/2025/09/16/docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/09/16/docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker学习记录"><a href="#Docker学习记录" class="headerlink" title="Docker学习记录"></a>Docker学习记录</h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li><p>镜像与容器</p><p>当我们利用Docker安装应用的时候，Docker会自动搜索并下载应用镜像(image)。镜像不仅包含应用本身，还包含应用所需要的环境、配置、系统函数库。</p><p>Docker会在运行镜像的时候创建一个隔离环境，称为容器(container)</p></li><li><p>镜像仓库</p><p>存储和管理镜像的平台，Docker官方维护了一个公共的仓库</p></li></ul><p><img src="/2025/09/16/docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source_posts\docker学习记录\1.png" alt="Docker运行示意图"></p><ul><li><p>常用命令</p><p>案例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>--name mysql \ <br>-p 3306:3306 \<br>-e TZ=Asia/Shanghai \<br>-e MYSQL_ROOT_PASSWORD=123 \<br>mysql<br></code></pre></td></tr></table></figure><p>docker run：创建并运行一个容器</p><p>-d：让容器在后台运行</p><p>–name mysql：给容器命名为mysql，不可重复</p><p>-p 3306:3306：设置端口映射（宿主机端口：容器内端口）。如果要部署多个容器，宿主机端口需要修改，连接时只能联通宿主机，而宿主机端口唯一，容器会被分配到不同的ip，我们无法访问，但可以通过端口映射，也就是说多个容器它的容器内端口是一致的。</p><p>-e KEY&#x3D;VALUE：设置环境变量，不同的镜像所需不同，通过查看官方文档来设置。</p><p>mysql：指定运行时的镜像名称，完整版由两部分组成：[repository]:[tag]，镜像名：版本，省略版本默认是最新版本</p></li><li><p>常见命令：</p><p>​    <img src="/2025/09/16/docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\docker学习记录\2.png" alt="docker常见命令图示" style="zoom:67%;"></p><p>​    更多命令：<a href="https://www.runoob.com/docker/docker-command-manual.html">Docker 命令大全 | 菜鸟教程</a></p></li><li><p>数据卷：</p><p>数据卷（volume）是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁。</p><p><img src="/2025/09/16/docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source_posts\docker学习记录\3.png" alt="映射示意图"></p><p>相关命令：</p><table><thead><tr><th align="center">命令</th><th align="center">说明</th><th align="center">文档地址</th></tr></thead><tbody><tr><td align="center">docker volume create</td><td align="center">创建数据卷</td><td align="center">docker volume create</td></tr><tr><td align="center">docker volume ls</td><td align="center">查看所有数据卷</td><td align="center"></td></tr><tr><td align="center">docker volume rm</td><td align="center">删除指定数据卷</td><td align="center"></td></tr><tr><td align="center">docker volume inspect</td><td align="center">查看某个数据卷的详情</td><td align="center"></td></tr><tr><td align="center">docker volume prune</td><td align="center">清除数据卷</td><td align="center"></td></tr></tbody></table><p><u>在执行docker run命令时，使用-v <strong>数据卷:容器内目录</strong>，可以完成数据卷挂载；</u></p><p><u>如果已经创建了容器，就没办法挂载了；</u></p><p><u>当创建容器时，如果挂载数据卷不存在，会<strong>自动创建数据卷</strong>。</u> </p><p>例子：</p><ul><li>创建nginx ,修改nginx容器内html目录下index.html文件内容</li><li>将静态资源部署到nginx的html目录</li></ul><p>执行命令：docker run -d –name nginx -p 80:80 -v html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx </p><p>中间的**-v html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html**是指创建一个名为html的数据卷，映射到容器内的目录&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html下，而宿主机的目录是不需要我们指定的 </p></li><li><p>本地目录挂载</p><p>例子：</p><ul><li>查看mysql容器，判断是否有数据卷挂载</li><li>基于宿主机目录实现mysql数据目录、配置文件、初始化脚本的挂载（<a href="https://hub.docker.com/_/mysql">查看官方mysql镜像文档</a>）</li></ul><p>执行命令：<strong>docker inspect mysql</strong> 查看mysql容器内的数据卷挂载情况——“Mounts”的条目</p><p><u>执行docker run命令时，使用-v <strong>本地目录:容器内目录</strong> 可以完成本地目录挂载</u></p><p><u>注意！本地目录必须以”&#x2F;“或者”.&#x2F;“开头，如果以别的名称开头，会被识别为数据卷而非本地目录</u></p><p>​    例如： -v mysql:&#x2F;var&#x2F;lib&#x2F;mysql会被识别为一个叫做mysql的数据卷；</p><p>​                -v .&#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql会被识别为当前目录下的mysql目录</p><p>执行命令：根据官网文档查阅到容器内相应目录：&#x2F;var&#x2F;lib&#x2F;mysql数据目录、&#x2F;etc&#x2F;mysql&#x2F;conf.d配置文件目录、&#x2F;docker-entrypoint-initdb.d初始化脚本</p></li><li><p>自定义镜像：</p><p>镜像就是包含了应用程序、程序运行的系统函数库、运行配置等文件的文件包，构建镜像的过程其实就是把上述文件打包的过程 。</p><p>部署一个java应用的步骤：   ————————》构建一个java镜像的步骤</p><ul><li>准备一个linux服务器      ————————》      准备一个linux运行环境</li><li>安装JRE并配置环境变量  ————————》      安装JRE并配置环境变量</li><li>拷贝jar包                          ————————》      拷贝jar包</li><li>运行jar包                          ————————》      编写运行脚本</li></ul><p>镜像结构：添加安装、依赖、配置等，每次操作都形成新的一层（layer），这种结构有以下的优点</p><img src="/2025/09/16/docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\docker学习记录\4.png" alt="镜像结构层次示意图" style="zoom:67%;"><ul><li>底层实现基础镜像（BaseImage），是应用依赖的系统函数库、环境、配置、文件等，能够复用</li><li>入口（entrypoint）是镜像运行入口，一般是程序启动的脚本和参数</li></ul></li><li><p>Dockerfile</p><p>文本文件，其中包含一个个的指令，用指令来说明要执行什么操作来构建镜像。将来Docker可以根据Dockerfile帮我们构建镜像。常见指令如下：</p><table><thead><tr><th>指令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td><td>FROM centos:6</td></tr><tr><td>ENV</td><td>设置环境变量，可在后面指令使用</td><td>ENV key value</td></tr><tr><td>COPY</td><td>拷贝本地文件到镜像的指定目录</td><td>COPY .&#x2F;jrell.tar.gz &#x2F;tmp</td></tr><tr><td>RUN</td><td>执行Linux的shell命令，一般是安装过程的命令</td><td>RUN tar -zxvf &#x2F;tmp&#x2F;jrell.tar.gz &amp;&amp; EXPORTS path&#x3D;&#x2F;tmp&#x2F;jrell:$path</td></tr><tr><td>EXPOSE</td><td>指定容器运行时监听的端口，是给镜像使用者看的</td><td>EXPOSE 8080</td></tr><tr><td>ENTRYPOINT</td><td>镜像中应用的启动命令，容器运行时调用</td><td>ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><blockquote><p>详细语法说明，参考<a href="https://docs.docker.com/reference/dockerfile/">官网文档</a></p></blockquote></li><li><p>构建镜像</p><ul><li>Docker build -t 镜像名 Dockerfile目录 eg. docker build -t decker-demo .(.表示的是当前目录)</li></ul></li><li><p>Docker 网络</p><ul><li><p>默认情况下，所有容器都是以bridge方式连接到Docker的一个虚拟网桥上</p><img src="/2025/09/16/docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\docker学习记录\5.png" alt="docker 网络链接示意" style="zoom:67%;"></li><li><p>自定义网络：加入自定义网络的容器可以通过容器名互相访问，相关命令如下：</p><img src="/2025/09/16/docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\docker学习记录\6.png" alt="网络操作命令" style="zoom:67%;"></li></ul></li><li></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LLM学习记录</title>
    <link href="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="大模型原理及基础"><a href="#大模型原理及基础" class="headerlink" title="大模型原理及基础"></a>大模型原理及基础</h1><h2 id="NLP基础"><a href="#NLP基础" class="headerlink" title="NLP基础"></a>NLP基础</h2><p>参考资料：<a href="https://www.bilibili.com/video/BV1hM4y157xX/?spm_id_from=333.337.search-card.all.click&vd_source=330fcf898cf16ea7d66bda411f42e566">李宏毅NLP(自然语言处理)完整课程，强推！_哔哩哔哩_bilibili</a></p><h3 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h3><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\overview1.png" alt="课程概览图" style="zoom:67%;"><p>model&#x3D;Deep Network</p><ul><li><p>音频转文本：语音辨识（speech recognition）</p></li><li><p>音频转音频：1. speech separation（从多人同时说话的音频中分离出各自的音频） 2. voice conversion（变声器）</p></li><li><p>音频转类别：1. speaker recognition    2. keyword spotting（例如：唤醒词检测）</p></li><li><p>文本转音频：语音合成</p></li><li><p>文本转文本：1. translation 2. summarization 3. chat-bot 4. question answering</p></li><li><p>文本转类别：文本分类</p></li></ul><h3 id="Overview-of-NLP-tasks"><a href="#Overview-of-NLP-tasks" class="headerlink" title="Overview of NLP tasks"></a>Overview of NLP tasks</h3><p>​<img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\overview6.png" alt="NLP任务类型图示" style="zoom:67%;"></p><ol><li><p>Part-of-Speech(POS) tagging：自动标记句子中的词性（eg. verb, adjective, noun）</p><ol><li>input: sequence</li><li>output: class for each token</li></ol></li><li><p>Word Segmentation：分词，例如中文，哪些部分属于一个词</p><ol><li>input: sequence</li><li>output: class for each token</li></ol></li><li><p>Parsing：对文本生成树状结构</p><ol><li>Constituency Parsing</li><li>Dependency Parsing</li></ol></li><li><p>Coreference Resolution：指代消解（找出文章中代词的实体是什么）</p></li><li><p>Summarization 总结</p><ol><li>Extractive summarization 提取总结（直接提取原文句子）<ol><li>input: sequence</li><li>output: class for each token(here a token is a sentence)，每个句子是否要提取到摘要中</li></ol></li><li>Abstractive summarization 概括总结<ol><li>input: sequence</li><li>output: sequence</li></ol></li></ol></li><li><p>Machine Translation机器翻译</p><ol><li>input: sequence</li><li>output: sequence</li></ol></li><li><p>Grammar Error Correction语法纠错</p><ol><li>input: sequence</li><li>output: sequence</li></ol></li><li><p>Sentiment Classification 情感分类（辨别文本情绪）</p><ol><li>input: sequence</li><li>output: a class</li></ol></li><li><p>Stance Detection 立场检测（反对，赞成，质疑  … …）</p><ol><li>used in Veracity Prediction（真伪辨认），将文本和立场检测共同输入辨认模型</li></ol></li><li><p>Natural Language Inference(NLI) 自然语言推理</p><ol><li>判断假设与结论之间的关系</li><li>input: two sequence</li><li>output: a class</li></ol></li><li><p>Search Engine 搜索引擎</p></li><li><p>Question Answering</p><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\overview2.png" alt="QA模型示意图" style="zoom:67%;"><ol><li>input: several sequences</li><li>output: sequence</li></ol></li><li><p>Chatting</p><ol><li>input: several sequences</li><li>output: sequence</li></ol></li><li><p>Task-oriented ：任务导向的chatting，比如预定酒店</p><p>如何训练这种模型？</p><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\overview5.png" alt="task-oriented dialogue" style="zoom:67%;"><ul><li><p>通过NLU（natural language understanding）模型得到状态</p></li><li><p>将上下文作为state输入</p></li><li><p>通过policy模型输出规定范围内要采取哪个action（比如还没掌握订房人数，询问人数）</p></li><li><p>将action通过NLG（natural language generating）模型生成回复文本</p></li></ul><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\overview3.png" alt="task-oriented任务训练示意" style="zoom:50%;"><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\overview4.png" alt="NLU示例图" style="zoom:50%;"></li><li><p>knowledge graph</p><ol><li>抽取entity：通过Name Entity Recognition(NER)抽取实体，比如抽取人名、组织名、地名等，这取决于目前的任务。输入为sequence ，输出为每个token的类别（类似POS tagging）</li><li>抽取relation：如果relation是有限的，就是一个分类问题，输入实体关系的信息，输出relation</li></ol></li></ol><h3 id="BERT-and-its-family"><a href="#BERT-and-its-family" class="headerlink" title="BERT and its family"></a>BERT and its family</h3><ol><li><p>pre-train model</p><ul><li>传统的word2vec，只是学习word和vector的映射，无法识别上下文，可能出现相同word不同含义的情况。所以，为了考虑上下文的内容，提出了contextualized word embedding，能够做到同一个词汇，在不同的语境下有不同的embedding</li></ul></li><li><p>how to fine-tune  (如何把pre-train model改造成适应不同具体任务的模型呢？)</p><ol><li><p>输入为多个句子时：将两个句子通过特殊分割符号连接成同一个句子作为输入</p></li><li><p>输出为one class时：在pre-train model后接一个task specific（任务分类）的model</p></li><li><p>输出为class for each token： 类似one class，只是要给每个token都输出一个class</p></li><li><p>输出为copy from input：训练一个模型输出start和end，用于定位输入中要copy的片段</p></li><li><p>输出为general sequence： <img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\BERT1.png" alt="decoder也用上pre-train model" style="zoom:50%;"></p></li><li><p>如何微调？</p><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\BERT2.png" alt="微调模型的两种方式" style="zoom:67%;"><p>根据结果表明，将pre-trained模型和任务特定模型一起微调的效果更优。</p><p>另一个问题是，pre-trained模型参数非常大，是否可以只调整一部分呢？可以，在model中加一些层作为Adaptor，只是调整adaptor部分的参数就可以。</p><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\BERT3.png" alt="添加Adaptor的fine-tune" style="zoom:67%;"></li><li><p>自监督学习</p><p>在自监督学习中，系统用部分的输入来预测另外一部分的输入</p><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\BERT4.png" alt="监督学习vs自监督学习" style="zoom:50%;"><p>mask input（掩码）来实现自监督</p><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\BERT5.png" alt="BERT中的掩码机制" style="zoom:50%;"><ul><li><p>要掩码那些token能够优化训练呢？</p><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\BERT6.png" alt="一些masking方法" style="zoom:50%;"><ul><li><p>SpanBert</p><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\BERT7.png" alt="SpanBert提出的训练方法" style="zoom:50%;"><p>SpanBert 提出的 Span Boundary Objective（SBO）是一种新的预训练任务，其核心思想是利用被掩码的文本片段（span）左右两边的边界 token 来预测整个 span 的内容。</p></li><li><p>BERT适用于语义理解，但不擅长generation的任务（针对自左向右生成文字的情况下）。所以BERT不擅长seq2seq的model.</p></li></ul></li></ul></li><li><p>Sentence Level</p><p>如何产生一个Sentence level的embedding?</p><ol><li><strong>Skip Thought</strong>：借鉴word2vec的skip-gram，用“编码器+双解码器”架构——编码器把中心句转成固定向量，两个解码器分别用这一向量生成中心句的前一句和后一句，通过“生成上下文句子”学习句子表示。</li><li><strong>Quick Thought</strong>：优化Skip Thought的低效，把“生成句子”改成“分类判断”——用编码器分别处理中心句和候选句，通过分类器判断候选句是否是中心句的上下文（正样本为真实上下文，负样本为随机句子），以分类任务学习句子表示。</li></ol><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\BERT8.png" alt="sentence层次的" style="zoom:50%;"><ol start="3"><li><p><strong>NSP</strong>：Next sentence prediction，判断<strong>两个句子是否为连续的上下文</strong>（如 “今天天气很好” 和 “我们去公园” 是连续句，和 “猫爱吃鱼” 是非连续句）</p><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\BERT9.png" alt="Next sentence prediction" style="zoom:50%;"></li><li><p><strong>SOP</strong>：Sentence order prediction，判断<strong>一对句子的顺序是否正确</strong>（如 “先吃早餐”→“再去上班” 是正确顺序，反之则错误）</p></li></ol></li></ol></li></ol><h3 id="GPT-3"><a href="#GPT-3" class="headerlink" title="GPT-3"></a>GPT-3</h3><ol><li><p>如何理解few-short learning ,one-shot learning, zero-shot learning？</p><img src="/2025/09/16/LLM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/hexo-blog\source\_posts\LLM学习记录\GPT3-1.png" alt="in-context learning示例图" style="zoom:50%;"></li><li><p>GPT-3在面对NLI问题时不擅长</p><ol><li>NLI（Natural Language Inference，自然语言推断）问题：NLI 任务的输入固定为 “一对句子”——<strong>前提（P，通常是客观陈述的事实）</strong> 和<strong>假设（H，基于前提提出的判断或猜想）</strong>，模型需要输出二者的逻辑关系</li></ol></li><li></li><li></li></ol><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><h2 id="GPT理论"><a href="#GPT理论" class="headerlink" title="GPT理论"></a>GPT理论</h2><h2 id="GPT的实践"><a href="#GPT的实践" class="headerlink" title="GPT的实践"></a>GPT的实践</h2><h1 id="大模型实践应用及开发"><a href="#大模型实践应用及开发" class="headerlink" title="大模型实践应用及开发"></a>大模型实践应用及开发</h1><h2 id="HuggingFace"><a href="#HuggingFace" class="headerlink" title="HuggingFace"></a>HuggingFace</h2><h2 id="大模型基础"><a href="#大模型基础" class="headerlink" title="大模型基础"></a>大模型基础</h2><h2 id="大模型开发"><a href="#大模型开发" class="headerlink" title="大模型开发"></a>大模型开发</h2><h3 id="模型微调"><a href="#模型微调" class="headerlink" title="模型微调"></a>模型微调</h3><h3 id="langchain"><a href="#langchain" class="headerlink" title="langchain"></a>langchain</h3><h3 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h3><h1 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Agent相关知识</title>
    <link href="/2025/09/11/Agent%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <url>/2025/09/11/Agent%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Easy-Dataset构建领域数据集"><a href="#Easy-Dataset构建领域数据集" class="headerlink" title="Easy Dataset构建领域数据集"></a>Easy Dataset构建领域数据集</h1><blockquote><p>参考资料：</p><p><a href="https://www.bilibili.com/video/BV1y8QpYGE57?vd_source=da917d4041012a5e7fe59d2ca891e75a&spm_id_from=333.788.videopod.sections">如何把领域文献批量转换为可供模型微调的数据集？<em>哔哩哔哩</em> bilibili</a></p><p><a href="https://github.com/ConardLi/easy-dataset">easy dataset 开源链接</a></p></blockquote><ul><li><p>常见公开数据集获取途径</p><ol><li><p>hugging face</p></li><li><p>kaggle</p></li><li><p>dataset serch(支持kaggle等多源检索数据集)</p></li><li><p>open data lab(中文数据集)</p></li><li><p>modelScope</p></li></ol></li><li><p>数据集构造需要解决的问题</p><ol><li>能够基于AI辅助生成数据集，而且不丢失准确性</li><li>能够解决模型上下文限制导致的阶段问题</li><li>能够批量构造数据集，生成COT（思维链Chain of Thought），且保证数据集的不重复</li><li>能够构建领域标签，并且按照领域树组织数据集</li><li>能够合理地管理数据集，方便对数据集进行质量校验等操作</li><li>能够方便地进行数据集之间的格式转换</li></ol></li></ul><h3 id="easy-dataset-启动"><a href="#easy-dataset-启动" class="headerlink" title="easy dataset 启动"></a>easy dataset 启动</h3><ol><li><p>搜索公开数据集功能</p><p>通过关键字，可以在上述多个数据集平台进行检索</p></li><li><p>创建项目</p><ol><li>模型配置：指定用于生成数据集的模型</li><li>模型测试：测试模型的输出效果和对比不同模型</li></ol></li><li><p>项目设置</p><ol><li>任务配置<ol><li>文本分割设置</li><li>问题生成设置</li></ol></li></ol></li><li><p>文献处理</p><ol><li><p>上传文献（需要选择模型，最好是文本生成模型而不是推理模型）</p></li><li><p>文本块生成处理</p></li><li><p>生成问题（建议将领域树划分正确后再去生成问题）</p></li><li><p>生成答案</p><blockquote><p>如果想要生成带有思维链的数据集，可以选择推理模型进行生成</p></blockquote></li></ol></li><li><p>核心思路</p><img src="/2025/09/11/Agent%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/hexo-blog\source\_posts\Agent相关知识\frame.png" style="zoom:67%;"><ol><li>通用大模型模块<ol><li>API格式<ol><li>API前缀</li><li>API Key 都是通过标准的token认证的</li><li>模型名称</li></ol></li></ol></li><li>文献处理<ol><li>文本分块<ol><li>按照字符数分块：可能会破坏原文结构</li><li>递归分块：先按句号分割，然后按照逗号分割以此细分，较为灵活 </li><li>优化递归分块<ol><li>首先设定文本块的最小、最大分割长度</li><li>自动对章节（比如markdown中的 #、##、###）进行识别</li><li>对已识别到的章节字数进行计数，在恰好位于大于最小分割长度 同时小于最大分割长度的前提下进行分段</li><li>当遇到超长段落（超出最大分割长度）的时候，再执行递归分块算法，确保语义完整性。</li></ol></li></ol></li></ol></li><li>数据集构建<ol><li>提示词工程</li></ol></li></ol></li></ol><h1 id="MCP-数据库"><a href="#MCP-数据库" class="headerlink" title="MCP+数据库"></a>MCP+数据库</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LangChain4j实践</title>
    <link href="/2025/08/23/LangChain4j%E5%AE%9E%E8%B7%B5/"/>
    <url>/2025/08/23/LangChain4j%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="大模型调用"><a href="#大模型调用" class="headerlink" title="大模型调用"></a>大模型调用</h1><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><p>案例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">curl -X POST https<span class="hljs-punctuation">:</span><span class="hljs-comment">//dashscope.aliyuncs.com/compatible-mode/v1/chat/completions \</span><br>-H <span class="hljs-string">&quot;Authorization: Bearer $DASHSCOPE_API_KEY&quot;</span> \<br>-H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>-d &#x27;<span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;qwen-plus&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;messages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;role&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你是一个开发经验丰富的程序员，请以此角色进行沟通&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br><br>            <span class="hljs-attr">&quot;role&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你是谁？&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;stream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;enable_search&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p>核心请求参数：</p><p><strong>model</strong>：指定调用模型的名称  </p><p><strong>messages</strong>: 传递给大模型的消息，其中role为角色，有三种<strong>user&#x2F;system&#x2F;assistant</strong>。system表示模型的目标或角色。如果设置系统消息，请放在messages列表的第一位；assistant表示模型对用户消息的回复</p><p><strong>stream</strong>：表示是否流式输出回复，默认为flase，表示模型生成完所有内容后一次性返回结果。true：边生成边输出，即每生成一部分内容就立即输出一个片段（chunk）。您需要实时地逐个读取这些片段以获得完整的结果</p><p><strong>enable_search</strong>：模型在生成文本时是否使用互联网搜索结果进行参考，默认为false</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;choices&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;role&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;assistant&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我是你的技术伙伴，一个拥有多年开发经验的程序员，熟悉各种编程语言和开发框架。无论是后端开发、前端设计、数据库优化，还是系统架构设计，我都能为你提供专业的建议和支持。有什么技术问题或项目需求，尽管告诉我！&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;finish_reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stop&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;logprobs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;object&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chat.completion&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;usage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;prompt_tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">31</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;completion_tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">55</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;total_tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">86</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;prompt_tokens_details&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;cached_tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;created&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1755954402</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;system_fingerprint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;qwen-plus&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chatcmpl-18f38aea-6193-9efe-95c3-57e0458b618a&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p>核心响应参数:</p><p><strong>choices</strong>：模型生成的内容数组，可以包含一条或多条内容</p><ul><li>message：本次调用模型输出的消息</li><li>finish_reason：stop表示自然结束，length表示生成内容过长</li><li>index：当前内容在choices数组中的索引</li></ul><p>object：始终为chat.completion，无需关注</p><p><strong>usage</strong>：本次对话过程中使用的token信息</p><ul><li>prompt_tokens：用户的输入转换成token的个数</li><li>completion_tokens：模型生成的回复转换成token的个数</li><li>total_tokens：用户输入和模型生成的总token个数</li></ul><p>created：本次会话被创建的时间戳</p><p>system_fingerprint：固定为null，无需关注</p><p>model：本次会话使用的模型</p><p>id：本次调用的唯一标识符</p></li></ul><h1 id="会话功能"><a href="#会话功能" class="headerlink" title="会话功能"></a>会话功能</h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><blockquote><p>参考链接：<a href="https://docs.langchain4j.info/get-started">langchain4j官方文档</a></p></blockquote><p>步骤  </p><ol><li>引入Langchain4j依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>dev.langchain4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>langchain4j-open-ai<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>构建OpenAiChatModel对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OpenAiChatModel</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> OpenAiChatModel.builder()<br> .baseUrl(<span class="hljs-string">&quot;http://langchain4j.dev/demo/openai/v1&quot;</span>)<br> .apiKey(<span class="hljs-string">&quot;API-KEY&quot;</span>)  <br> &lt;!-- 这里写成apiKey(System.getenv(<span class="hljs-string">&quot;API-KEY&quot;</span>)) 将Api_key配置在环境变量中更安全 --&gt;<br> .modelName(<span class="hljs-string">&quot;qwen-plus&quot;</span>)<br> .build();<br></code></pre></td></tr></table></figure></li><li>调用chat方法与大模型交互<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> model.chat(<span class="hljs-string">&quot;你是谁？&quot;</span>);<br>System.out.println(result);<br></code></pre></td></tr></table></figure></li></ol><h2 id="Spring整合Langchain4j"><a href="#Spring整合Langchain4j" class="headerlink" title="Spring整合Langchain4j"></a>Spring整合Langchain4j</h2><ol><li><p>构建springboot项目</p></li><li><p>引入起步依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>dev.langchain4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>langchain4j-open-ai-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-beta3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>application.yml中配置大模型</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">langchain4j:</span><br><span class="hljs-attr">open-ai:</span><br>    <span class="hljs-attr">chat-model:</span><br>    <span class="hljs-attr">base-url:</span> <span class="hljs-string">https://dashscope.aliyuncs.com/compatible-mode/v1</span><br>    <span class="hljs-attr">api-key:</span> <span class="hljs-string">$&#123;API-KEY&#125;</span><br>    <span class="hljs-attr">model-name:</span> <span class="hljs-string">qwen-plus</span><br></code></pre></td></tr></table></figure></li><li><p>开发接口，调用大模型</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OpenAiChatModel model;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/chat&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">chat</span><span class="hljs-params">(String message)</span>&#123;<span class="hljs-comment">// 浏览器传递的用户问题</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> model.chat(message);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="AiServices工具类"><a href="#AiServices工具类" class="headerlink" title="AiServices工具类"></a>AiServices工具类</h2><ol><li>引入依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>dev.langchain4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>langchain4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.1-beta6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>声明接口 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConsultantService</span> &#123;<br>    <span class="hljs-comment">// 用于聊天的方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">chat</span><span class="hljs-params">(String message)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用AiServices为接口创建代理对象 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonConfig</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OpenAiChatModel model;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ConsultantService <span class="hljs-title function_">consultantService</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ConsultantService</span> <span class="hljs-variable">consultantService</span> <span class="hljs-operator">=</span> AiServices.builder(ConsultantService.class)<br>                .chatModel(model)<br>                .build();<br>    <span class="hljs-keyword">return</span>  consultantService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在Controller中注入并使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ConsultantService consultantService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/chat&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">chat</span><span class="hljs-params">(String message)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> consultantService.chat(message);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>简化上述步骤，提供了采用声明式使用方式，只需要在接口上添加注解@AiService，将来Langchain4j会自动创建该接口的代理对象并注入IoC容器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AiService(</span><br><span class="hljs-meta">        wiringMode = AiServiceWiringMode.EXPLICIT,  //指定 AI 服务的装配模式，这里是手动装配</span><br><span class="hljs-meta">        chatModel = &quot;openAiChatModel&quot; //指定模型的Bean名称</span><br><span class="hljs-meta">        // 也可以不指定这些属性，采用默认值</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConsultantService</span> &#123;<br>    <span class="hljs-comment">// 用于聊天的方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">chat</span><span class="hljs-params">(String message)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="流式调用"><a href="#流式调用" class="headerlink" title="流式调用"></a>流式调用</h2><ol><li>引入依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--流式调用相关依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>dev.langchain4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>langchain4j-reactor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.1-beta6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>配置流式模型对象 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">streaming-chat-model:</span><br>    <span class="hljs-attr">base-url:</span> <span class="hljs-string">https://dashscope.aliyuncs.com/compatible-mode/v1</span><br>    <span class="hljs-attr">api-key:</span> <span class="hljs-string">$&#123;API-KEY&#125;</span><br>    <span class="hljs-attr">model-name:</span> <span class="hljs-string">qwen-plus</span><br>    <span class="hljs-attr">log-requests:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">log-responses:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li>切换接口中方法的返回值类型 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AiService(</span><br><span class="hljs-meta">        wiringMode = AiServiceWiringMode.EXPLICIT,  //手动装配</span><br><span class="hljs-meta">        chatModel = &quot;openAiChatModel&quot;, //指定模型</span><br><span class="hljs-meta">        streamingChatModel = &quot;openAiStreamingChatModel&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConsultantService</span> &#123;<br>    <span class="hljs-comment">// 用于聊天的方法</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; <span class="hljs-title function_">chat</span><span class="hljs-params">(String message)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>修改Controller中的代码 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/chat&quot;,produces = &quot;text/html; charset=utf-8&quot;)</span> <span class="hljs-comment">//防止输出乱码，指定字符集为utf-8</span><br><span class="hljs-keyword">public</span> Flux&lt;String&gt; <span class="hljs-title function_">chat</span><span class="hljs-params">(String message)</span>&#123;<br>    Flux&lt;String&gt; result = consultantService.chat(message);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="消息注解"><a href="#消息注解" class="headerlink" title="消息注解"></a>消息注解</h2><ol><li><p>@SystemMessage</p><p> 使用案例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方式1：直接写在括号内</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConsultantService</span> &#123;<br>    <span class="hljs-meta">@SystemMessage(&quot;你是一个经验丰富的程序员，能够用准确易懂的方式讲解各类问题&quot;)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; <span class="hljs-title function_">chat</span><span class="hljs-params">(String message)</span>;<br>&#125;<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方式2：在resource中新建system.txt文件，详细描述系统消息，在注解中使用fromResource属性</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConsultantService</span> &#123;<br>    <span class="hljs-meta">@SystemMessage(fromResource = &quot;system.txt&quot;)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; <span class="hljs-title function_">chat</span><span class="hljs-params">(String message)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> 日志信息：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">body<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;model&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;qwen-plus&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;messages&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;role&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你是一个经验丰富的程序员，掌握java和ai agent开发&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;role&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你是谁？&quot;</span><br><span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;stream&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;stream_options&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;include_usage&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>@UserMessage</p><p> 使用案例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方法1</span><br><span class="hljs-meta">@UserMessage(&quot;你是志愿填报小助手，耐心细致又周到。&#123;&#123;it&#125;&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Flux&lt;String&gt; <span class="hljs-title function_">chat</span><span class="hljs-params">(String message)</span>;<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方法2</span><br><span class="hljs-meta">@UserMessage(&quot;你是志愿填报小助手，耐心细致又周到。&#123;&#123;msg&#125;&#125;&quot;)</span> <br><span class="hljs-keyword">public</span> Flux&lt;String&gt; <span class="hljs-title function_">chat</span><span class="hljs-params">(<span class="hljs-meta">@V(&quot;msg&quot;)</span> String message)</span>;<br></code></pre></td></tr></table></figure><p> 输出日志：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">body: &#123;<br><span class="hljs-string">&quot;model&quot;</span> : <span class="hljs-string">&quot;qwen-plus&quot;</span>,<br><span class="hljs-string">&quot;messages&quot;</span> : [ &#123;<br>    <span class="hljs-string">&quot;role&quot;</span> : <span class="hljs-string">&quot;user&quot;</span>,<br>    <span class="hljs-string">&quot;content&quot;</span> : <span class="hljs-string">&quot;你是志愿填报小助手，耐心细致又周到。你是谁？&quot;</span><br>&#125; ],<br><span class="hljs-string">&quot;stream&quot;</span> : <span class="hljs-literal">true</span>,<br><span class="hljs-string">&quot;stream_options&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;include_usage&quot;</span> : <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="会话记忆"><a href="#会话记忆" class="headerlink" title="会话记忆"></a>会话记忆</h2><p>大模型是<strong>不具备记忆能力</strong>的，想让大模型记住之前的内容，需要把之前聊天的内容与新的提示词一起发给大模型。langchain4j中实现会话记忆的原理是，在web后端设置一个存储对象，用于存储用户消息与大模型的回答，并在用户持续问答中，将存储对对象一起输入给大模型</p><p><img src="/2025/08/23/LangChain4j%E5%AE%9E%E8%B7%B5/chatmemory1.png" alt="基于存储对象实现会话记忆"></p><p>实现流程：</p><ol><li>在配置类中构建会话记忆对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构建会话记忆对象</span><br> <span class="hljs-meta">@Bean</span><br> <span class="hljs-keyword">public</span> ChatMemory <span class="hljs-title function_">chatMemory</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-type">MessageWindowChatMemory</span> <span class="hljs-variable">memory</span> <span class="hljs-operator">=</span> MessageWindowChatMemory.builder()<br>             .maxMessages(<span class="hljs-number">20</span>)<span class="hljs-comment">//最大存储的会话记录个数</span><br>             .build();<br>     <span class="hljs-keyword">return</span> memory;<br> &#125;<br></code></pre></td></tr></table></figure></li><li>在接口上的chatMemory注解中配置会话记忆对象 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AiService(</span><br><span class="hljs-meta">        wiringMode = AiServiceWiringMode.EXPLICIT,  //手动装配</span><br><span class="hljs-meta">        chatModel = &quot;openAiChatModel&quot;, //指定模型</span><br><span class="hljs-meta">        streamingChatModel = &quot;openAiStreamingChatModel&quot;,</span><br><span class="hljs-meta">        chatMemory = &quot;chatMemory&quot;// 配置会话记忆对象</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConsultantService</span>&#123; ... &#125;<br></code></pre></td></tr></table></figure></li></ol><p>请求日志：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">body<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;model&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;qwen-plus&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;messages&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;role&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你是传智教育提供的专业的AI志愿填报顾问，可以给用户提供如下功能...(略)&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;role&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;电子科大在哪里&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;role&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;assistant&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;电子科技大学（简称“电子科大”）位于中国四川省成都市，是一所著名的高等学府，以信息与电子类学科为核心，工、理、管、文、法等多学科协调发展的研究型大学。\n\n该校是中国“双一流”、“985工程”、“211工程”重点建设高校之一，培养了大量电子信息类高层次人才，在国内外享有很高的声誉。\n\n如果你还希望了解电子科技大学的录取规则、专业录取情况、奖学金设置、食宿条件等信息，也可以告诉我，我会为你提供详细资料。\n\n志愿填报需要考虑的因素有很多，如果要得到专业的志愿填报指导，建议您预约一个一对一的指导服务，是否需要预约？&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;role&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;他的一流专业是什么&quot;</span><br>  <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;stream&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;stream_options&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;include_usage&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><hr><h3 id="会话记忆隔离"><a href="#会话记忆隔离" class="headerlink" title="会话记忆隔离"></a>会话记忆隔离</h3><p>在上一小节中，所有会话使用的是同一个记忆存储对象，在没有隔离的情况下，会将所有用户的会话存储到会话记忆对象中，不同的用户的会话会混淆在一起。</p><p>为了实现会话记忆隔离，通过设置memoryId来实现</p><p><img src="/2025/08/23/LangChain4j%E5%AE%9E%E8%B7%B5/chatmemory2.png" alt="会话记忆隔离"></p><p>实现流程：</p><ol><li>定义会话记忆对象提供者<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构建会话记忆提供者ChatMemoryProvider对象</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ChatMemoryProvider <span class="hljs-title function_">chatMemoryProvider</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ChatMemoryProvider</span> <span class="hljs-variable">chatMemoryProvider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatMemoryProvider</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> ChatMemory <span class="hljs-title function_">get</span><span class="hljs-params">(Object memoryId)</span> &#123;<br>            <span class="hljs-keyword">return</span> MessageWindowChatMemory.builder()<br>                    .id(memoryId)<br>                    .maxMessages(<span class="hljs-number">20</span>)<br>                    .build();<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">return</span> chatMemoryProvider;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>配置会话记忆对象提供者<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AiService(</span><br><span class="hljs-meta">    wiringMode = AiServiceWiringMode.EXPLICIT,  //手动装配</span><br><span class="hljs-meta">    chatModel = &quot;openAiChatModel&quot;, //指定模型</span><br><span class="hljs-meta">    streamingChatModel = &quot;openAiStreamingChatModel&quot;,</span><br><span class="hljs-meta">    chatMemoryProvider = &quot;chatMemoryProvider&quot; //配置会话记忆提供者对象</span><br><span class="hljs-meta">)</span><br></code></pre></td></tr></table></figure></li><li>ConsultantService接口方法中添加参数memoryId<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConsultantService</span> &#123;<br>    <span class="hljs-comment">// 用于聊天的方法</span><br>    <span class="hljs-meta">@SystemMessage(fromResource = &quot;system.txt&quot;)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;String&gt; <span class="hljs-title function_">chat</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@MemoryId</span> String memoryId,</span><br><span class="hljs-params">        <span class="hljs-meta">@UserMessage</span> String message</span><br><span class="hljs-params">    )</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Controller中chat接口接收memoryId<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/chat&quot;,produces = &quot;text/html;charset=utf-8&quot;)</span><br><span class="hljs-keyword">public</span> Flux&lt;String&gt; <span class="hljs-title function_">chat</span><span class="hljs-params">(String memoryId,String message)</span>&#123;<br>    Flux&lt;String&gt; result = consultantService.chat(memoryId, message);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>前端页面请求传递memoryId<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">const response = await fetch(`/chat?message=$&#123;encodeURIComponent(userMessage.content)&#125;&amp;memoryId=$&#123;memoeryId.value&#125;`, &#123;signal: controller.signal&#125;);<br></code></pre></td></tr></table></figure></li></ol><h3 id="会话记忆持久化"><a href="#会话记忆持久化" class="headerlink" title="会话记忆持久化"></a>会话记忆持久化</h3><p>前面方法中，对于会话记忆，只要后端重启，会话记忆就丢失了。产生的原因是，在之前构建的存储对象是MessageWindowChatMemory对象，用于维护会的是ChatMemoryStore接口，它默认使用的是SingleSlotChatMemoryStore实现类来维护会话记忆，在其中使用ArrayList来存储会话，他是保存在内存中的，所以会丢失。</p><p>解决方案：我们自己提供一个ChatMemoryStore的实现类，在实现类中把消息存储到其他地方，比如redis，然后将该实现类交给MessageWindowChatMemory来使用。</p><p>实现流程：</p><ol><li>准备redis环境</li><li>引入redis起步依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--redis依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>配置redis连接信息<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure></li><li><strong>提供ChatMemoryStore实现类</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">redisChatMemoryStore</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ChatMemoryStore</span> &#123;<br><br>     <span class="hljs-meta">@Autowired</span><br>     <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> List&lt;ChatMessage&gt; <span class="hljs-title function_">getMessages</span><span class="hljs-params">(Object memoryId)</span>   &#123;<br>         <span class="hljs-comment">// 获取会话消息</span><br>         <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(memoryId.toString());<br>         <span class="hljs-comment">// 把json字符串转化为List&lt;ChatMessage&gt;，利用langchain4j提供的反序列化方法</span><br>         List&lt;ChatMessage&gt; list = ChatMessageDeserializer.messagesFromJson(json);<br>         <span class="hljs-keyword">return</span> list;<br>     &#125;<br><br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateMessages</span><span class="hljs-params">(Object memoryId, List&lt;ChatMessage&gt; list)</span> &#123;<br>         <span class="hljs-comment">// 更新会话消息</span><br>         <span class="hljs-comment">// 1. 把list转化成json格式数据，利用langchain4j提供的序列化方法</span><br>         <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> ChatMessageSerializer.messagesToJson(list);<br>         <span class="hljs-comment">// 2. 把json数据存储到redis中</span><br>         stringRedisTemplate.opsForValue().set(memoryId.toString(), json, Duration.ofDays(<span class="hljs-number">3</span>));<br>     &#125;<br><br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteMessages</span><span class="hljs-params">(Object memoryId)</span> &#123;<br>         <span class="hljs-comment">// 删除会话消息</span><br>         stringRedisTemplate.delete(memoryId.toString());<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li><strong>配置ChatMemoryStore</strong> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonConfig</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ChatMemoryStore redisChatMemoryStore;<br>    <span class="hljs-comment">//构建会话记忆提供者ChatMemoryProvider对象</span><br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ChatMemoryProvider <span class="hljs-title function_">chatMemoryProvider</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ChatMemoryProvider</span> <span class="hljs-variable">chatMemoryProvider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatMemoryProvider</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> ChatMemory <span class="hljs-title function_">get</span><span class="hljs-params">(Object memoryId)</span> &#123;<br>                <span class="hljs-keyword">return</span> MessageWindowChatMemory.builder()<br>                        .id(memoryId)<br>                        .maxMessages(<span class="hljs-number">20</span>)<br>                        .chatMemoryStore(redisChatMemoryStore)<br>                        .build();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">return</span> chatMemoryProvider;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="RAG知识库"><a href="#RAG知识库" class="headerlink" title="RAG知识库"></a>RAG知识库</h1><blockquote><p>理论知识链接：<a href="https://hejiaman.github.io/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/">《大规模语言模型理论与实践》RAG章节笔记</a></p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>RAG (Retrieval-augmented Generation)，检索增强生成。通过<strong>检索外部知识库</strong>的方式增强大模型的生成能力 </p><p>RAG的知识库采取向量数据库的形式，包括Milvus，Chroma，Pinecone，RedisSearch，pgvector…</p><p>RAG 过程分为两个不同的阶段：索引和检索。</p><p>在<strong>索引阶段</strong>，文档会被预处理，以便在检索阶段进行高效搜索。首先文档进入文本分割器进行切分，形成片段，将片段输入embedding模型生成嵌入向量，最后将这些向量存储到向量数据库中。</p><p><img src="/2025/08/23/LangChain4j%E5%AE%9E%E8%B7%B5/rag1.png" alt="Rag索引阶段流程"></p><p><strong>检索阶段</strong>通常在线进行，当用户提交一个应该使用索引文档回答的问题时。用户的问题首先被转换为查询向量，然后检索数据库中与查询向量余弦相似度较大（相似度较高）的片段，最后再结合用户问题和检索出的片段一起发送给大模型。</p><p><img src="/2025/08/23/LangChain4j%E5%AE%9E%E8%B7%B5/rag2.png" alt="Rag检索阶段流程"></p><h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="索引阶段：构建向量数据库操作对象"><a href="#索引阶段：构建向量数据库操作对象" class="headerlink" title="索引阶段：构建向量数据库操作对象"></a>索引阶段：构建向量数据库操作对象</h3><p>实现流程：</p><ol><li>引入依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--rag-easy依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>dev.langchain4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>langchain4j-easy-rag<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.1-beta6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>加载知识数据文档<ol><li>在resource&#x2F;content中导入document</li></ol></li><li>构建向量数据库操作对象</li><li>把文档切割、向量化并存储到向量数据库中 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 构建向量数据库操作对象</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> EmbeddingStore <span class="hljs-title function_">store</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 注意embeddingStore对象已经被依赖自动注入，所以这里不能叫embeddingStore，使用store这个名字</span><br>    <span class="hljs-comment">// 1. 加载文档进内存</span><br>    List&lt;Document&gt; documents = ClassPathDocumentLoader.loadDocuments(<span class="hljs-string">&quot;content&quot;</span>);<br>    <span class="hljs-comment">// 2. 构建向量数据库操作对象</span><br>    <span class="hljs-type">InMemoryEmbeddingStore</span> <span class="hljs-variable">store</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryEmbeddingStore</span>();<br>    <span class="hljs-comment">// 3. 构建EmbeddingStoreIngestor对象，完成文档切割和向量化，然后存储到数据库中</span><br>    <span class="hljs-type">EmbeddingStoreIngestor</span> <span class="hljs-variable">ingestor</span> <span class="hljs-operator">=</span> EmbeddingStoreIngestor.builder()<br>            .embeddingStore(store)<br>            .build();<br>    ingestor.ingest(documents);<br><br>    <span class="hljs-keyword">return</span> store;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="检索阶段：构建向量数据库检索对象"><a href="#检索阶段：构建向量数据库检索对象" class="headerlink" title="检索阶段：构建向量数据库检索对象"></a>检索阶段：构建向量数据库检索对象</h3><p>实现流程</p><ol><li>构建向量数据库检索对象 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 构建向量数据库检索对象</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ContentRetriever  <span class="hljs-title function_">contentRetriever</span><span class="hljs-params">(EmbeddingStore store)</span>&#123;<br>    <span class="hljs-keyword">return</span> EmbeddingStoreContentRetriever.builder()<br>            .embeddingStore(store)  <span class="hljs-comment">// 向量数据库操作对象</span><br>            .minScore(<span class="hljs-number">0.5</span>)  <span class="hljs-comment">//最小余弦相似度分数</span><br>            .maxResults(<span class="hljs-number">3</span>)  <span class="hljs-comment">//最大查询结果数量</span><br>            .build();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>配置向量数据库检索对象 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AiService(</span><br><span class="hljs-meta">    contentRetriever = &quot;contentRetriever&quot; //配置向量数据库检索对象</span><br><span class="hljs-meta">    )</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h2><ol><li><p>文档加载器</p><p>用于将磁盘或网络中的数据加载进程序。</p><ul><li>FileSystemDocumentLoader，根据本地磁盘绝对路径加载</li><li>ClassPathDocumentLoader，相对类路径加载</li><li>UrlDocumentLoader，根据url路径加载</li></ul></li><li><p>文档解析器</p><p> 用于解析文档加载器加载进内存的内容，将非文本数据转化为纯文本</p><ul><li>TextDocumentParser，解析纯文本格式的文件</li><li>ApachPdfBoxDocumentParser，解析pdf格式文件，使用时，需要引入相关依赖langchain4j-document-parser-apache-pdfbox，然后在加载文档进内存步骤中，指定文档解析器：List<Document> documents &#x3D; ClassPathDocumentLoader.loadDocuments(“content”,new ApachePdfBoxDocumentParser());</Document></li><li>ApachPoiDocumentParser，解析微软的office文件，比如doc,ppt,xls</li><li>ApacheTikaDocumentParser(default)，几乎可以解析所有格式文件</li></ul></li><li><p>文档分割器  </p><p>用于将大文档，切割成小片段</p><ul><li>DocumentByParagraphSplitter，按照段落分割文本</li><li>DocumentByLineSplitter，按照行分割文本</li><li>DocumentBySentenceSplitter，按照句子分割文本</li><li>DocumentByWordSplitter，按照词分割文本</li><li>DocumentByCharacterSplitter，按照固定数量字符分割文本</li><li>DocumentByRegexSplitter，按照正则表达式分割文本</li><li>递归：DocumentSplitters.recursive(…)，默认，递归分割，优先段落分割，再按照行，句子，词进行分割</li></ul><p> 实现步骤：</p><ol><li><p>构建文本分割器对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DocumentSplitter</span> <span class="hljs-variable">documentSplitter</span> <span class="hljs-operator">=</span> DocumentSplitters.recursive(每个片段最大容纳字符，两个片段重叠字符数)<br></code></pre></td></tr></table></figure></li><li><p>设置文本分割器对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构建EmbeddingStoreIngestor对象，完成文档切割和向量化，然后存储到数据库中</span><br><span class="hljs-type">EmbeddingStoreIngestor</span> <span class="hljs-variable">ingestor</span> <span class="hljs-operator">=</span> EmbeddingStoreIngestor.builder()<br>        .documentSplitter(ds) <span class="hljs-comment">//设置文本分割器</span><br>        .embeddingStore(store)<br>        .build();<br>ingestor.ingest(documents);<br></code></pre></td></tr></table></figure></li></ol></li><li><p>向量模型</p><p>用于将文档分割后的片段进行向量化，或者查询时把用户输入的内容向量化</p><p>实现步骤：</p><ol><li>配置向量模型信息(阿里云向量模型：通用文本向量-v3)</li></ol> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">embedding-model:</span><br>  <span class="hljs-attr">base-url:</span> <span class="hljs-string">https://dashscope.aliyuncs.com/compatible-mode/v1</span><br>  <span class="hljs-attr">api-key:</span> <span class="hljs-string">$&#123;API-KEY&#125;</span><br>  <span class="hljs-attr">model-name:</span> <span class="hljs-string">text-embedding-v3</span><br>  <span class="hljs-attr">log-requests:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">log-responses:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ol start="2"><li>设置EmbeddingModel</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> EmbeddingModel embeddingModel;<br>...<br><br><span class="hljs-comment">// 构建向量数据库操作对象</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> EmbeddingStore <span class="hljs-title function_">store</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Document&gt; documents = ClassPathDocumentLoader.loadDocuments(<span class="hljs-string">&quot;content&quot;</span>);<br>    <span class="hljs-type">InMemoryEmbeddingStore</span> <span class="hljs-variable">store</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryEmbeddingStore</span>();<br>    <span class="hljs-type">DocumentSplitter</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> DocumentSplitters.recursive(<span class="hljs-number">500</span>,<span class="hljs-number">100</span>);<br><br>    <span class="hljs-comment">// 构建向量数据库存储对象</span><br>    <span class="hljs-type">EmbeddingStoreIngestor</span> <span class="hljs-variable">ingestor</span> <span class="hljs-operator">=</span> EmbeddingStoreIngestor.builder()<br>            .documentSplitter(ds)<br>            .embeddingStore(store)<br>            .embeddingModel(embeddingModel)  <span class="hljs-comment">// 配置向量模型</span><br>            .build();<br>    ingestor.ingest(documents);<br><br>    <span class="hljs-keyword">return</span> store;<br>&#125;<br><span class="hljs-comment">// 构建向量数据库检索对象</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ContentRetriever  <span class="hljs-title function_">contentRetriever</span><span class="hljs-params">(EmbeddingStore store)</span>&#123;<br>    <span class="hljs-keyword">return</span> EmbeddingStoreContentRetriever.builder()<br>            .embeddingStore(store)<br>            .minScore(<span class="hljs-number">0.5</span>)  <br>            .maxResults(<span class="hljs-number">3</span>)  <br>            .embeddingModel(embeddingModel) <span class="hljs-comment">// 配置向量模型</span><br>            .build();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：直接参考教程后，发生了报错，原因是使用的向量模型再接口下每次最多只能处理10条文本，而此时把整个文档传入了EmbeddingStoreIngestor ingestor，超出限制，导致400错误</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Caused by: dev.langchain4j.exception.HttpException: <span class="hljs-number">400</span> Bad Request: <span class="hljs-string">&quot;&#123;&quot;</span>erro<span class="hljs-string">r&quot;:&#123;&quot;</span>code<span class="hljs-string">&quot;:&quot;</span>InvalidParamete<span class="hljs-string">r&quot;,&quot;</span>param<span class="hljs-string">&quot;:null,&quot;</span>message<span class="hljs-string">&quot;:&quot;</span>&lt;<span class="hljs-number">400</span>&gt; InternalError.Algo.InvalidParameter: Value error, batch size <span class="hljs-keyword">is</span> invalid, it should <span class="hljs-keyword">not</span> be larger than <span class="hljs-number">10.</span>: <span class="hljs-built_in">input</span>.contents<span class="hljs-string">&quot;,&quot;</span><span class="hljs-built_in">type</span><span class="hljs-string">&quot;:&quot;</span>InvalidParamete<span class="hljs-string">r&quot;&#125;,&quot;</span><span class="hljs-built_in">id</span><span class="hljs-string">&quot;:&quot;</span>22bff643-9bc9-<span class="hljs-number">9164</span>-b238-e647ecfa0ff1<span class="hljs-string">&quot;,&quot;</span>request_id<span class="hljs-string">&quot;:&quot;</span>22bff643-9bc9-<span class="hljs-number">9164</span>-b238-e647ecfa0ff1<span class="hljs-string">&quot;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>解决方案：先通过用for循环进行添加，但是还是报错，可能因为，即使每次传输10个子文档，每一个子文档还是被拆分成了超过10个的片段，传给embedding模型还是超出限制了。</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">batchSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; documents.size(); i += batchSize) &#123;<br>    List&lt;Document&gt; batch = documents.subList(i, Math.min(i + batchSize, documents.size()));<br>    ingestor.ingest(batch);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>修改文档格式为pdf，转入pdf的解析器，就不报错了</p></blockquote><blockquote><p>ps：后面有讲到这点问题，可以通过在application.yml中配置embedding-model的max-segments-per-batch: 10</p></blockquote></li><li><p>EmbeddingStore</p><p>用于操作向量数据库（添加，检索）</p><p>采用RedisSearch存储向量数据，步骤如下：</p><ol><li>准备向量数据库</li><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入langchain4j对redis向量数据库的支持--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>dev.langchain4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>langchain4j-community-redis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.1-beta6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>配置向量数据库信息</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">langchain4j:</span><br>  <span class="hljs-attr">community:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><ol start="4"><li>注入RedisEmbeddingStore并使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注入RedisEmbeddingStore</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisEmbeddingStore redisEmbeddingStore;<br>...<br><br><span class="hljs-comment">// 构建向量数据库操作对象</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> EmbeddingStore <span class="hljs-title function_">store</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Document&gt; documents = ClassPathDocumentLoader.loadDocuments(<span class="hljs-string">&quot;content&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApachePdfBoxDocumentParser</span>());<br>    <span class="hljs-type">DocumentSplitter</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> DocumentSplitters.recursive(<span class="hljs-number">500</span>,<span class="hljs-number">100</span>);<br><br>    <span class="hljs-type">EmbeddingStoreIngestor</span> <span class="hljs-variable">ingestor</span> <span class="hljs-operator">=</span> EmbeddingStoreIngestor.builder()<br>            .documentSplitter(ds)<br>            .embeddingStore(redisEmbeddingStore) <span class="hljs-comment">// 使用RedisEmbeddingStore</span><br>            .embeddingModel(embeddingModel)<br>            .build();<br>    ingestor.ingest(documents);<br>    <span class="hljs-keyword">return</span> redisEmbeddingStore;<br>&#125;<br><br><span class="hljs-comment">// 构建向量数据库检索对象</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ContentRetriever  <span class="hljs-title function_">contentRetriever</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> EmbeddingStoreContentRetriever.builder()<br>            <span class="hljs-comment">//.embeddingStore(store)</span><br>            .embeddingStore(redisEmbeddingStore)<br>            .minScore(<span class="hljs-number">0.5</span>)  <span class="hljs-comment">//最小余弦相似度分数</span><br>            .maxResults(<span class="hljs-number">3</span>)  <span class="hljs-comment">//最大查询结果数量</span><br>            .embeddingModel(embeddingModel) <span class="hljs-comment">// 使用RedisEmbeddingStore</span><br>            .build();<br>&#125;<br><br></code></pre></td></tr></table></figure><p> 用RedisSearch实现了向量数据库：</p><p><img src="/2025/08/23/LangChain4j%E5%AE%9E%E8%B7%B5/rag3.png" alt="实现redis向量数据库"></p><blockquote><p>当我们已经在外部的向量数据库存储了数据，就没必要让<br> @Bean<br> public EmbeddingStore store(){}这个方法每次都执行了，可以注释掉@Bean。但第一次构建索引必须要执行哈。</p></blockquote></li></ol><ul><li>RAG的一些问题：<ul><li>RAG文本拆分和检索的质量很大程度会影响最终的结果</li><li>查询范围、质量和时间之间的权衡</li><li>检索出的参考文本无法回答用户问题如何处理</li></ul></li></ul><h1 id="Tools工具-Function-Calling"><a href="#Tools工具-Function-Calling" class="headerlink" title="Tools工具(Function Calling)"></a>Tools工具(Function Calling)</h1><p>添加function calling后的流程示意:</p><p><img src="/2025/08/23/LangChain4j%E5%AE%9E%E8%B7%B5/fc1.png" alt="流程图"></p><ol><li><p>准备工具方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReservationTool</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ReservationService reservationService;<br><br><span class="hljs-comment">//1. 工具方法：添加预约信息</span><br><span class="hljs-meta">@Tool(&quot;预约志愿填报服务&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addReservation</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@P(&quot;考生姓名&quot;)</span> String name,</span><br><span class="hljs-params">        <span class="hljs-meta">@P(&quot;考生性别&quot;)</span> String gender,</span><br><span class="hljs-params">        <span class="hljs-meta">@P(&quot;考生手机号码&quot;)</span> String phone,</span><br><span class="hljs-params">        <span class="hljs-meta">@P(&quot;预约沟通时间，格式为：yyyy-MM-dd&#x27;T&#x27;HH:mm&quot;)</span> String communicationTime,</span><br><span class="hljs-params">        <span class="hljs-meta">@P(&quot;考生省份&quot;)</span> String province,</span><br><span class="hljs-params">        <span class="hljs-meta">@P(&quot;考生预估分数&quot;)</span> Integer estimatedScore</span><br><span class="hljs-params"></span><br><span class="hljs-params">)</span>&#123;<br>    <span class="hljs-type">Reservation</span> <span class="hljs-variable">reservation</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reservation</span>(<span class="hljs-literal">null</span>, name, gender, phone, LocalDateTime.parse(communicationTime), province, estimatedScore);<br>    reservationService.insert(reservation);<br>&#125;<br><br><span class="hljs-comment">//2. 工具方法：查询预约信息</span><br><span class="hljs-meta">@Tool(&quot;根据考生手机号查询预约信息&quot;)</span><br><span class="hljs-keyword">public</span> Reservation <span class="hljs-title function_">findByPhone</span><span class="hljs-params">(<span class="hljs-meta">@P(&quot;考生手机号&quot;)</span>String phone )</span>&#123;<br>    <span class="hljs-keyword">return</span> reservationService.findByPhone(phone);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置工具方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AiService(</span><br><span class="hljs-meta">     wiringMode = AiServiceWiringMode.EXPLICIT,  </span><br><span class="hljs-meta">     chatModel = &quot;openAiChatModel&quot;, </span><br><span class="hljs-meta">     streamingChatModel = &quot;openAiStreamingChatModel&quot;,</span><br><span class="hljs-meta">     chatMemoryProvider = &quot;chatMemoryProvider&quot;, </span><br><span class="hljs-meta">     contentRetriever = &quot;contentRetriever&quot; ,</span><br><span class="hljs-meta">     tools = &quot;reservationTool&quot; //配置工具方法</span><br><span class="hljs-meta"> )</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConsultantService</span> &#123;...&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>LLM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus学习记录</title>
    <link href="/2025/08/21/MyBatis-Plus%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/08/21/MyBatis-Plus%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><blockquote><p> 官方文档链接🔗：<a href="https://baomidou.com/introduce/">MyBatis-Plus 帮助文档</a></p></blockquote><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><ol><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>定义Mapper继承MyBatis-Plus提供的BaseMapper接口，<strong>指定泛型为操作的实体类</strong></li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">UserMapper</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">BaseMapper</span>&lt;<span class="hljs-symbol">User</span>&gt;&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h2><p>默认情况下：</p><ul><li>以类名驼峰转下划线作为表名</li><li>把名为id的字段作为主键</li><li>将变量名驼峰转下划线作为表的字段名</li></ul><p>不符合默认规定时候，可用注解声明，常用注解为：</p><ol><li><p><strong>@TableName</strong>：用来指定操作表明</p></li><li><p><strong>@TableId</strong>：用来指定表中的主键字段信息</p><ol><li>IdType枚举：AUTO数据库自增长,INPUT通过set自行输入,ASSIGN_ID分配ID，由MP生成id</li></ol></li><li><p><strong>@TableField</strong>：用来指定表中的普通字段信息，使用场景如下</p><ol><li>成员变量名与数据库字段名不一致时</li><li>成员变量名以is开头，且是布尔值   eg. boolean isMarried</li><li>成员变量名与数据库关键字冲突  eg. long order</li><li>成员变量不是数据库字段时</li></ol></li></ol><h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h1><h2 id="条件构造器-Wrapper"><a href="#条件构造器-Wrapper" class="headerlink" title="条件构造器 Wrapper"></a>条件构造器 Wrapper</h2><p><strong>案例1</strong>：查询名字带o，存款大于等于1000的人的id，username，info，balance字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id,username,info,balance <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%o%&#x27;</span> <span class="hljs-keyword">and</span> balance <span class="hljs-operator">&gt;=</span> <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>利用MyBatis-Plus的QueryWrapper实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 构建查询条件</span><br>QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;()<br>        .select(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;balance&quot;</span>)<br>        .like(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>).ge(<span class="hljs-string">&quot;balance&quot;</span>,<span class="hljs-number">1000</span>)<br><span class="hljs-comment">// 查询</span><br>List&lt;User&gt; users = userMapper.selectList(wrapper)<br></code></pre></td></tr></table></figure><p><strong>案例2</strong>：更新用户名为jack的用户的月为2000</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> tb_user <span class="hljs-keyword">set</span> balance <span class="hljs-operator">=</span> <span class="hljs-number">2000</span> <span class="hljs-keyword">where</span> username <span class="hljs-operator">=</span> jack<br></code></pre></td></tr></table></figure><p>利用MyBatis-Plus的QueryWrapper实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 要更新的数据</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setBalance(<span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">// 更新条件</span><br>QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;jack&quot;</span>)<br><br><span class="hljs-comment">// 更新</span><br> userMapper.update(user, wrapper)<br></code></pre></td></tr></table></figure><p><strong>案例3</strong>：更新id为1，2，4的用户余额，扣200</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> tb_user <span class="hljs-keyword">set</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">-</span> <span class="hljs-number">200</span> <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>利用MyBatis-Plus的UpdateWrapper实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Long&gt; ids = List.of(<span class="hljs-number">1L</span>,<span class="hljs-number">2L</span>,<span class="hljs-number">4L</span>);<br><span class="hljs-comment">// 更新条件</span><br>UpdateWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateWrapper</span>&lt;User&gt;()<br>        .setSql(<span class="hljs-string">&quot;balance = balance - 200&quot;</span>)<br>        .in(<span class="hljs-string">&quot;id&quot;</span>,ids);<br><span class="hljs-comment">// 更新</span><br> userMapper.update(<span class="hljs-literal">null</span>, wrapper)<br></code></pre></td></tr></table></figure><p>利用LambdaWrapper进行改造，避免字符串硬编码 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 构建查询条件</span><br>LambdaQueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;User&gt;()<br>        .select(User::getId,User::getUsername,User::getInfo,User::getBalance)<br>        .like(User::getUsername,<span class="hljs-string">&quot;0&quot;</span>).ge(User::getBalance,<span class="hljs-number">1000</span>)<br><span class="hljs-comment">// 查询</span><br>List&lt;User&gt; users = userMapper.selectList(wrapper)<br></code></pre></td></tr></table></figure><h2 id="自定义SQL"><a href="#自定义SQL" class="headerlink" title="自定义SQL"></a>自定义SQL</h2><p>企业中要求不能在业务层编写SQL，但想简化编程，我们可以利用Wrapper来构建复杂的where条件，然后自定义SQL语句中剩下部分，步骤如下：</p><ol><li>基于Wrapper构建where条件</li><li>在mapper方法参数中用Param注解声明Wrapper变量名称，<strong>必须是ew</strong></li><li>自定义SQL，并使用Wrapper条件</li></ol><p><strong>案例</strong>：更新id为1，2，4的用户余额，扣200</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 更新条件</span><br>List&lt;Long&gt; ids = List.of(<span class="hljs-number">1L</span>,<span class="hljs-number">2L</span>,<span class="hljs-number">4L</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">amount</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-comment">// 2. 定义条件</span><br>QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().in(<span class="hljs-string">&quot;id&quot;</span>,ids)<br><span class="hljs-comment">// 3. 调用自定义SQL方法</span><br>userMapper.updateBalanceByIds(wrapper,amount)<br><br><span class="hljs-comment">//创建方法</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBalanceByIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ew&quot;)</span> QueryWrapper&lt;User&gt; wrapper,<span class="hljs-meta">@Param(&quot;amount&quot;)</span> <span class="hljs-type">int</span> amount)</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在UserMapper.xml中完成SQL --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBlanceByIds&quot;</span>&gt;</span><br>    UPDATE tb_user SET balance = balance - #&#123;amount&#125; $&#123;ew.customSqlSegment&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h2><p>MP的Service接口实现流程：</p><ol><li>我们的自定义接口需要继承IService接口</li><li>我们的实现类需要去继承ServiceImpl实现类</li></ol><p>继承结构图如下所示：</p><p><img src="/../images/MyBatis-Plus%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1.png" alt="Service接口继承示意图"></p><h3 id="IService的Lambda查询"><a href="#IService的Lambda查询" class="headerlink" title="IService的Lambda查询"></a>IService的Lambda查询</h3><p><strong>案例</strong>：实现一个根据复杂条件查询用户的接口，条件如下：</p><pre><code class="hljs">    - name：用户名关键字，可以为空    - status：用户状态，可以为空    - minBalance：最小余额，可以为空    - maxBalance：最大余额，可以为空</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">queryUsers</span><span class="hljs-params">(String name, Integer status, Integer minBlance, Integer maxBalance)</span>&#123;<br>    <span class="hljs-keyword">return</span> lambdaQuery()<br>            .like(name != <span class="hljs-literal">null</span> ,User::getUsername, name)<br>            .eq(status != <span class="hljs-literal">null</span>,User::getStatus, status)<br>            .ge(minBlance != <span class="hljs-literal">null</span>,User::getMinBalance, maxBalance)<br>            .le(maxBalance != <span class="hljs-literal">null</span>,User::getMaxBalance, maxBalance)<br>            .list();<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="IService的批处理"><a href="#IService的批处理" class="headerlink" title="IService的批处理"></a>IService的批处理</h3><p>方案对比</p><ul><li><p>普通for循环插入新增用户，速度极差，不推荐</p></li><li><p>MP的批量新增，基于预编译的批处理，性能不错</p></li><li><p>配置jdbc参数，开启mysql的rewriteBatchedStatements&#x3D;True参数，性能最好</p></li></ul><h1 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h1><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>推荐插件：MyBatisPlus</p><p>Config Database -&gt; 连接数据库<br>Code Generator -&gt; 配置相关参数，如下图</p><p><img src="/2025/08/21/MyBatis-Plus%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/2.png" alt="相关配置项说明"></p><h2 id="静态工具"><a href="#静态工具" class="headerlink" title="静态工具"></a>静态工具</h2><p>Db是一个提供静态方法的工具类，用于简化数据库操作，无需直接使用Mapper或 Service对象，在一些场景下可以更方便地进行CRUD。</p><ul><li>在工具类或非Spring管理的类中操作数据库</li><li>简单的CRUD操作</li><li>快速开发或脚本场景，避免注入多个Service&#x2F;Mapper</li></ul><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p>基于代码逻辑模拟删除效果，但不会真正删除数据，通过在表中添加<strong>删除标识字段</strong>来表示是否删除，当删除数据的时候将标识置为1，查询时，判断数据删除状态，只查询标记为0的数据。</p><p>应用场景：</p><ul><li>需要保留删除记录用于统计时，比如用户数据，订单记录等</li><li>软删除+回收站功能</li><li>日志需求，追踪删除时间、删除数据，便于审计</li></ul><p>使用方法：</p><p>在application.yaml中配置逻辑删除的字段名称和值就可以：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>        <span class="hljs-attr">global-config:</span><br>                <span class="hljs-attr">db-config:</span><br>                        <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">flag</span>  <span class="hljs-comment"># 全局逻辑删除的实体字段名，字段类型可以是boolean、integer</span><br>                        <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span>  <span class="hljs-comment">#逻辑已删除值(默认为1)</span><br>                        <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span>   <span class="hljs-comment">#逻辑未制除值(默认为0)</span><br></code></pre></td></tr></table></figure><p>缺点：</p><ul><li>数据库表中的垃圾数据越来越多，影响查询效率</li><li>SQL语句全部需要对逻辑删除字段做判断，影响查询效率</li></ul><p>如果需要保留删除数据，推荐采用将数据迁移到其他表的方法</p><h2 id="枚举处理器"><a href="#枚举处理器" class="headerlink" title="枚举处理器"></a>枚举处理器</h2><p>某些表中字段可能是一个状态类，可以用枚举类去表示，将状态的数字用枚举类型去改写，代码可读性变好。但数据库中，仍然使用int类去表示状态，所以采用MP的枚举处理器MybatisEnumTypeHandler来解决类型转换的问题。</p><p>使用方法：</p><ol><li>在枚举类中对应数据库的属性值加上注解@EnumValue</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">GradeEnum</span> &#123;<br>    PRIMARY(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;小学&quot;</span>),<br>    SECONDARY(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;中学&quot;</span>),<br>    HIGH(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;高中&quot;</span>);<br><br>    <span class="hljs-meta">@EnumValue</span> <span class="hljs-comment">// 标记数据库存的值是code</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> code;<br>    pricate <span class="hljs-keyword">final</span> String desc;<br><br>    <span class="hljs-comment">// 其他属性...</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在application.yaml中配置全局枚举处理器</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">default-enum-type-handler:</span> <span class="hljs-string">xx.xx.xx.MyEnumTypeHandler</span><br></code></pre></td></tr></table></figure><ol start="3"><li>修改实体类的字段为枚举类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 比如这是一个User类</span><br><span class="hljs-keyword">private</span> GradeEnum grade; <span class="hljs-comment">// 年级</span><br></code></pre></td></tr></table></figure><h2 id="JSON处理器"><a href="#JSON处理器" class="headerlink" title="JSON处理器"></a>JSON处理器</h2><p>数据库中某些表中字段的数据类型为JSON格式，而在java中用String进行表示，为了能够提取出JSON中某些属性对应的值，可以在java中定义出相关的类进行提取，然后用JSON处理器AbstractJsonTypeHandler来解决数据库Json格式与类的转换。</p><p>使用方法：</p><ol><li>定义Json对应的实体类 eg. OtherInfo类</li><li>在数据库表对应的实体类中的属性上配置Json处理器@TableField(<strong>typeHandler</strong> &#x3D; JacksonTypeHandler.class)</li><li>开启映射注解@TableName(<strong>autoResultMap</strong> &#x3D; true)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-meta">@TableName(autoResultMap = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    ...<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 必须开启映射注解</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@TableName</span>(autoResultMap = true)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 选择对应的 JSON 处理器，并确保存在对应的 JSON 解析依赖包</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(typeHandler = JacksonTypeHandler.class)</span><br>    <span class="hljs-comment">// 或者使用 FastjsonTypeHandler</span><br>    <span class="hljs-comment">// @TableField(typeHandler = FastjsonTypeHandler.class)</span><br>    <span class="hljs-keyword">private</span> OtherInfo otherInfo;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h2><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><p>使用方法：</p><ol><li>在配置类中注册MyBatisPlus的核心插件，并添加分页插件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(&quot;scan.your.mapper.package&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加分页插件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 初始化核心插件</span><br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        <span class="hljs-comment">// 2. 添加分页插件</span><br>        <span class="hljs-type">PaginationInnerInterceptor</span> <span class="hljs-variable">pageIntercepter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL);<br>        pageIntercepter.setMaxLimit(<span class="hljs-number">1000L</span>); <span class="hljs-comment">// 设置分页上限（可选）</span><br>        <span class="hljs-comment">// 如果配置多个插件, 切记分页最后添加</span><br>        <span class="hljs-comment">// 如果有多数据源可以不配具体类型, 否则都建议配上具体的 DbType</span><br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>使用分页的API的demo</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPageQuery</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 1.查询（页码，每页条数）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">pageNo</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, pageSize = <span class="hljs-number">5</span>;<br>        <span class="hljs-comment">// 1.1.分页参数</span><br>        Page&lt;User&gt; page = Page.of(pageNo, pageSize);<br>        <span class="hljs-comment">// 1.2.排序参数，通过OrderItem来指定，false表示降序</span><br>        page.addOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>(<span class="hljs-string">&quot;balance&quot;</span>, <span class="hljs-literal">false</span>));<br>        <span class="hljs-comment">// 1.3.分页查询</span><br>        Page&lt;User&gt; p = userService.page(page);<br><br>        <span class="hljs-comment">// 2.总条数</span><br>        System.out.println(<span class="hljs-string">&quot;total=&quot;</span>+ p.getTotal());<br>        <span class="hljs-comment">// 3.总页数</span><br>        System.out.println(<span class="hljs-string">&quot;pages =&quot;</span>+ p.getPages());<br>        <span class="hljs-comment">// 4.分页数据</span><br>        List&lt;User&gt; records = p.getRecords();<br>        records.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通用分页实体"><a href="#通用分页实体" class="headerlink" title="通用分页实体*"></a>通用分页实体*</h3><p>核心思路：</p><ul><li><p>定义统一的查询实体PageQuery，实现查询方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageQuery</span> &#123;<br>      <span class="hljs-keyword">private</span> Integer pageNo; <span class="hljs-comment">//页码</span><br>      <span class="hljs-keyword">private</span> Integer pageSize; <span class="hljs-comment">//页容量</span><br>      <span class="hljs-keyword">private</span> String sortBy; <span class="hljs-comment">//排序字段</span><br>      <span class="hljs-keyword">private</span> Boolean isAsc; <span class="hljs-comment">//是否升序</span><br><br>      <span class="hljs-keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="hljs-title function_">toMpPage</span><span class="hljs-params">(orderItem ... items)</span>&#123;<br>              <span class="hljs-comment">// 1.分页条件</span><br>              Page&lt;T&gt; page =Page.of(pageNo, pageSize);<br>              <span class="hljs-comment">// 2.排序条件</span><br>              <span class="hljs-keyword">if</span>(strutil.isNotBlank(sortBy))&#123;<br>                      <span class="hljs-comment">// 不为空</span><br>                      page.addorder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>(sortBy isAsc));<br>              &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(items != <span class="hljs-literal">null</span>)&#123;<br>                      <span class="hljs-comment">// 为空，默认排序</span><br>                      page.addorder(items);<br>              &#125;<br>              <span class="hljs-keyword">return</span> page;<br>      &#125;<br><br>      <span class="hljs-keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="hljs-title function_">toMpPage</span><span class="hljs-params">(String defaltSortBy, Boolean defaultAsc)</span>&#123;<br>              <span class="hljs-keyword">return</span> toMpPage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>(defaltSortBy, defaultAsc));<br>      &#125;<br><br>      <span class="hljs-comment">// 常用的默认排序可以直接定义出来，方便使用</span><br>      <span class="hljs-keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="hljs-title function_">toMpPageDefaultSortByCreateTime</span><span class="hljs-params">()</span>&#123;<br>              <span class="hljs-keyword">return</span> toMpPage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>(<span class="hljs-string">&quot;create_time&quot;</span>, <span class="hljs-literal">false</span>));<br>      &#125;<br></code></pre></td></tr></table></figure></li><li><p>封装统一的返回实体PageDTO和返回方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageDTO</span>&lt;T&gt;&#123;<br>      <span class="hljs-keyword">private</span> Long total; <span class="hljs-comment">//总条数</span><br>      <span class="hljs-keyword">private</span> Long pages; <span class="hljs-comment">//总页数</span><br>      <span class="hljs-keyword">private</span> List&lt;T&gt; list; <span class="hljs-comment">//集合</span><br><br>      <span class="hljs-comment">// PO转VO对象返回</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;PO, VO&gt; PageDTO&lt;VO&gt; <span class="hljs-title function_">of</span><span class="hljs-params">(Page&lt;PO&gt; p, Class&lt;VO&gt; clazz)</span>&#123;<br>              PageDTO&lt;VO&gt; dto = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageDTO</span>&lt;&gt;();<br>              <span class="hljs-comment">// 总条数</span><br>              dto.setTotal(p.getTotal());<br>              <span class="hljs-comment">// 总页数</span><br>              dto.setPages(p.getPages());<br>              <span class="hljs-comment">// 当前页数据</span><br>              List&lt;PO&gt; records = p.getRecords();<br>              <span class="hljs-keyword">if</span>(CollUtil.isEmpty(records))&#123;<br>                      dto.setList(Collections.emptyList());<br>                      <span class="hljs-keyword">return</span> dto;<br>              &#125;<br>              <span class="hljs-comment">// 拷贝vo到po</span><br>              dto.setList(BeanUtil.copyToList(records, clazz));<br>              <span class="hljs-comment">// 返回</span><br>              <span class="hljs-keyword">return</span> dto;<br>      &#125;<br></code></pre></td></tr></table></figure></li><li><p>在需要分页查询的实体类中继承上述的实体，使用方法</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《大规模语言模型理论与实践》RAG章节笔记</title>
    <link href="/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>《大规模语言模型理论与实践》第二版：<a href="https://intro-llm.github.io/">原书资料链接🔗</a></p></blockquote><h2 id="RAG系统框架"><a href="#RAG系统框架" class="headerlink" title="RAG系统框架"></a>RAG系统框架</h2><p>RAG核心在于将<strong>外部检索</strong>与<strong>生成模块</strong>有机整合，通过动态引入外部知识来提升生成结果的准确性和可靠性。</p><p><img src="/../images/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/rag_frame.png" alt="RAG系统框架" title="RAG系统框架示意图">  </p><h2 id="RAG任务分级"><a href="#RAG任务分级" class="headerlink" title="RAG任务分级"></a>RAG任务分级</h2><p>根据任务认知处理层次划分，可分为显性事实查询（Explicit Facts Query）、隐性事实查询（Implicit Facts Query）、可解释推理查询（Interpretable Rationales Query）以及隐性推理查询（Hidden Rationales Query）等四个层级。</p><h2 id="模块化RAG架构"><a href="#模块化RAG架构" class="headerlink" title="模块化RAG架构"></a>模块化RAG架构</h2><p>同济大学王昊奋教授团队借鉴了模块化设计的思想，提出了模块化检索增强生成架构（Modular RAG）。原文连接：<a href="https://ojs.aaai.org/index.php/AAAI/article/view/29934">LLMEval: A Preliminary Study on How to Evaluate Large Language Models</a></p><p><img src="/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/model_rag.png" alt="Modular RAG 架构"></p><h3 id="索引模块"><a href="#索引模块" class="headerlink" title="索引模块"></a>索引模块</h3><p>该模块的核心任务是将文档划分为可管理的chunk（块），为后续的检索和生成提供组织良好的内容基础，</p><p>目前方法：</p><ul><li>块优化：<ol><li>向量块优化：用<strong>滑动窗口</strong>方法通过在相邻片段之间引入重叠区域</li><li>语义块切分：对文档分段，并对每一段<strong>生成嵌入向量</strong>，通过比较相邻段落的向量相似度进行合并</li><li>小到大：通过将用于检索的片段与用于生成的片段分开处理</li></ol></li><li>结构优化<ol><li>层次化索引：通过建立父节点和子节点之间的关联关系，将文档内容分解为不同层次的片段，并链接到相应的节点上</li><li>知识图谱索引：通过将文档组织为图结构，明确概念与实体之间的关系</li></ol></li></ul><h3 id="检索前优化"><a href="#检索前优化" class="headerlink" title="检索前优化"></a>检索前优化</h3><p>预检索模块通过对用户查询进行重构、扩展或语义优化，能够减少语言歧义和表述模糊，从而为下游检索任务提供更精准的输入。主要模块如下：</p><ol><li><p>查询扩展：通过将单一查询<strong>扩展</strong>为多个查询的方法，用以丰富查询的内容，从而弥补原始查询中可能缺乏的细节和语义信息</p></li><li><p>查询转换：对用户输入的查询进行<strong>语义优化</strong>、<strong>语言简化</strong>或<strong>结构调整</strong>，使其更加明确和精确，便于模型识别核心意图并生成相关答案</p></li><li><p>查询结构化：将用户的查询重新构建为适应不同数据类型，例如<strong>结构化数据</strong>（如表格和图形数据）的查询</p></li></ol><h2 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h2><p>检索模块需要能够高效地处理大量的文本数据，并且需要能够准确地识别和匹配查询和文档之间的语义相似性。目前的检索主要分为：稀疏检索、稠密检索和混合检索。</p><ol><li>稀疏检索</li></ol><p><img src="/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/1.png" alt="稀疏检索架构图"></p><p>其特点为：</p><ul><li>是一种基于统计特征的方法</li><li>通过将查询或文档转换为稀疏向量（大部分元素为0的向量）来实现检索</li><li>适用场景：大规模文档库的检索任务</li><li>优点：计算复杂度较低，在资源有限或者实时性要求较高的场景中表现突出</li><li>缺点：在捕捉复杂语义关系上存在局限性，无法有效处理同义词、上下文语意等深层语义信息</li></ul><ol start="2"><li>稠密检索</li></ol><p><img src="/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/2.png" alt="稠密检索架构图"></p><p>其特点为：</p><ul><li>通过DRL将查询或文档编码为稠密向量</li><li>依赖于预训练语言模型活特定的双塔模型生成语义嵌入</li><li>优点：具有强大的语义表达能力，可以处理同义词等深层语义信息</li><li>缺点：在计算成本和存储要求方面有局限性</li></ul><ol start="3"><li>混合检索</li></ol><p>将稀疏向量和稠密向量的得分进行融合活在检索流程中分阶段使用</p><p><img src="/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/3.png" alt="混合检索架构图"></p><h2 id="检索后优化"><a href="#检索后优化" class="headerlink" title="检索后优化"></a>检索后优化</h2><p>通过对检索内容进行后处理，解决“中间遗忘”、“噪声&#x2F;反事实”文本以及上下文窗口长度有限等问题。该部分的常见组成部分包括重排序（Rerank）、内容压缩以及内容选择等步骤。</p><ol><li><p>重排序<br>其主要目的是对检索到的文章片段（chunks）进行重新排序，以提升结果的相关性和多样性。</p><ol><li>基于规则：计算指标对chunk进行排序；指标包多样性，相关性和最大边际相关性</li><li>基于模型：计算chunk与查询之间的相关性来排序</li></ol></li><li><p>内容压缩<br>压缩的核心目标是通过内容压缩减少噪声，同时保留信息完整性，以提高语言模型的推理效率。</p><ol><li>通过小语言模型对检索内容进行对齐和预训练</li><li>利用大语言模型对检索内容进行评估</li></ol></li><li><p>内容选择<br>关键在于计算输入内容的自信息量（一种衡量内容信息价值的指标）</p></li></ol><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><p>生成模块是整个 RAG 系统的的核心模块，负责利用大语言模型结合用户查询与检索到的上<br>下文信息生成答案</p><h2 id="编排"><a href="#编排" class="headerlink" title="编排"></a>编排</h2><p>编排模块是RAG系统<strong>核心控制单元</strong>，负责在关键节点进行决策并动态选择后续步骤。主要模块包括路由（Routing）、调度（Scheduling）以及融合（Fusion）。</p><ol><li><p>路由<br>通过路由机制将查询分配到针对不同场景设计的特定管道中</p><ol><li>元数据路由：</li></ol><pre><code class="hljs"> a. 基于查询中提取的关键术语或实体，通过与预设关键词集合的匹配来优化路由流程 b. 适合对显性关键词高度敏感的场景 c. 匹配分数由关键词的重叠比例计算得出</code></pre><ol start="2"><li>语义路由</li></ol><pre><code class="hljs"> a. 依赖查询的语义信息，通过语言模型计算查询与预定义意图的匹配概率</code></pre><ol start="3"><li>混合路由</li></ol><pre><code class="hljs"> a. 通过引入权重因子，混合路由在元数据匹配和语义分析之间找到平衡点，从而实现更精确的路由选择</code></pre></li><li><p>调度<br>   调度模块的作用是识别关键节点，负责管理和协调系统的各个流程，是否需要启动进一步的检索等</p><ol><li>规则判定：</li></ol><pre><code class="hljs">a. 用于评估生成答案的质量并决定进一步的操作b. 通过评分机制对生成的答案进行质量评估，并根据预设的阈值判断是否继续或终止生成过程</code></pre><ol start="2"><li>LLM判断</li></ol><pre><code class="hljs">a. 利用LLM的上下文学习能力b. 通过对LLM进行微调</code></pre><ol start="3"><li>知识引导调度</li></ol><pre><code class="hljs">a. 通过知识图谱引导信息检索与生成过程</code></pre></li><li><p>融合<br>当系统拓宽检索范围或探索多条管道以提升生成内容的多样性时，融合模块负责高效<strong>整合</strong>各分支生成的信息。融合模块主要包含大语言模型融合、加权集成以及倒数排名融合等方法。</p><ol><li><p>大语言模型融合：<br>  利用大语言模型强大的分析与整合能力，将不同分支的信息进行统一处理。为了解决超出上下文窗口限制的长答案时，通过先对每个分支的答案进行<strong>摘要提取</strong>后再输入LLM的方式来进行整合。</p></li><li><p>加权集成：<br>  是一种基于多分支生成结果的加权选择方法，通过不同分支生成的词元（token）的加权值来综合选择最终输出。</p></li><li><p>倒数排名融合：<br>  它通过一种定制的<strong>加权平均方法</strong>，增强了整体预测性能与排名精度。适合处理模型或来源异构的场景。</p></li></ol></li></ol><h2 id="RAG系统模式"><a href="#RAG系统模式" class="headerlink" title="RAG系统模式"></a>RAG系统模式</h2><h3 id="线性模式"><a href="#线性模式" class="headerlink" title="线性模式"></a>线性模式</h3><p>线性模式是最简单且最常用的工作流模式，其流程可以分为几个核心模块，包括预检索（Pre-Retrieval）、检索、后检索（Post-Retrieval）以及生成模块。</p><p><img src="/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/4.png" alt="线性模型流程"></p><h3 id="条件模式"><a href="#条件模式" class="headerlink" title="条件模式"></a>条件模式</h3><p>条件模式是一种灵活的 RAG 流模式，其核心特点是在不同条件下选择不同的 RAG 流水线，<br>从而针对特定场景进行优化。具体来说，条件模式通过一个<strong>路由模块</strong>（Routing Module）实现模块的动态选择，该模块根据输入问题的性质决定接下来的流程。</p><p><img src="/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/5.png" alt="条件模型流程"></p><p>条件模式的分支流通常在以下几个方面存在差异：检索来源、流程、模型配置以及提示设计</p><h3 id="分支模型"><a href="#分支模型" class="headerlink" title="分支模型"></a>分支模型</h3><p>分支模式通过<strong>并行运行</strong>多个分支的方式增加结果的多样性和鲁棒性。具体来说，分支模式在某个模块中生成多个并行分支，每个分支可以独立执行相同或不同的 RAG 流程。这些流程由多个处理模块组成，生成各自的分支输出结果。</p><p>分支模式可以根据不同任务需求设计为多种结构类型，通常分为两类：预检索分支模式、后检索分支模式。</p><h3 id="预检索分支-Pre-Retrieval-Branching"><a href="#预检索分支-Pre-Retrieval-Branching" class="headerlink" title="预检索分支(Pre-Retrieval Branching)"></a>预检索分支(Pre-Retrieval Branching)</h3><p>是一种通过生成多个<strong>子查询并行检索</strong>的模式，用于提高检索的全面性和生成结果的多样性。</p><p><img src="/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/6.png" alt="预检索分支流程"></p><h3 id="后检索分支-Post-Retrieval-Branching"><a href="#后检索分支-Post-Retrieval-Branching" class="headerlink" title="后检索分支(Post-Retrieval Branching)"></a>后检索分支(Post-Retrieval Branching)</h3><p>该模式从<strong>单一查询</strong>开始，通过<strong>检索模块</strong>获取多个文档块。每个文档块被独立送入生成模块进行处理，生成对应的结果集合。随后，这些生成的结果通过合并模块进行整合，形成最终结果。</p><p><img src="/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/7.png" alt="后检索分支流程"></p><h3 id="循环模式"><a href="#循环模式" class="headerlink" title="循环模式"></a>循环模式</h3><p>循环模式的核心是检索与生成步骤之间的<strong>相互依赖性</strong>。循环模式通过引入调度模块进行控制，确保系统可以根据需要在特定模块之间<strong>重复执行</strong>某些操作。</p><p>循环模式的关键在于<strong>判断模块</strong>（Judge Module），用于决定流程是否需要返回到之前的模块或继续向下执行。</p><p>循环模式可以进一步细分为三种类型：迭代型、递归型和自适应型（主动型）检索模式。</p><ol><li>迭代型循环模式：通过多次循环执行<strong>检索</strong>和<strong>生成</strong>操作，在每次迭代中逐步优化结果。在每一步迭代中，系统根据当前查询和之前的输出结果，检索相关的文档片段，然后利用这些文档生成新的输出。迭代过程通常设置一个<strong>最大迭代次数</strong>的限制，以避免无限循环。</li></ol><p><img src="/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/8.png" alt="迭代型循环模式"></p><ol start="2"><li>递归型循环检索模式：一种具有明显<strong>依赖性</strong>和<strong>层次性</strong>的检索方式。其显著特点在于每一步都依赖于前一步的输出，并通过不断加深检索过程，逐步挖掘更深层次的信息。递归型检索还包含明确的<strong>退出机制</strong>，用以确保在满足终止条件时流程终止，避免无限递归。递归型循环模式通过查询转换模块生成新的查询，以推动检索逐层深入。</li></ol><p><img src="/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/9.png" alt="递归型循环检索模式"></p><ol start="3"><li><p>自适应型（主动型）模式：是一种超越传统被动检索模式的新兴模式，这种模式的核心思想类似于大语言模型智能体，通过<strong>动态调整检索流程</strong>，主动决定何时进行检索以及何时终止流程并生成最终结果。  </p><p> 自适应型检索通常根据判断标准进一步细分为两种方法：基于提示的方法和基于指令微调的方法。</p><ol><li>基于提示的方法：通过<strong>设计动态提示</strong>对模型进行引导；</li><li>基于指令微调的方法：利用<strong>指令微调</strong>的方法实现更精准的检索控制。</li></ol></li></ol><p><img src="/2025/08/21/%E3%80%8A%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRAG%E7%AB%A0%E8%8A%82%E7%AC%94%E8%AE%B0/10.png" alt="自适应型（主动型）模式"></p><h2 id="RAG系统训练与优化"><a href="#RAG系统训练与优化" class="headerlink" title="RAG系统训练与优化"></a>RAG系统训练与优化</h2><h3 id="文本嵌入模型微调"><a href="#文本嵌入模型微调" class="headerlink" title="文本嵌入模型微调"></a>文本嵌入模型微调</h3><p>文本嵌入（Text Embedding）是一种将文本转换为固定维度向量（通常是高维浮点数组）的技术，旨在以数学形式捕捉语言的语义信息，并将其映射到向量空间中。在RAG系统中，文本嵌入表示是<strong>实现向量搜索</strong>的核心技术。</p>]]></content>
    
    
    <categories>
      
      <category>LLM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis项目及原理总结</title>
    <link href="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/"/>
    <url>/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis项目及原理总结"><a href="#Redis项目及原理总结" class="headerlink" title="Redis项目及原理总结"></a>Redis项目及原理总结</h1><h2 id="1-Redis基础"><a href="#1-Redis基础" class="headerlink" title="1. Redis基础"></a>1. Redis基础</h2><p>Redis是一种<strong>NoSQL</strong>数据库，采用内存存储，读写速度远超磁盘存储的SQL数据库，适合于分布式设计，方便进行扩容，提供过期时间，发布订阅，lua脚本等功能。</p><p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/nosql.png" alt="SQL vs NoSQL" title="SQL与NoSQL的对比"></p><p>Redis提供丰富的数据类型，常见的5种数据类型为：<strong>String(字符串)，Hash(哈希)，List(列表)，Set(集合)，Zset(有序集合)</strong>。随着版本更新，后面又新增支持了四种数据类型：<strong>BitMap(位图)，HyperLogLog(超日志)，GEO(地理空间)，Stream(流)</strong> 。这些数据类型在后面的项目中都有应用到，概括来说，他们的应用场景为：</p><ul><li>String类型：缓存对象，共享session，常规计数等 </li><li>Hash类型：缓存对象，可以只修改某一项属性值</li><li>List类型：消息队列，但注意只支持单消费者</li><li>Set类型：共同好友，聚合计算（求交集，并集）</li><li>Zset类型：排序场景，例如排行榜</li><li>BitMap类型：二值状态统计场景，比如签到表</li><li>HyperLogLog类型：海量数据基数统计，比如百万级UV统计</li><li>GEO类型：存储地理位置信息场景，比如附近商户</li><li>Stream类型：消息队列，提供消费者组模式</li></ul><p>Redis命令，详见<a href="https://www.runoob.com/redis/redis-commands.html">菜鸟教程Redis命令</a>。</p><h2 id="2-Redis项目"><a href="#2-Redis项目" class="headerlink" title="2. Redis项目"></a>2. Redis项目</h2><h3 id="2-1-短信验证码登录"><a href="#2-1-短信验证码登录" class="headerlink" title="2.1 短信验证码登录"></a>2.1 短信验证码登录</h3><h4 id="基于Session实现登录"><a href="#基于Session实现登录" class="headerlink" title="基于Session实现登录"></a>基于Session实现登录</h4><p>业务流程：  </p><ol><li>发送短信验证码</li><li>短信验证码登录、注册</li><li>校验登录状态<br><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/login_basesession.png" alt="session登录流程" title="基于session登录流程"></li></ol><p>缺点：</p><ol><li><strong>水平扩展困难</strong>：如果有多台tomcat服务器，session不便于水平扩展，因为session存储在单个服务器的内存中，用户请求必须始终路由到同一台服务器才能得到正确的数据</li><li><strong>验证码状态管理不灵活</strong>：Session会随着会话结束而失效，但短信验证码需要更短的有效期，需要额外逻辑管理验证码过期时间</li></ol><h4 id="基于Redis实现登录"><a href="#基于Redis实现登录" class="headerlink" title="基于Redis实现登录"></a>基于Redis实现登录</h4><p>两个地方需要用Redis来进行数据缓存：</p><ol><li>验证码（生成验证码-校验验证码）；</li><li>用户信息（登录用户-用户登录状态校验）。</li></ol><p>如何选择key和value？明确key的要求：唯一性，方便携带和提取。  </p><ol><li>验证码：<ol><li>key-设置为手机号，方便客户端取出信息进行验证（原来基于Session实现，客户端通过Cookie携带SessionId来自动取出）；</li><li>value-验证码，数据类型选择为最简单的String就可以实现</li></ol></li><li>用户信息：<ol><li>key-设置为随机token作为登录凭证（这里不用手机号的原因是手机号作为登录凭证返回给前端不安全）；</li><li>value-用户信息，有两种数据类型可以选择，一是采用String类型，以JSON字符串存储，适合用户信息较少的情况，耦合性较高。二是采用Hash类型，field就是用户属性，value就是属性值</li></ol></li></ol><p>业务流程：</p><p>总体流程与基于session登录类似，不同点在于验证码和用户状态需要缓存在redis中，然后在校验时，需从redis中读取验证</p><p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/redislogin.png" alt="redis登录流程1" title="基于redis登录流程1">  </p><p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/redislogin2.png" alt="redis登录流程2" title="基于redis登录流程2">  </p><p>代码实现：</p><ol><li>发送短信验证码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sendCode</span><span class="hljs-params">(String phone, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">//1. 校验手机号</span><br>    <span class="hljs-keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;<br>        <span class="hljs-comment">//2. 如果不符合，返回错误信息</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//3. 符合，生成验证码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> RandomUtil.randomNumbers(<span class="hljs-number">6</span>);<br>    <span class="hljs-comment">//4. 保存验证码到redis</span><br>    stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code,LOGIN_CODE_TTL, TimeUnit.MINUTES);<br>    <span class="hljs-comment">//5. 发送验证码</span><br>    log.debug(<span class="hljs-string">&quot;发送短信验证码成功，验证码为：&quot;</span> + code);<br>    <span class="hljs-comment">// 返回ok</span><br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：此处验证码发送功能仅实现模拟，后续将使用腾讯云提供的短信服务实现真实地短信发送功能</p><ol start="2"><li>根据验证码进行登录&#x2F;注册</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;<br>     <span class="hljs-comment">//1.校验手机号</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> loginForm.getPhone();<br>     <span class="hljs-keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;<br>         <span class="hljs-comment">//2. 如果不符合，返回错误信息</span><br>         <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误！&quot;</span>);<br>     &#125;<br><br>     <span class="hljs-comment">//3. 从redis中获取验证码并校验</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">cachCode</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);<br>     <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> loginForm.getCode();<br>     <span class="hljs-keyword">if</span>(cachCode == <span class="hljs-literal">null</span> || !cachCode.equals(code))&#123;<br>         <span class="hljs-comment">//不一致，报错</span><br>         <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;验证码错误&quot;</span>);<br>     &#125;<br><br>     <span class="hljs-comment">//4. 一致，根据手机号查询用户信息 select * from tb_user where phone= ? 用mybatisplus来实现</span><br>     <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;phone&quot;</span>, phone).one();<br>     <span class="hljs-comment">//query 相当于 select * from tb_user；eq 相当于 = ;  查多个结果就是list() ; 查一个结果就是one();</span><br><br>     <span class="hljs-comment">//5. 判断用户是否存在</span><br>     <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>         <span class="hljs-comment">//6. 不存在，创建新用户，并保存到数据库</span><br>         <span class="hljs-comment">// 注意还需要返回这个创建的用户，因为后面需要保存用户信息到session</span><br>         user = createUserWithPhone(phone);<br>     &#125;<br><br>     <span class="hljs-comment">//7. 用户存在，保存用户信息到redis中：</span><br>     <span class="hljs-comment">// 7.1 生成随机token作为登录令牌和key</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>);<br>     <span class="hljs-comment">// 7.2 将user对象转换为hash存储到value中————先转成map&lt;hashkey,value&gt;，再用putall一次性存入，不然要多次交互，很麻烦</span><br>     <span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);<br>     <span class="hljs-comment">// 由于userDTO对象中的id是long类型的，在保存信息的时候map中的&lt;id,991&gt;中的value是long类型，而stringRedisTemplate要求为String类型，所以需要转换</span><br>     Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(<br>             userDTO,<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(),<br>             CopyOptions.create()<br>             .setIgnoreNullValue(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 忽略值为 null 的字段</span><br>             .setFieldValueEditor((fieldName, fieldValue) -&gt; fieldValue.toString()) <span class="hljs-comment">// 字段值处理器，处理long型的id值</span><br>     );<br>     <span class="hljs-comment">// 7.3 保存信息</span><br>     stringRedisTemplate.opsForHash().putAll(LOGIN_USER_KEY + token, userMap);<br>     <span class="hljs-comment">// 7.4 设置token有效期，并通过拦截器更新token有效期</span><br>     stringRedisTemplate.expire(LOGIN_USER_KEY + token, LOGIN_USER_TTL, TimeUnit.MINUTES);<br><br>     <span class="hljs-comment">//8. 返回token给前端</span><br>     <span class="hljs-keyword">return</span> Result.ok(token);<br> &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>校验登录状态</li></ol><p>通过两个拦截器来实现，一个token刷新拦截器，一个login拦截器。</p><p>不设置成一个拦截器的原因是，如果把token刷新逻辑也放在login拦截器中，会出现一个情况：已经登录的用户访问那些无需登录权限的页面时，不会触发token刷新，可能导致活跃的登录用户突然要求再次登录，这不符合业务需求。</p><p>注册拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>    <span class="hljs-comment">//登录拦截器：指定不用拦截的路径</span><br>    registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>())<br>            .excludePathPatterns(<br>            <span class="hljs-string">&quot;/user/code&quot;</span>,<br>            <span class="hljs-string">&quot;/user/login&quot;</span>,<br>            <span class="hljs-string">&quot;/blog/hot&quot;</span>,<br>            <span class="hljs-string">&quot;/shop/**&quot;</span>,<br>            <span class="hljs-string">&quot;/shop-type/**&quot;</span>,<br>            <span class="hljs-string">&quot;/upload/**&quot;</span>,<br>            <span class="hljs-string">&quot;/voucher/**&quot;</span><br>    ).order(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//token刷新拦截器</span><br>    registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RefreshTokenInterceptor</span>(stringRedisTemplate)).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).order(<span class="hljs-number">0</span>); <br>    <span class="hljs-comment">//拦截所有请求，并且最先执行，通过order指定拦截器的顺序</span><br>&#125;<br></code></pre></td></tr></table></figure><p>token刷新拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//前置拦截，在controller执行之前去完成——去做用户信息校验</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//1. 获取请求头中的token</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;authorization&quot;</span>);<br>    <span class="hljs-keyword">if</span>(StrUtil.isBlank(token))&#123;<br>        <span class="hljs-comment">//token为空，放行到loginInterceptor进行路径拦截校验</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">//2. 基于token获取redis中的用户</span><br>    <span class="hljs-comment">// 注意不是用get（key,filed）,它返回的只是key中某个hashkey的value，要用entries，获取map&lt;&gt;</span><br>    Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(RedisConstants.LOGIN_USER_KEY + token);<br>    <span class="hljs-comment">// 3. 判断用户是否存在</span><br>    <span class="hljs-keyword">if</span>(userMap.isEmpty())&#123;<br>        <span class="hljs-comment">// 4. 不存在，放行到loginInterceptor进行路径拦截校验</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">//5. 存在，将redis中获取的hash数据转换成UserDTO对象,不忽略错误</span><br>    <span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDTO</span>(), <span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// 6. 保存到当前线程中</span><br>    UserHolder.saveUser(userDTO);<br>    <span class="hljs-comment">// 7. 刷新token有效期</span><br>    stringRedisTemplate.expire(RedisConstants.LOGIN_USER_KEY + token,RedisConstants.LOGIN_USER_TTL, TimeUnit.MINUTES);<br>    <span class="hljs-comment">// 8. 放行</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//在视图渲染后拦截，返回给用户之前——销毁用户信息，避免内存泄露</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 移除用户</span><br>    UserHolder.removeUser();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>login拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//前置拦截，在controller执行之前去完成——去做用户信息校验</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 1. 判断是否需要拦截（threadlocal中是否有用户——校验登录状态）</span><br>    <span class="hljs-keyword">if</span>(UserHolder.getUser() == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">// 没有登录状态，拦截</span><br>        response.setStatus(<span class="hljs-number">401</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// 有用户，放行</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-商铺查询缓存"><a href="#2-2-商铺查询缓存" class="headerlink" title="2.2 商铺查询缓存"></a>2.2 商铺查询缓存</h3><h4 id="缓存的意义"><a href="#缓存的意义" class="headerlink" title="缓存的意义"></a>缓存的意义</h4><p>缓存的核心作用是<strong>提高性能、减轻数据库压力、改善用户体验</strong>。它的适用场景包括<strong>热点数据频繁访问、数据变化不频繁、分布式系统共享数据</strong>。</p><p>缓存有几种常用类型，分别是<strong>1. 本地缓存</strong>：JVM内存缓存（如Caffeine、Guava），访问快但是仅限单机；<strong>2. 分布式缓存</strong>：Redis、Memcached，适合集群、分布式场景；<strong>3. 浏览器缓存</strong>：HTTP Cache-Control，让客户端缓存数据，减轻服务器压力</p><h4 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h4><ol><li><strong>内存淘汰LRU</strong>：Redis自带机制，当Redis内存不足的时候，根据策略删除部分key，常用策略有：volatile-lru，只对设置了TTL的Key进行LRU淘汰；allkeys-lru，对所有Key使用LRU淘汰；还有volatile-random、allkeys-random、volatile-ttl 等</li><li><strong>过期淘汰</strong>：利用expire命令给数据设置过期时间</li><li><strong>主动更新</strong>：主动完成数据库与缓存的同时更新</li></ol><p>如何选择更新策略？根据一致性需求，低一致性需求下，采用内存淘汰或过期淘汰；高一致性需求下，采用主动更新为主，过期淘汰为辅的策略。</p><p>  <strong>主动更新策略</strong>：</p><ol><li>写时更新 Write-Through：每次写数据库，同时更新缓存。缓存与数据库集成为一个服务，服务保证两者的一致性，对外暴露API接口。调用者调用API，无需知道自己操作的是数据库还是缓存，不关心一致性。优点是<strong>一致性优秀</strong>，但是<strong>实现复杂</strong>，性能一般</li><li>写时回写 Write-Back：先更新缓存，然后异步写入数据库。缓存调用者的CRUD都针对缓存完成。由独立线程异步的将缓存数据写到数据库，实现最终一致。优点是<strong>性能好</strong>，但<strong>一致性差</strong>，实现复杂</li><li>延迟加载缓存 Cache Aside：缓存不存在或过期时，才从数据库加载并写入缓存，缓存调用者在更新数据库的同时完成对缓存的更新。一致性良好，实现难度一般</li></ol><p>三种策略的对比</p><table><thead><tr><th>特性</th><th>Cache Aside</th><th>Write-through</th><th>Write-behind</th></tr></thead><tbody><tr><td><strong>读操作</strong></td><td>先查缓存，未命中查数据库</td><td>直接读缓存</td><td>直接读缓存</td></tr><tr><td><strong>写操作</strong></td><td>先写数据库，更新&#x2F;删除缓存</td><td>写数据库 + 更新缓存</td><td>写缓存 → 异步写数据库</td></tr><tr><td><strong>一致性</strong></td><td>最终一致</td><td>强一致</td><td>弱一致</td></tr><tr><td><strong>性能</strong></td><td>首次访问慢</td><td>写慢、读快</td><td>写快、读快</td></tr><tr><td><strong>适用场景</strong></td><td>高读低写、热点不固定</td><td>写少、要求一致性</td><td>高频写、允许短暂不一致</td></tr></tbody></table><p>  Cache Aside在写操作时，对缓存的操作有两种：一是更新缓存，二是删除缓存；对于<strong>更新缓存</strong>，可能存在<strong>无效更新</strong>和较大的<strong>线程安全问题</strong>，而<strong>删除缓存</strong>，本质上是<strong>延迟更新</strong>，没有无效更新，线程安全问题也较低。在单体系统中，利用<strong>事务机制</strong>确保数据库和缓存操作的原子性；在分布式系统中，利用分布式事务机制保证原子性。</p><p>  最终实现机制：</p><ul><li>读操作时：1. 先查缓存，如果命中，直接返回； 2. 缓存没命中，查数据库； 3. 将数据库数据写入缓存； 4. 返回缓存结果</li><li>写操作时：1. 先修改数据库；2. 再删除缓存  <strong>注意确保两步的原子性</strong>（单体系统中利用事务机制，分布式系统中利用分布式事务机制确保原子性）</li></ul><p>业务流程：</p><p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/shopcache1.png" alt="商铺缓存策略" title="商铺缓存业务逻辑">  </p><p>代码实现（写操作）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(Shop shop)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">shopId</span> <span class="hljs-operator">=</span> shop.getId();<br>    <span class="hljs-keyword">if</span> (shopId == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺id不能为空！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 1. 更新数据库</span><br>    updateById(shop);<br>    <span class="hljs-comment">// 2. 删除缓存</span><br>    stringRedisTemplate.delete(CACHE_SHOP_KEY + shopId);<br>    <span class="hljs-comment">// 3. 返回</span><br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>补充内容</p><p><strong>更新数据库+异步更新缓存</strong>实现双写一致性的几种常用方案：</p><ol><li><p>利用MQ消息队列，异步通知保证数据的最终一致性</p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/hexo-blog\source\_posts\Redis项目及原理总结\cache1.png" alt="消息队列实现异步更新缓存" style="zoom: 50%;"></li><li><p>基于Canal的异步通知</p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/hexo-blog\source\_posts\Redis项目及原理总结\cache2.png" alt="基于Canal实现异步更新缓存" style="zoom:50%;"><p>binlog记录了所有DDL（数据定义语言）和DML（数据操纵语言）的语句，而不记录数据查询语句</p></li></ol></blockquote><h4 id="缓存穿透问题"><a href="#缓存穿透问题" class="headerlink" title="缓存穿透问题"></a>缓存穿透问题</h4><p>定义：客户端请求的数据在缓存中和数据库中都<strong>不存在</strong>，这样缓存永远都不会生效，请求全部向数据库发起，对数据库造成大量访问压力</p><p>解决方案：</p><ol><li>缓存空对象<ol><li>实现简单，维护方便</li><li>会造成额外内存消耗，可能造成短期的不一致(可以通过设置TTL来缓解这个问题)</li></ol></li><li>布隆过滤<ol><li>在客户端和Redis之间设置布隆过滤器，不存在则直接拒绝请求</li><li>内存占用少，用用二进制位表示是否存在（基于特殊的布隆算法）</li><li>实现复杂，存在误判的可能（他说数据库有，不一定有，但他说没有，就是没有）</li></ol></li><li>其他策略<ol><li>增加id的复杂度，避免被猜测造成的缓存穿透攻击</li><li>做好数据的基础格式校验</li><li>加强用户权限校验</li><li>做好热点参数的限流（减少对数据库的访问压力）</li></ol></li></ol><p>业务实践</p><p>采用缓存空对象来解决缓存穿透问题</p><p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/shopcache2.png" alt="解决缓存穿透业务逻辑"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithPassTrough</span><span class="hljs-params">(Long id)</span>&#123;<br><br>    <span class="hljs-comment">// 1. 从Redis中查询商铺缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);<br><br>    <span class="hljs-comment">// 2. 判断是否是缓存是否命中</span><br>    <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson)) &#123;  <span class="hljs-comment">// 此处if 返回 命中+有值</span><br>        <span class="hljs-comment">// 3. 缓存数据命中且非空，返回对象数据(Json转对象）</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean(shopJson, Shop.class);<br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 判断Redis缓存是否为空值（缓存空对象的情况/没缓存的情况）</span><br>    <span class="hljs-comment">//开始写的shopJson.equals(&quot;&quot;)，但是在 shopJson == null 的情况下（没命中），会立刻抛 NullPointerException</span><br>    <span class="hljs-keyword">if</span>(shopJson != <span class="hljs-literal">null</span>) &#123;     <span class="hljs-comment">// 此处if 返回 命中+空值</span><br>        <span class="hljs-comment">//shopJson有值，但没有经过上一个if输出，说明命中的是空值，返回错误信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 5. shopJson为空值，未命中，访问数据库</span><br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> getById(id);<br>    <span class="hljs-keyword">if</span> (shop == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 6. 不存在，返回错误</span><br>        <span class="hljs-comment">// 解决缓存穿透问题——将空值写入redis中</span><br>        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+ id, <span class="hljs-string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 7. 存在，将商铺数据写入redis</span><br>    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);<br>    <span class="hljs-comment">// 8. 返回数据</span><br>    <span class="hljs-keyword">return</span> shop;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="缓存雪崩问题"><a href="#缓存雪崩问题" class="headerlink" title="缓存雪崩问题"></a>缓存雪崩问题</h4><p>定义：在同一时间段大量的缓存key同时失效，或Redis服务宕机，导致大量请求到达数据库，给数据库带来巨大压力</p><p>解决方案：</p><ol><li>给不同的key的TTL添加随机值（针对大量缓存key同时失效的问题）</li><li>利用Redis集群提高服务的可用性（针对单个Redis服务宕机问题）</li><li>给业务增加降级或者限流策略，比如快速拒绝</li><li>给业务增加多级缓存（浏览器-njinx-redis-jvm-数据库）</li></ol><h4 id="缓存击穿问题-热点Key问题"><a href="#缓存击穿问题-热点Key问题" class="headerlink" title="缓存击穿问题(热点Key问题)"></a>缓存击穿问题(热点Key问题)</h4><p>定义：被高并发访问并且缓存重建业务较复杂的key(<strong>热点key</strong>)突然失效，大量请求访问会瞬间给数据库带来巨大冲击</p><p>解决方案：</p><ol><li><p>互斥锁：通过互斥锁<strong>避免多个线程同时回源数据库</strong>，当缓存失效的时候，只有获取锁的线程能够去数据库查询数据进行缓存重建、</p></li><li><p>逻辑过期：给热点key设置逻辑过期时间，当线程查询到key逻辑过期后，同样也需要<strong>获取互斥锁</strong>进行缓存重建，但不同的是，该线程会<strong>开启新的线程</strong>进行缓存重建，而在重建期间，访问该key的线程将返回旧的数据。</p><p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/shopcache3.png" alt="逻辑过期方案流程"></p></li></ol><p>方案对比：</p><table><thead><tr><th>解决方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>互斥锁</td><td>1. 没有额外内存消耗；2. 保证一致性；3. 实现简单</td><td>1. 线程需要等待，性能受影响；2. 可能有死锁风险</td></tr><tr><td>逻辑过期</td><td>线程无需等待，性能较好</td><td>1. 不保证一致性；2. 有额外内存消耗；3. 实现复杂</td></tr></tbody></table><p>业务实践</p><ol><li><p>利用互斥锁解决缓存击穿问题</p><p>业务流程</p><p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/shopcache4.png" alt="互斥锁解决缓存击穿流程"></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithMutex</span><span class="hljs-params">(Long id)</span>&#123;<br>    <span class="hljs-comment">// 1. 从Redis中查询商铺缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);<br><br>    <span class="hljs-comment">// 2. 判断是否是缓存是否命中</span><br>    <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson)) &#123;  <span class="hljs-comment">// 此处if 返回 命中+有值</span><br>        <span class="hljs-comment">// 3. 缓存数据命中且非空，返回对象数据(Json转对象）</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean(shopJson, Shop.class);<br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 判断Redis缓存是否为空值</span><br>    <span class="hljs-keyword">if</span>(shopJson != <span class="hljs-literal">null</span>) &#123;     <span class="hljs-comment">// 此处if 返回 命中+空值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// shopJson为空值，未命中</span><br>    <span class="hljs-comment">// 5. 实现缓存重建</span><br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 5.1 获取互斥锁</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(LOCK_SHOP_KEY);<br>        <span class="hljs-comment">// 5.2 判断是否获取锁成功</span><br>        <span class="hljs-keyword">if</span>(!isLock) &#123;<br>            <span class="hljs-comment">// 5.3 获取锁失败：则休眠并重试(递归调用方法）</span><br>            Thread.sleep(<span class="hljs-number">50</span>);<br>            <span class="hljs-keyword">return</span> queryWithMutex(id);<br>        &#125;<br><br>        <span class="hljs-comment">// 5.4 获取锁成功：再次检测redis缓存是否存在，double check，如果存在则无需重建缓存</span><br>        <span class="hljs-comment">// 此处二次检查的目的就是只有第一个拿到锁的的需要从数据库中拿数据到redis中，防止其他等待锁的线程拿到锁后又去访问数据库</span><br>        <span class="hljs-comment">// 再次从Redis中查询商铺缓存</span><br>        shopJson = stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);<br>        <span class="hljs-comment">// 判断是否是缓存是否命中</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson)) &#123;<br>            <span class="hljs-comment">// 此处if 返回 命中+有值</span><br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(shopJson != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 此处if 返回 命中+空值</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//访问数据库，根据id查询数据库</span><br>        shop = getById(id);<br><br>        <span class="hljs-keyword">if</span> (shop == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 6. 不存在，返回错误</span><br>            <span class="hljs-comment">// 解决缓存穿透问题——将空值写入redis中</span><br>            stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, <span class="hljs-string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 7. 存在，将商铺数据写入redis</span><br>        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 8. 释放锁</span><br>        unlock(LOCK_SHOP_KEY);<br>    &#125;<br>    <span class="hljs-comment">// 9. 返回数据</span><br>    <span class="hljs-keyword">return</span> shop;<br>    &#125;    <br><br><span class="hljs-comment">// 获取锁方法：通过setnx命令实现互斥锁</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span>&#123;<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>    <span class="hljs-comment">//不要直接返回，因为B-&gt;b，拆箱过程可能出现空指针</span><br>    <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>    <br>&#125;<br><br><span class="hljs-comment">// 释放锁方法</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key)</span>&#123;<br>    stringRedisTemplate.delete(key);<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>几个注意点：</p><ol><li>在获取锁之后，还要进行<strong>double check</strong>，目的是避免缓存击穿的并发漏洞，比如：线程A拿到锁并进行缓存重建，线程B等待锁，线程A完成重建释放锁，线程B拿到锁如果不进行double check又要再次访问数据库，造成多余查询。</li><li>获取锁的整个代码用t<strong>ry-catch-finally包围</strong>的目的是，防止异常导致的锁无法释放，并且处理线程休眠可能的中断异常</li></ol></blockquote><hr><ol><li>利用逻辑过期解决缓存击穿问题</li></ol><p>业务流程：</p><p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/shopcache5.png" alt="逻辑过期解决缓存击穿问题"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 缓存重建执行线程池</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">CACHE_REBUILD_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br><span class="hljs-comment">//解决缓存击穿：逻辑过期</span><br><span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(Long id)</span>&#123;<br>    <span class="hljs-comment">// 1. 从Redis中查询商铺缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);<br><br>    <span class="hljs-comment">// 2. 判断是否是缓存是否命中</span><br>    <span class="hljs-keyword">if</span>(StrUtil.isBlank(shopJson)) &#123;<br>        <span class="hljs-comment">// 3. 不存在，直接返回空</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 缓存存在，将Json反序列化为对象</span><br>    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(shopJson, RedisData.class);<br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> (JSONObject)redisData.getData();<br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean(data, Shop.class);<br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br>    <span class="hljs-comment">// 5. 判断缓存是否逻辑过期</span><br>    <span class="hljs-keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;<br>        <span class="hljs-comment">// 5.1 未过期，返回店铺信息</span><br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br><br>    <span class="hljs-comment">// 5.2 已过期，需要缓存重建</span><br>    <span class="hljs-comment">// 6. 缓存重建</span><br>    <span class="hljs-comment">// 6.1 获取互斥锁</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(LOCK_SHOP_KEY + id);<br>    <span class="hljs-comment">// 6.2 判断是否获取锁成功</span><br>    <span class="hljs-keyword">if</span> (isLock) &#123;<br>        <span class="hljs-comment">// 6.3 成功，再次检查redis缓存是否过期，做double check</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">newShopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);<br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">newRedisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(newShopJson, RedisData.class);<br>        <span class="hljs-keyword">if</span> (newRedisData.getExpireTime().isAfter(LocalDateTime.now())) &#123;<br>            <span class="hljs-comment">// double check 检查发现没过期</span><br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">newData</span> <span class="hljs-operator">=</span> (JSONObject)newRedisData.getData();<br>            <span class="hljs-type">Shop</span> <span class="hljs-variable">newShop</span> <span class="hljs-operator">=</span> JSONUtil.toBean(newData, Shop.class);<br>            unlock(LOCK_SHOP_KEY+id); <span class="hljs-comment">// 释放锁？</span><br>            <span class="hljs-keyword">return</span> newShop;<br>        &#125;<br>        <span class="hljs-comment">// double check检查仍为过期，开启独立线程，实现缓存重建</span><br>        CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 重建缓存，传入逻辑过期时间</span><br>                <span class="hljs-built_in">this</span>.saveShop2Reds(id, <span class="hljs-number">20L</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">//释放锁</span><br>                unlock(LOCK_SHOP_KEY+id);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-comment">// 6.4 返回过期商铺信息</span><br>    <span class="hljs-keyword">return</span> shop;<br>&#125;<br><br><span class="hljs-comment">// 独立线程重建缓存方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveShop2Reds</span><span class="hljs-params">(Long id,Long expireSeconds)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 1. 查询店铺数据</span><br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> getById(id);<br><br>    Thread.sleep(<span class="hljs-number">300</span>);<span class="hljs-comment">//模拟缓存重建延迟时间</span><br><br>    <span class="hljs-comment">// 2. 封装包含逻辑过期时间</span><br>    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>    redisData.setData(shop);<br>    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));<br><br>    <span class="hljs-comment">// 3. 写入redis</span><br>    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：在double check后发现缓存已更新的情况下，需要记得释放锁，这里将释放锁写在return 前面并不是一个很安全的方法，以下是一种更为安全的实现方式：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 线程池</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">CACHE_REBUILD_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br><br>    <span class="hljs-comment">// 1) 读缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>    <span class="hljs-keyword">if</span> (StrUtil.isBlank(json)) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, RedisData.class);<br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), Shop.class);<br><br>    <span class="hljs-comment">// 2) 未过期，直接返回</span><br>    <span class="hljs-keyword">if</span> (redisData.getExpireTime().isAfter(LocalDateTime.now())) <span class="hljs-keyword">return</span> shop;<br><br>    <span class="hljs-comment">// 3) 已过期，尝试加锁</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">locked</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>    <span class="hljs-keyword">if</span> (!locked) &#123;<br>        <span class="hljs-comment">// 没拿到锁：返回旧值（stale-while-revalidate 策略）</span><br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">handedOff</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 是否将“解锁责任”交给了异步任务</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 4) Double Check：拿到锁后，重读 Redis</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">freshJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(freshJson)) &#123;<br>            <span class="hljs-type">RedisData</span> <span class="hljs-variable">fresh</span> <span class="hljs-operator">=</span> JSONUtil.toBean(freshJson, RedisData.class);<br>            <span class="hljs-keyword">if</span> (fresh.getExpireTime().isAfter(LocalDateTime.now())) &#123;<br>                <span class="hljs-comment">// 已被其它线程重建：返回最新数据</span><br>                <span class="hljs-keyword">return</span> JSONUtil.toBean((JSONObject) fresh.getData(), Shop.class);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 5) 仍然过期 -&gt; 提交异步重建（把解锁交给子线程）</span><br>        CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                saveShop2Reds(id, <span class="hljs-number">20L</span>); <span class="hljs-comment">// 你的重建方法：读库 + 写入逻辑过期</span><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-comment">// 记录日志亦可</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                unlock(lockKey); <span class="hljs-comment">// 异步任务完成后释放锁</span><br>            &#125;<br>        &#125;);<br>        handedOff = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-comment">// 6) 当前请求先返回旧值，避免阻塞</span><br>        <span class="hljs-keyword">return</span> shop;<br><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 7) 若未移交（比如 double check 返回了最新数据的分支），在这里释放锁</span><br>        <span class="hljs-keyword">if</span> (locked &amp;&amp; !handedOff) &#123;<br>            unlock(lockKey);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="封装Redis工具类"><a href="#封装Redis工具类" class="headerlink" title="封装Redis工具类"></a>封装Redis工具类</h4><p>为了更便捷地处理缓存穿透和缓存击穿问题，实现工具类CacheClient，用来统一处理：</p><ul><li>普通缓存读写</li><li>空值缓存(防止缓存穿透)</li><li>逻辑过期缓存(防止缓存击穿)</li><li>互斥锁机制(避免多线程同时重建缓存)</li></ul><p>封装的缓存工具类，包含以下方法：</p><ol><li>将任意Java对象序列化为json并存储在String类型的key中，可以设置TTL过期时间</li><li>将任意Java对象序列化为json并存储在string类型的key中，可以设置逻辑过期时间，用于处理缓存击穿问题</li><li>根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题</li><li>根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</li></ol><p>实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheClient</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-comment">// 构造函数注入，也可以通过resource注解注入</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheClient</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">// 方法1：将任意Java对象序列化为json并存储在String类型的key中，可以设置TTL过期时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit timeUnit)</span> &#123;<br>        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, timeUnit);<br>    &#125;<br><br>    <span class="hljs-comment">// 方法2：将任意Java对象序列化为json并存储在string类型的key中，可以设置逻辑过期时间，用于处理缓存击穿问题</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWithLogicalExpire</span><span class="hljs-params">(String key,  Object value, Long time, TimeUnit timeUnit)</span> &#123;<br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>        redisData.setData(value);<br>        redisData.setExpireTime(LocalDateTime.now().plusSeconds(timeUnit.toSeconds(time)));<br>        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));<br>    &#125;<br><br>    <span class="hljs-comment">// 方法3：根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题</span><br>    <span class="hljs-keyword">public</span> &lt;R,ID&gt; R <span class="hljs-title function_">queryWithPassTrough</span><span class="hljs-params">(</span><br><span class="hljs-params">            String keyPrefix,ID id, Class&lt;R&gt; type, Function&lt;ID,R&gt; dbFallback, Long time, TimeUnit timeUnit)</span>&#123;<br>        <span class="hljs-comment">// 1. 从Redis中查询缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br><br>        <span class="hljs-comment">// 2. 判断是否是缓存是否命中</span><br>        <span class="hljs-comment">// 命中：</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(json, type);<br>        &#125;<br><br>        <span class="hljs-comment">// 4. 判断Redis缓存命中的是否为空值</span><br>        <span class="hljs-comment">// 命中空值：</span><br>        <span class="hljs-keyword">if</span>(json != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 返回错误信息</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 未命中，根据提供的函数访问数据库</span><br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>        <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 5. 对象不存在，解决缓存穿透问题——将空值写入redis中</span><br>            stringRedisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 6. 对象存在，将数据写入redis</span><br>        <span class="hljs-built_in">this</span>.set(key, r, time, timeUnit);<br>        <span class="hljs-comment">// 7. 返回数据</span><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-comment">// 缓存重建执行线程池</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">CACHE_REBUILD_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-comment">//方法4：根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</span><br>    <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(</span><br><span class="hljs-params">        String keyPrefix, ID id, Class&lt;R&gt; type,Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit timeUnit)</span> &#123;<br>        <span class="hljs-comment">// 1. 拼接缓存 Key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br><br>        <span class="hljs-comment">// 2. 从 Redis 查询缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br><br>        <span class="hljs-comment">// 3. 判断缓存是否存在</span><br>        <span class="hljs-keyword">if</span> (StrUtil.isBlank(json)) &#123;<br>            <span class="hljs-comment">// 未命中缓存，说明不是热点数据，直接返回 null</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 4. 反序列化 RedisData，获取数据和逻辑过期时间</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, RedisData.class);<br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);<br><br>        <span class="hljs-comment">// 5. 判断逻辑过期时间是否在当前时间之后（即数据是否仍然有效）</span><br>        <span class="hljs-keyword">if</span> (redisData.getExpireTime().isAfter(LocalDateTime.now())) &#123;<br>            <span class="hljs-comment">// 缓存未过期，直接返回数据</span><br>            <span class="hljs-keyword">return</span> r;<br>        &#125;<br><br>        <span class="hljs-comment">// 6. 缓存已过期，需要缓存重建</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);  <span class="hljs-comment">// 6.1 获取互斥锁</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">handedOff</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;          <span class="hljs-comment">// 标记是否已交给异步任务释放锁</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (isLock) &#123;<br>                <span class="hljs-comment">// 获取锁成功</span><br>                <span class="hljs-comment">// 6.2 Double Check：再次查询 Redis，避免其他线程已更新缓存</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">freshJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>                <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(freshJson)) &#123;<br>                 <span class="hljs-type">RedisData</span> <span class="hljs-variable">fresh</span> <span class="hljs-operator">=</span> JSONUtil.toBean(freshJson, RedisData.class);<br>                    <span class="hljs-keyword">if</span> (fresh.getExpireTime().isAfter(LocalDateTime.now())) &#123;<br>                        <span class="hljs-comment">// 缓存已更新，直接返回最新数据</span><br>                        <span class="hljs-keyword">return</span> JSONUtil.toBean((JSONObject) fresh.getData(), type);<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-comment">// 6.3 Double Check 仍然过期，提交异步任务重建缓存</span><br>                CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;<br>                   <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 6.3.1 查询数据库</span><br>                        <span class="hljs-type">R</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>                        <span class="hljs-comment">// 6.3.2 写入 Redis，设置新的逻辑过期时间</span><br>                        <span class="hljs-built_in">this</span>.setWithLogicalExpire(key, r1, time, timeUnit);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        <span class="hljs-comment">// 6.3.3 异步任务结束时释放锁</span><br>                        unlock(lockKey);<br>                    &#125;<br>                &#125;);<br>                handedOff = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 锁释放交给异步任务处理</span><br>            &#125;<br><br>            <span class="hljs-comment">// 6.4 返回过期的旧数据，保证可用性</span><br>            <span class="hljs-keyword">return</span> r;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 7. 如果当前线程持有锁但没有交给异步任务，则在此释放锁</span><br>            <span class="hljs-keyword">if</span> (isLock &amp;&amp; !handedOff) &#123;<br>                unlock(lockKey);<br>            &#125;<br>        &#125;<br>    &#125;<br>        <br>    <br>    <span class="hljs-comment">// 获取锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span>&#123;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>        <span class="hljs-comment">//不要直接返回，因为B-&gt;b，拆箱过程可能出现空指针</span><br>    &#125;<br><br>    <span class="hljs-comment">// 释放锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key)</span>&#123;<br>        stringRedisTemplate.delete(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-优惠券秒杀"><a href="#2-3-优惠券秒杀" class="headerlink" title="2.3 优惠券秒杀"></a>2.3 优惠券秒杀</h3><h4 id="全局唯一id生成"><a href="#全局唯一id生成" class="headerlink" title="全局唯一id生成"></a>全局唯一id生成</h4><p>全局唯一id构成：第1位为符号位，第2<del>32位为时间戳(31bit)，第33</del>64位为序列号(32bit)</p><table><thead><tr><th>符号位 1bit</th><th>时间戳 31bit</th><th>序列号 32bit</th></tr></thead><tbody><tr><td>0</td><td>00000000 … … 0000000</td><td>00000000 … … 00000000</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisIdWorker</span> &#123;<br>    <span class="hljs-comment">// 开始时间戳</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">BEGIN_TIMESTAMP</span> <span class="hljs-operator">=</span> <span class="hljs-number">1640995200L</span>;<br>    <span class="hljs-comment">// 序列号的位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COUNT_BITS</span> <span class="hljs-operator">=</span> <span class="hljs-number">32</span>;<br><br>    <span class="hljs-keyword">private</span> StringRedisTemplate redisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RedisIdWorker</span><span class="hljs-params">(StringRedisTemplate redisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.redisTemplate = redisTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">//基于redis的全局唯一id生成器 符号位0-时间戳31bit-序列号32bit</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId</span><span class="hljs-params">(String keyPrefix)</span>&#123;<br>        <span class="hljs-comment">// 1.生成时间戳</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">nowSecond</span> <span class="hljs-operator">=</span> now.toEpochSecond(ZoneOffset.UTC);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timeStamp</span> <span class="hljs-operator">=</span> nowSecond - BEGIN_TIMESTAMP;<br>        <span class="hljs-comment">// 2. 生成序列号（利用redis自增功能）</span><br>        <span class="hljs-comment">// 2.1 获取当前日期，精确到天（方便做统计）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy:MM:dd&quot;</span>));<br>        <span class="hljs-comment">// 2.2 自增长</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().increment(<span class="hljs-string">&quot;icr:&quot;</span> + keyPrefix + <span class="hljs-string">&quot;:&quot;</span> + date);<br><br>        <span class="hljs-comment">// 3. 拼接并返回</span><br>        <span class="hljs-keyword">return</span> timeStamp &lt;&lt; COUNT_BITS | count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过时间戳 + 每日自增序列号 来保证唯一性</li><li>生成的Redis key形如：icr:order:2025:08:26，value形如：98，说明今天新增了98个ID，下次生成id时，Redis会返回99</li><li>适用场景：在分布式架构中需要唯一标识的业务场景，例如电商系统中的订单号，银行交易流水号，快递单号等</li></ul><h4 id="实现下单"><a href="#实现下单" class="headerlink" title="实现下单"></a>实现下单</h4><ol><li><p>业务流程</p><p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/order1.png" alt="下单优惠券业务流程"> </p></li><li><p>超卖问题</p><p>根本原因：<strong>多个请求同时</strong>对同一库存数据进行<strong>读取和修改</strong>，但读取和修改操作<strong>不是原子性</strong>的，导致库存被多次扣减。</p><p>具体场景：<br> 假设某商品库存为1，同时来了两个请求(线程A和线程B)：</p><ul><li><p>线程A读取库存</p><ul><li>库存&#x3D;1</li></ul></li><li><p>线程B读取库存</p><ul><li>库存&#x3D;1（读取时没有变化，因为A还没更新）</li></ul></li><li><p>线程A扣减库存并写回</p><ul><li>库存变为0</li></ul></li><li><p>线程B扣减库存并写回</p><ul><li>线程B以为库存还有1，扣减后写回库存变为-1</li></ul></li></ul><p> 结果：库存被卖成了负数，产生了超卖现象。</p></li><li><p>超卖问题解决</p><ul><li><p>悲观锁：假设并发冲突一定会发生，<strong>在操作数据前先加锁</strong>，保证同一时刻只有一个线程能操作数据。比如Synchronized，Lock</p></li><li><p>乐观锁：假设并发冲突不一定发生，旨在更新数据的时候去<strong>判断</strong>是否有其他线程对数据进行了<strong>修改</strong>，如果没有修改，则认为自己是安全的，如果被修改，重试或异常。</p><ul><li>版本号法：新增一个<strong>版本号字段</strong>，每当数据做一次修改版本号就+1<br> <img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/order2.png" alt="乐观锁——版本号法"></li><li>CAS (Compare And Set)法：直接将stock库存字段当作版本号，简化版的版本号法<br> <img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/order3.png" alt="乐观锁——CAS法"></li></ul></li><li><p>方法对比：</p><ul><li>悲观锁：一致性优先，性能牺牲大</li><li>乐观锁：性能优先，一致性需通过重试保证，存在成功率低的问题</li></ul></li></ul></li></ol><h4 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a><strong>一人一单</strong></h4><ol><li>业务流程：</li></ol><p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/order4.png" alt="一人一单业务流程"></p><blockquote><p>注意点：查询+新增操作，需要保证原子性，否则就会出现超卖的现象，但是无法使用乐观锁（因为乐观锁是针对修改&#x2F;更新，而这里是新增一条数据），于是采用悲观锁方案synchronized </p></blockquote><ol start="2"><li><p>悲观锁方案</p><ul><li><p>加悲观锁synchronized： public synchronized Result createVoucherOder(Long voucherId)，问题是整个方法变成串行执行</p></li><li><p>我们只想在userid一样的情况下采取判断一人一单情况，所以优化悲观锁的位置，按照用户id值来加锁:synchronized(userId.toString().intern())</p><ul><li>（这里的inter()是因为toString方法是new 字符串，虽然userId一样，但new 出来的新字符串还是不同的对象，跟我们想要的需求不符合，而inter就是返回字符串对象的规范表示，也就是如果在字符串池中有相同值得String 对象，就会直接返回他）</li></ul></li><li><p>在上述中仍然有问题，通过synchronize完成自动释放锁后，其他线程就可以进入查询订单操作，但此时事务还没提交完（没写入数据库），所以仍有并发问题，所以锁应该加在函数外。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(userId.toString().inter())&#123;<br>    <span class="hljs-keyword">return</span> createVoucherOrder(voucherId);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>但上述中还存在一个事务问题，我们仅给createVoucherOrder函数加了@Transactional，而没有给调用它的函数加上事务，此时调用的就是VoucherOrderServiceImpl对象本身去执行方法，而事务要生效，必须是Spring动态代理对象去调用才行，即发生了<strong>事务失效</strong>：</p><ul><li>Spring 的事务是通过 AOP 实现的。如果方法是 在同一个类中调用的，AOP 切面无法生效，导致事务不生效。</li><li>原因：Spring AOP 是基于代理的，当在同一个类内直接调用时，事务不会被代理切入，因此事务失效。</li><li>解决方法：利用AopContext这个api的currentProxy方法拿到代理对象。</li><li>注意：还需要在pom中引入依赖aspectjweaver，以及在启动类加上注解@EnableAspectJAutoProxy(exposeProxy &#x3D; True)来暴露代理对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(userId.toString().inter())&#123;<br>    <span class="hljs-type">IvoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IvoucherOrderService) AopContext.currentProxy();<br>    <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>悲观锁的问题</strong>：只适合在单机模式下使用，在<strong>集群或分布式模式</strong>下，有多个JVM，每个JVM都维护自己的锁监视器，多个线程都会拿到锁，会有安全问题。</p></li></ul></li></ol><p><strong>3. 分布式锁</strong></p><p>要求：满足分布式系统或集群模式下<strong>多进程可见</strong>并且<strong>互斥</strong>的锁。</p><p>常见实现：</p><table><thead><tr><th>特性</th><th>MySQL</th><th>Redis</th><th>Zookeeper</th></tr></thead><tbody><tr><td>互斥</td><td>利用Mysql本身的互斥锁机制</td><td>利用setnx这样的互斥命令</td><td>利用结点的唯一性和有序性实现互斥</td></tr><tr><td>高可用</td><td>好</td><td>好</td><td>好</td></tr><tr><td>高性能</td><td>一般</td><td>好</td><td>一般</td></tr><tr><td>安全性</td><td>断开连接，自动释放</td><td>利用锁超时时间，进行锁的到期释放</td><td>临时节点，断开连接自动释放</td></tr></tbody></table><p>Redis分布式锁实现要点：</p><ol><li><p>在获取锁的时候要存入线程标识，在释放锁的时候，需要进行判断，锁的标识是否是自己的线程标识，避免误删别人的锁。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ID_PRIFIX</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>)+ <span class="hljs-string">&quot;-&quot;</span>; <span class="hljs-comment">// 用UUID来区分不同的JVM(服务)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSeconds)</span> &#123;<br>    <span class="hljs-comment">// 一个服务器中的不同线程用Thread.currentThread().getId()获取，UUID区分服务，Id区分线程----&gt;实现集群的锁的id标识</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PRIFIX + Thread.currentThread().getId();<br>    <span class="hljs-comment">// 获取锁——利用setnx来实现</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()<br>            .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSeconds, TimeUnit.SECONDS);<br>    <span class="hljs-comment">// 为了避免自动拆箱造成的空指针风险</span><br>    <span class="hljs-keyword">return</span> Boolean.TRUE.equals(success);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在释放锁的时候，需要注意<strong>判断和释放的原子性</strong>，否则还是可能在判断和释放之间有阻塞，导致超时释放锁，另一个线程拿到锁后，阻塞恢复，造成了误删锁的安全问题。</p><ol><li><p>实现步骤：</p><ol><li>用lua脚本实现原子性：</li></ol>  <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- KEYS[1]就是锁的key，ARGV[1]就是 就是线程标识</span><br><span class="hljs-comment">-- 比较线程标识与锁中标识是否一致</span><br><span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&quot;get&quot;</span>, KES[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>]) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 一致，删除锁</span><br>    <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&quot;del&quot;</span>, KES[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 如果不一致，返回0</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ol start="2"><li>利用RedisTemplate调用Lua脚本：</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 提前定义lua脚本</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;<br>      <br><span class="hljs-comment">// 静态代码块做初始化</span><br><span class="hljs-keyword">static</span>&#123;<br>UNLOCK_SCRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>UNLOCK_SCRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;unlock.lua&quot;</span>));<br>UNLOCK_SCRIPT.setResultType(Long.class);<br>&#125;<br>      <br><span class="hljs-comment">// 调用lua脚本</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 调用lua脚本_将判断和删除设计为原子操作</span><br>    stringRedisTemplate.execute(<br>            UNLOCK_SCRIPT,<br>            Collections.singletonList(KEY_PREFIX + name), <span class="hljs-comment">//参数1：KEY[1]，因为这里需要的是集合，所以不能直接传入锁的名称，需要调用这个单元素集合方法来传入</span><br>            ID_PRIFIX + Thread.currentThread().getId());<span class="hljs-comment">// 参数2：线程标识</span><br>&#125;<br></code></pre></td></tr></table></figure><p>存在问题：</p></li></ol></li></ol><ul><li>不可重入：同一线程无法多次获取同一把锁；</li><li>不可重试：获取锁只尝试一次就返回false，没有重试机制</li><li>超时释放：超时释放虽然可以避免死锁，这个时间长短设置权衡较难</li><li>主从一致性：如果Redis提供主从集群，主从同步存在延迟，当主节点宕机，如果从节点没有同步完成，这时候有锁的安全问题</li></ul><p><strong>4. Redisson</strong></p><p>定义：是一个在Redis基础上实现的Java驻内存数据网格（分布式工具集合）。提供一系列分布式的java常用对象和分布式服务，其中包含了分布式锁的实现。</p><p>快速入门：</p><ol><li>引入依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.13.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>配置Redisson客户端 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 配置</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://192.168.100.128:6379&quot;</span>).setPassword(<span class="hljs-string">&quot;hjm861303&quot;</span>);<br>        <span class="hljs-comment">// 创建RdssonClient对象</span><br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用Redisson的分布式锁 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleVoucherOrder</span><span class="hljs-params">(VoucherOrder voucherOrder)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> voucherOrder.getUserId();<br>    <span class="hljs-comment">// 创建锁对象</span><br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;lock:order:&quot;</span> + userId);<br>    <span class="hljs-comment">// 获取锁</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br><br>    <span class="hljs-keyword">if</span>(!isLock)&#123;<br>        <span class="hljs-comment">// 获取锁失败</span><br>        log.error(<span class="hljs-string">&quot;不允许重复下单&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 获取锁成功</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 执行下单任务</span><br>        proxy.createVoucherOder(voucherOrder);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalStateException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 释放锁</span><br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ul><li><p><strong>可重入锁实现</strong></p><ul><li>实现原理：在value部分不只是记录线程标识，而是通过<strong>哈希结构</strong>来记录 <strong>线程标识+重入次数</strong><br><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/redisson1.png"></li><li>注意点：<ul><li><p>在释放锁的时候，需要判断重入次数是否为0，如果不为零，还需要重置锁的有效期</p></li><li><p>判断锁和获取锁操作需要保证原子性，同样，判断锁和释放锁也需要保证原子性，因此采用lua脚本来实现原子性</p><p>  redisson获取锁实现：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;T&gt; RFuture&lt;T&gt; <span class="hljs-title function_">tryLockInnerAsync</span><span class="hljs-params">(<span class="hljs-type">long</span> waitTime, <span class="hljs-type">long</span> leaseTime, TimeUnit unit, <span class="hljs-type">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> &#123;<br>    internalLockLeaseTime = unit.toMillis(leaseTime);<br><br>    <span class="hljs-keyword">return</span> evalWriteAsync(getName(), LongCodec.INSTANCE, command,<br>            <span class="hljs-string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +<br>                    <span class="hljs-string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +<br>                    <span class="hljs-string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +<br>                    <span class="hljs-string">&quot;return nil; &quot;</span> +<br>                    <span class="hljs-string">&quot;end; &quot;</span> +<br>                    <span class="hljs-string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +<br>                    <span class="hljs-string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +<br>                    <span class="hljs-string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +<br>                    <span class="hljs-string">&quot;return nil; &quot;</span> +<br>                    <span class="hljs-string">&quot;end; &quot;</span> +<br>                    <span class="hljs-string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,<br>            Collections.singletonList(getName()), internalLockLeaseTime, getLockName(threadId));<br>    &#125;<br></code></pre></td></tr></table></figure><p>  释放锁实现：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> RFuture&lt;Boolean&gt; <span class="hljs-title function_">unlockInnerAsync</span><span class="hljs-params">(<span class="hljs-type">long</span> threadId)</span> &#123;<br><span class="hljs-keyword">return</span> evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,<br>        <span class="hljs-string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) then &quot;</span> +<br>                <span class="hljs-string">&quot;return nil;&quot;</span> +<br>                <span class="hljs-string">&quot;end; &quot;</span> +<br>                <span class="hljs-string">&quot;local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1); &quot;</span> +<br>                <span class="hljs-string">&quot;if (counter &gt; 0) then &quot;</span> +<br>                <span class="hljs-string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); &quot;</span> +<br>                <span class="hljs-string">&quot;return 0; &quot;</span> +<br>                <span class="hljs-string">&quot;else &quot;</span> +<br>                <span class="hljs-string">&quot;redis.call(&#x27;del&#x27;, KEYS[1]); &quot;</span> +<br>                <span class="hljs-string">&quot;redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); &quot;</span> +<br>                <span class="hljs-string">&quot;return 1; &quot;</span> +<br>                <span class="hljs-string">&quot;end; &quot;</span> +<br>                <span class="hljs-string">&quot;return nil;&quot;</span>,<br>        Arrays.asList(getName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>锁重试实现+看门狗机制</strong></p></li></ul><p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/order5.png" alt="redisson的获取锁与释放锁流程示意"></p><p>小结：</p><ul><li><p>可重入：利用hash结构记录线程id和重入次数</p></li><li><p>可重试：利用信号量和PubSub功能实现等待、唤醒，获取锁失败的重试机制</p></li><li><p>超时释放：利用watchDog看门狗机制，当获取锁成功后，开启一个后台定时任务，这个任务就是每隔一段时间（releaseTime&#x2F;3），就重置锁的超时时间</p><blockquote><p>注意：只有当leaseTime不指定或者传值为-1时，才会自动启用看门狗机制，初始租期默认30s，每隔10s续期一次</p></blockquote></li><li><p><strong>主从一致性</strong></p><p>redisson为了解决主从之间一致性问题，取消了主从节点，利用<strong>multiLock</strong>来解决。当获取锁的时候，必须所有节点都保存锁的标识才算获取锁成功。</p><p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/order6.png" alt="redisson的multiLock机制"></p></li></ul><h3 id="2-4-秒杀业务优化"><a href="#2-4-秒杀业务优化" class="headerlink" title="2.4 秒杀业务优化"></a>2.4 秒杀业务优化</h3><h4 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h4><p>优化流程：将判断库存和一人一单情况的部分放到redis中，然后保存相关的订单信息到阻塞队列中，后续线程异步执行保存订单等操作。</p><p>  <img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/order7.png" alt="秒杀业务优化流程图"></p><ol><li><p>在redis中做库存判断和一人一单<br>通过String结构存储剩余库存数据，用set结构存储下单用户id（保证了value的不重复）<br><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/order8.png" alt="redis做库存判断与一人一单流程">  </p><blockquote><p>注意：这里的流程需要保证原子性，所以采用lua脚本来实现  </p></blockquote></li><li><p>取出信息，异步写数据库<br><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/order9.png" alt="读取redis的结果"></p></li><li><p>需求优化</p><ol><li><p>新增优惠券时，将优惠券库存信息缓存到redis中</p></li><li><p>基于lua脚本，判断库存数量、一人一单情况，决定用户是否抢购成功</p></li><li><p>如果抢购成功，将优惠券id和用户id封装后存入阻塞队列</p></li><li><p>开启线程任务，从阻塞队列中获取信息，实现异步下</p></li></ol></li></ol><h4 id="消息队列实现"><a href="#消息队列实现" class="headerlink" title="消息队列实现"></a>消息队列实现</h4><h5 id="1-基于BlockingQueue实现阻塞队列"><a href="#1-基于BlockingQueue实现阻塞队列" class="headerlink" title="1.  基于BlockingQueue实现阻塞队列"></a>1.  基于BlockingQueue实现阻塞队列</h5>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 基于jvm的阻塞队列</span><br><span class="hljs-keyword">private</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br></code></pre></td></tr></table></figure><p>   然后调用orderTasks.add(voucherOrder);将封装好的voucherOrder放入消息队列中</p><ul><li>存在的问题：<ol><li>内存限制问题，需要提前就定义队列大小，可能出现超出队列范围的情况；</li><li>数据安全问题，基于内存保存的方式，如果出现宕机，导致内存丢失问题</li></ol></li></ul><h5 id="2-利用Redis基于List实现消息队列"><a href="#2-利用Redis基于List实现消息队列" class="headerlink" title="2. 利用Redis基于List实现消息队列"></a>2. 利用Redis基于List实现消息队列</h5><p>   <img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/MQ1.png" alt="基于List实现消息队列"></p><p>   利用命令组合BRPOP-LPUSH&#x2F; BLPOP-RPUSH</p><pre><code class="hljs">- 优点：  - 解决JVM内存上限的问题  - 基于Redis持久化，数据安全有保障  - 可以满足消息有序性- 缺点：  - 无法避免消息丢失 (pop = remove and get 如果中途宕机，会出现拿出消息，没有处理的情况)  - 只支持单消费者  </code></pre><h5 id="3-利用Redis基于PubSub实现消息队列"><a href="#3-利用Redis基于PubSub实现消息队列" class="headerlink" title="3. 利用Redis基于PubSub实现消息队列"></a>3. 利用Redis基于PubSub实现消息队列</h5><p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/MQ1.png" alt="基于PubSub实现消息队列"></p><p>发布订阅的消息传递模型，消费者可以订阅一个或者多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息（可以有多个消费者)</p><ul><li>相关命令：<ul><li>SUBSCRIBE channel[channel]：订阅一个或多个频道；</li><li>PUBLISH channel msg：向一个频道发送消息；</li><li>PSUBSCRIBE pattern[pattern]订阅与patter格式匹配的所有频道:<br>h?llo subscirbes to hello,hallo,hxllo…<br>h*llo _hllo heeeello….<br>h[ae]llo __hallo,hello but not hxllo</li></ul></li><li>优点：<ul><li>采用发布订阅模型，支持多生产，多消费</li></ul></li><li>缺点：<ul><li>不支持数据持久化</li><li>无法避免消息丢失</li><li>消息堆积有上限，超出上限会丢失</li></ul></li></ul><h5 id="4-利用Redis基于Stream实现消息队列"><a href="#4-利用Redis基于Stream实现消息队列" class="headerlink" title="4. 利用Redis基于Stream实现消息队列"></a>4. 利用Redis基于Stream实现消息队列</h5><p>Stream是Redis 5.0引入的一种新数据类型，可以实现一个功能非常完善的消息队列</p><ul><li><p>相关命令：<a href="https://www.runoob.com/redis/redis-stream.html">菜鸟教程Redis Stream</a></p></li><li><p>单消费者模式</p><p>  XREAD阻塞方式，读取最新的消息</p>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">XREAD COUNT <span class="hljs-number">1</span> BLOCK <span class="hljs-number">2000</span> STREAMS users $<br></code></pre></td></tr></table></figure><blockquote><p>当我们指定起始ID为$时，代表读取最新的消息，如果我们处理一条消息的过程中，有<strong>超过1条以上</strong>的消息到达队列，则下次获取的时候也只能获取到最新的一条，会出现<strong>漏读消息</strong>的问题</p></blockquote><ul><li>XREAD命令特点：<ul><li>消息可回溯（读取消息后，消息不会丢失）</li><li>一个消息可以被多个消费者读取</li><li>可以阻塞读取</li><li>有消息漏读的风险</li></ul></li></ul></li><li><p>消费者组模式</p><p>  消费者组(Consumer Group): 多个消费者划分到一个组中，监听同一个队列。其特点包括：</p><ul><li>消息分流：队列中消息会分流给组内的不同消费者，而不是重复消费，加快消息处理速度</li><li>消息标识：消费者组会维护一个标识，记录最后一个被处理的消息。确保每个消息都被消费。</li><li>消息确认：消费者获取消息后，消息处于pending状态，存入pending-list。处理完成后，通过XACK来确认消息，标记消息为已处理，才会从pending-list移除</li></ul><p>创建消费者组：</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">XGROUP CREATE <span class="hljs-built_in">s1</span>(队列名称) <span class="hljs-built_in">g1</span>(消费者组名) ID <span class="hljs-selector-attr">[MKSTREAM]</span><br></code></pre></td></tr></table></figure><p>  读取未消费的消息：<br>  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">XREADGROUP <span class="hljs-keyword">GROUP</span> <span class="hljs-title">g1</span> c1 COUNT <span class="hljs-number">1</span> BLOCK <span class="hljs-number">2000</span> STREAMS s1 &gt;<br></code></pre></td></tr></table></figure></p><p>  确认消息：<br>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">XACK</span> s1 g1 ID<span class="hljs-meta"> [ID ...]</span><br></code></pre></td></tr></table></figure></p><p>  查看pending-list：<br>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">XPENDING</span> s1 g1 - + <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></p><p>  读取pending-list中的第一条消息：<br>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">XREADGROUP</span> GROUP g1 c1 COUNT <span class="hljs-number">1</span> BLOCK <span class="hljs-number">2000</span> STREAMS s1 <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></p><ul><li>XREADGROUP命令特点：<ul><li>消息可回溯</li><li>多消费者争抢消息，加快消费速度</li><li>可以阻塞读取</li><li>没有消息漏读的风险</li><li>有消费确认机制，保证消息至少被消费一次</li></ul></li></ul></li></ul><h5 id="5-消息队列总结"><a href="#5-消息队列总结" class="headerlink" title="5. 消息队列总结"></a>5. 消息队列总结</h5><table><thead><tr><th></th><th>List</th><th>PubSub</th><th>Stream</th></tr></thead><tbody><tr><td><strong>消息持久化</strong></td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td><strong>阻塞读取</strong></td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td><strong>消息堆积处理</strong></td><td>受限于内存空间，可以利用多消费者加快处理</td><td>受限于消费者缓冲区</td><td>受限于队列长度，可以利用消费者组提高消费速度</td></tr><tr><td><strong>消息确认机制</strong></td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td><strong>消息回溯</strong></td><td>不支持</td><td>不支持</td><td>支持</td></tr></tbody></table><h4 id="代码实现——基于Stream消息队列"><a href="#代码实现——基于Stream消息队列" class="headerlink" title="代码实现——基于Stream消息队列"></a>代码实现——基于Stream消息队列</h4><ol><li>新增优惠券时，将优惠券信息缓存到redis：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSeckillVoucher</span><span class="hljs-params">(Voucher voucher)</span> &#123;<br>    <span class="hljs-comment">// 保存优惠券</span><br>    save(voucher);<br>    <span class="hljs-comment">// 保存秒杀信息</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">seckillVoucher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SeckillVoucher</span>();<br>    seckillVoucher.setVoucherId(voucher.getId());<br>    seckillVoucher.setStock(voucher.getStock());<br>    seckillVoucher.setBeginTime(voucher.getBeginTime());<br>    seckillVoucher.setEndTime(voucher.getEndTime());<br>    seckillVoucherService.save(seckillVoucher);<br><br>    <span class="hljs-comment">// 保存秒杀库存到redis中</span><br>    stringRedisTemplate.opsForValue().set( SECKILL_STOCK_KEY +voucher.getId(),voucher.getStock().toString());<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>创建Stream类型的消息队列，命名为stream.orders</li><li>基于lua脚本判断库存数量、一人一单情况：</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--1. 参数列表</span><br><span class="hljs-comment">--1.1 优惠券id——根据它得到库存数量</span><br><span class="hljs-keyword">local</span> voucherId = ARGV[<span class="hljs-number">1</span>]<br><span class="hljs-comment">--1.2 用户id——根据它查询用户购买情况（一人一单）</span><br><span class="hljs-keyword">local</span> userId = ARGV[<span class="hljs-number">2</span>]<br><span class="hljs-comment">--1.3 订单id</span><br><span class="hljs-keyword">local</span> orderId = ARGV[<span class="hljs-number">3</span>]<br><br><span class="hljs-comment">--2.数据key</span><br><span class="hljs-comment">--2.1 库存key</span><br><span class="hljs-keyword">local</span> stockKey = <span class="hljs-string">&#x27;seckill:stock:&#x27;</span> .. voucherId<br><span class="hljs-comment">--2.2 订单情况key</span><br><span class="hljs-keyword">local</span> orderKey = <span class="hljs-string">&#x27;seckill:order:&#x27;</span> .. voucherId<br><br><span class="hljs-comment">--3.业务逻辑</span><br><span class="hljs-comment">-- 3.1 判断库存是否充足 get stockKey</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;get&#x27;</span>,stockKey)) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 3.2 库存不足，返回1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--3.3 判断用户是否下单 SISMEMBER orderKey userId</span><br><span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&#x27;sismember&#x27;</span>, orderKey,userId) == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 3.4 表示用户存在，不满足一人一单</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--3.5 扣取库存 incrby stockKey -1</span><br>redis.call(<span class="hljs-string">&#x27;incrby&#x27;</span>,stockKey,<span class="hljs-number">-1</span>)<br><br><span class="hljs-comment">--3.6 下单（保存用户到orderKey中）sadd orderKey userId</span><br>redis.call(<span class="hljs-string">&#x27;sadd&#x27;</span>, orderKey, userId)<br><br><span class="hljs-comment">--3.7 发送消息到队列中，XADD stream.orders * k1 v1</span><br>redis.call(<span class="hljs-string">&#x27;xadd&#x27;</span>, <span class="hljs-string">&#x27;stream.orders&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-string">&#x27;userId&#x27;</span>,userId,<span class="hljs-string">&#x27;voucherId&#x27;</span>,voucherId,<span class="hljs-string">&#x27;id&#x27;</span>,orderId)<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ol start="4"><li>基于lua脚本判断库存数量、一人一单情况，将满足条件的订单放入阻塞队列中：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; SECKILL_SCRIPT;<br><br><span class="hljs-comment">// 配置script</span><br><span class="hljs-keyword">static</span>&#123;<br>    SECKILL_SCRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>    SECKILL_SCRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;seckill.lua&quot;</span>));<br>    SECKILL_SCRIPT.setResultType(Long.class);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>    <span class="hljs-comment">// 获取用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 获取订单</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>    <span class="hljs-comment">// 1. 执行lua脚本 (脚本，所需的key,其他参数列表)_判断资格+加入消息队列</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.execute(SECKILL_SCRIPT, Collections.emptyList(),<br>            voucherId.toString(),<br>            userId.toString(),<br>            String.valueOf(orderId)<br>    );<br><br>    <span class="hljs-comment">// 2. 判断脚本结果是否为0：0表示有资格</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> result.intValue();<br>    <span class="hljs-keyword">if</span>(r != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 2.1 不为0：没有购买资格</span><br>        <span class="hljs-keyword">return</span> Result.fail(r == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;库存不足啦！&quot;</span>: <span class="hljs-string">&quot;不能重复下单&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 获取代理对象，因为子线程不能访问主线程中的数据，所以放在这里初始化，然后添加到成员变量，让子线程也可以获取到</span><br>    proxy =(IVoucherOrderService) AopContext.currentProxy();<br><br>    <span class="hljs-comment">// 4. 返回订单id</span><br>    <span class="hljs-keyword">return</span> Result.ok(orderId);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>开启线程任务，从消息队列中获取信息，实现异步下单</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 线程池</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">SECKILL_ORDER_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br><br><span class="hljs-comment">// 线程任务</span><br><span class="hljs-comment">// 当前类初始化完成后马上执行init()</span><br><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    SECKILL_ORDER_EXECUTOR.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrderHandler</span>());<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;stream.orders&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 1. 获取redis中基于stream消息队列中的订单信息 xreadgroup group g1 c1 count 1 block 2000 streams streams.order &gt;</span><br>                <span class="hljs-comment">// 这里消费者名称c1在多节点情况时应该配置在yaml文件中，启用多节点的时候名称就不会冲突</span><br>                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(<br>                        Consumer.from(<span class="hljs-string">&quot;g1&quot;</span>, <span class="hljs-string">&quot;c1&quot;</span>),<br>                        StreamReadOptions.empty().count(<span class="hljs-number">1</span>).block(Duration.ofSeconds(<span class="hljs-number">2</span>)),<br>                        StreamOffset.create(queueName, ReadOffset.lastConsumed())<br>                );<br>                <span class="hljs-comment">// 2. 判断消息获取是否成功</span><br>                <span class="hljs-keyword">if</span>(list == <span class="hljs-literal">null</span> || list.isEmpty())&#123;<br>                    <span class="hljs-comment">// 2.1 如果获取失败，说明没有消息，继续循环获取</span><br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-comment">// 2.2 获取成功，解析消息中的订单信息</span><br>                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="hljs-number">0</span>);<br>                Map&lt;Object, Object&gt; value = record.getValue();<br>                <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(value, <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>(), <span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">// 3. 创建订单——将订单添加到数据库中</span><br>                handleVoucherOrder(voucherOrder);<br>                <span class="hljs-comment">// 4. ACK确认</span><br>                stringRedisTemplate.opsForStream().acknowledge(queueName,<span class="hljs-string">&quot;g1&quot;</span>,record.getId());<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-comment">// 从pending list中取出异常消息</span><br>                handlePendingList();<br>                log.error(<span class="hljs-string">&quot;处理订单异常&quot;</span>, e);<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handlePendingList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 1. 获取pending-list中的订单信息 xreadgroup group g1 c1 count 1 streams streams.order 0</span><br>                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(<br>                        Consumer.from(<span class="hljs-string">&quot;g1&quot;</span>, <span class="hljs-string">&quot;c1&quot;</span>),<br>                        StreamReadOptions.empty().count(<span class="hljs-number">1</span>),<br>                        StreamOffset.create(queueName, ReadOffset.from(<span class="hljs-string">&quot;0&quot;</span>))<br>                );<br>                <span class="hljs-comment">// 2. 判断消息获取是否成功</span><br>                <span class="hljs-keyword">if</span>(list == <span class="hljs-literal">null</span> || list.isEmpty())&#123;<br>                    <span class="hljs-comment">// 2.1 如果获取失败，说明pending-list中没有消息，结束循环</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// 2.2 获取成功，解析消息中的订单信息</span><br>                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="hljs-number">0</span>);<br>                Map&lt;Object, Object&gt; value = record.getValue();<br>                <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(value, <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>(), <span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">// 3. 创建订单——将订单添加到数据库中</span><br>                handleVoucherOrder(voucherOrder);<br>                <span class="hljs-comment">// 4. ACK确认</span><br>                stringRedisTemplate.opsForStream().acknowledge(queueName,<span class="hljs-string">&quot;g1&quot;</span>,record.getId());<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-comment">// 处理pending list中消息失败，继续循环操作继续取，为了避免死循环占用cpu资源，休眠20秒</span><br>                log.error(<span class="hljs-string">&quot;处理pending list异常&quot;</span>, e);<br>                <span class="hljs-keyword">try</span>&#123;<br>                    Thread.sleep(<span class="hljs-number">20</span>);<br>                &#125;<span class="hljs-keyword">catch</span> (InterruptedException e1)&#123;<br>                    e1.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;    <br><br></code></pre></td></tr></table></figure><h3 id="2-5-达人探店"><a href="#2-5-达人探店" class="headerlink" title="2.5 达人探店"></a>2.5 达人探店</h3><h4 id="发布探店笔记"><a href="#发布探店笔记" class="headerlink" title="发布探店笔记"></a>发布探店笔记</h4><p>上传照片：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;upload&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;blog&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">uploadImage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile image)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取原始文件名称</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> image.getOriginalFilename();<br>            <span class="hljs-comment">// 生成新文件名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> createNewFileName(originalFilename);<br>            <span class="hljs-comment">// 保存文件（企业中是有一个文件服务器，但是现在直接保存到前端服务器中）</span><br>            image.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(SystemConstants.IMAGE_UPLOAD_DIR, fileName));<br>            <span class="hljs-comment">// 返回结果</span><br>            log.debug(<span class="hljs-string">&quot;文件上传成功，&#123;&#125;&quot;</span>, fileName);<br>            <span class="hljs-keyword">return</span> Result.ok(fileName);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;文件上传失败&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>保存探店博文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/blog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogController</span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IBlogService blogService;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">saveBlog</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Blog blog)</span>&#123;<br>        <span class="hljs-comment">//获取登录用户</span><br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserHolder.getUser();<br>        blog.setUserId(user.getId());<br>        <span class="hljs-comment">//保存探店博文</span><br>        blogService.save(blog);<br>        <span class="hljs-comment">//返回id</span><br>        <span class="hljs-keyword">return</span> Result.ok(blog.getId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查看探店笔记"><a href="#查看探店笔记" class="headerlink" title="查看探店笔记"></a>查看探店笔记</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;BlogMapper, Blog&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBlogService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//1. 查询blog</span><br>        <span class="hljs-type">Blog</span> <span class="hljs-variable">blog</span> <span class="hljs-operator">=</span> getById(id);<br>        <span class="hljs-keyword">if</span>(blog == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;笔记不存在！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2. 查询blog发布用户</span><br>        queryBlogUser(blog);<br>        <span class="hljs-keyword">return</span> Result.ok(blog);<br>    &#125;<br><br>    <span class="hljs-comment">//查询blog发布的用户并封装到blog类中</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryBlogUser</span><span class="hljs-params">(Blog blog)</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> blog.getUserId();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getById(userId);<br>        blog.setName(user.getNickName());<br>        blog.setIcon(user.getIcon());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="点赞功能"><a href="#点赞功能" class="headerlink" title="点赞功能"></a>点赞功能</h4><p>需求：</p><ol><li>同一个用户只能点赞一次，再次点击就取消点赞；</li><li>如果当前用户已经点赞，则点赞按钮高亮显示(前端判断字段Blog类中的isLike属性)</li></ol><p>实现：</p><ol><li>给Blog类中添加isLike字段，标识是否被当前用户点赞</li><li>修改点赞功能，利用Redis的set集合判断是否点再过，未点赞过则点赞数+1，已点赞过则点赞数-1</li><li>修改根据id查询Blog的业务，判断当前登录用户是否点赞过，赋值给isLike字段</li><li>修改分页查询Blog业务，判断当前登录用户是否点赞过，赋值给isLike字段</li></ol><p>代码实现：</p><ol><li><p>Blog类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@EqualsAndHashCode(callSuper = false)</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-meta">@TableName(&quot;tb_blog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Blog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>...<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 是否点赞过了</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> Boolean isLike;<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>点赞功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">likeBlog</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 1. 获取登录用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 2. 判断当前登录用户是否已经点赞</span><br>    <span class="hljs-type">Double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForZSet().score(BLOG_LIKED_KEY + id, userId.toString());<br>    <span class="hljs-keyword">if</span>(score==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">// 3. 如果未点赞，可以点赞</span><br>        <span class="hljs-comment">// 3.1 数据库点赞数+1</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> update().setSql(<span class="hljs-string">&quot;liked = liked + 1&quot;</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id).update();<br>        <span class="hljs-keyword">if</span>(isSuccess)&#123;<br>            <span class="hljs-comment">// 3.2 保存用户信息到redis中的sorted-set中 ZADD key value score</span><br>            stringRedisTemplate.opsForZSet().add(BLOG_LIKED_KEY + id,userId.toString(), System.currentTimeMillis());<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 4. 已经点赞，取消点赞</span><br>        <span class="hljs-comment">// 4.1 数据库点赞数-1</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> update().setSql(<span class="hljs-string">&quot;liked = liked - 1&quot;</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id).update();<br>        <span class="hljs-comment">// 4.2 删除在redis集合中的用户信息</span><br>        <span class="hljs-keyword">if</span>(isSuccess)&#123;<br>            <span class="hljs-comment">// 3.2 删除用户信息到redis集合中</span><br>            stringRedisTemplate.opsForZSet().remove(BLOG_LIKED_KEY + id,userId.toString());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>id查询</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogById</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">//1. 查询blog</span><br>    <span class="hljs-type">Blog</span> <span class="hljs-variable">blog</span> <span class="hljs-operator">=</span> getById(id);<br>    <span class="hljs-keyword">if</span>(blog == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;笔记不存在！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//2. 查询blog有关用户</span><br>    queryBlogUser(blog);<br>    <span class="hljs-comment">//3. 查询blog是否被点赞</span><br>    isBlogLiked(blog);<br>    <span class="hljs-keyword">return</span> Result.ok(blog);<br>&#125;<br>  <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isBlogLiked</span><span class="hljs-params">(Blog blog)</span> &#123;<br>    <span class="hljs-comment">// 1. 获取登录用户</span><br>    <span class="hljs-type">UserDTO</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserHolder.getUser();<br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 用户未登录，无需查询是否点赞</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> user.getId();<br>    <span class="hljs-comment">// 2. 判断当前登录用户是否已经点赞</span><br>    <span class="hljs-type">Double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForZSet().score(BLOG_LIKED_KEY + blog.getId(), userId.toString());<br>    blog.setIsLike(score != <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分页查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryHotBlog</span><span class="hljs-params">(Integer current)</span> &#123;<br>    <span class="hljs-comment">// 根据用户查询</span><br>    Page&lt;Blog&gt; page = query()<br>            .orderByDesc(<span class="hljs-string">&quot;liked&quot;</span>)<br>            .page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));<br>    <span class="hljs-comment">// 获取当前页博客</span><br>    List&lt;Blog&gt; records = page.getRecords();<br>    <span class="hljs-comment">// 对每个博客查询关联用户和点赞情况</span><br>    records.forEach(blog -&gt; &#123;<br>        <span class="hljs-built_in">this</span>.queryBlogUser(blog);<br>        <span class="hljs-built_in">this</span>.isBlogLiked(blog);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> Result.ok(records);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="点赞排行榜"><a href="#点赞排行榜" class="headerlink" title="点赞排行榜"></a>点赞排行榜</h4><p>需求：</p><p>按照点赞时间先后排序，返回top5用户。</p><p>实现：</p><p>通过sorted set结构实现排序功能，完成点赞列表queryBlogLikes</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogLikes</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 1. 查询top5的点赞用户 zrange key 0 4</span><br>    Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(BLOG_LIKED_KEY + id, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">if</span>(top5==<span class="hljs-literal">null</span>||top5.isEmpty())&#123;<br>        <span class="hljs-keyword">return</span> Result.ok(Collections.emptyList());<br>    &#125;<br>    <span class="hljs-comment">// 2. 解析出用户id</span><br>    List&lt;Long&gt; ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">idStr</span> <span class="hljs-operator">=</span> StrUtil.join(<span class="hljs-string">&quot;,&quot;</span>, ids);<br>    <span class="hljs-comment">// 3. 根据用户id查询用户</span><br>    List&lt;UserDTO&gt; userDTOS = userService.query().in(<span class="hljs-string">&quot;id&quot;</span>,ids).last(<span class="hljs-string">&quot;ORDER BY FIELD (id,&quot;</span> + idStr + <span class="hljs-string">&quot;)&quot;</span>).list()<br>            .stream()<br>            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))<br>            .collect(Collectors.toList());<br>    <span class="hljs-comment">// 4. 返回</span><br>    <span class="hljs-keyword">return</span> Result.ok(userDTOS);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-好友关注"><a href="#2-6-好友关注" class="headerlink" title="2.6 好友关注"></a>2.6 好友关注</h3><h4 id="关注与取关"><a href="#关注与取关" class="headerlink" title="关注与取关"></a>关注与取关</h4><p>判断是否关注</p><p>请求URL：&#x2F;follow&#x2F;or&#x2F;not&#x2F;{id}</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">isFollow</span><span class="hljs-params">(Long followUserId)</span> &#123;<br>    <span class="hljs-comment">//  获取登录用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br><br>    <span class="hljs-comment">// 1. 查询是否关注 select count from tb_follow where userId = ? and follow_user_id = ?</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;follow_user_id&quot;</span>, followUserId).count();<br>    <span class="hljs-comment">// 2. 判断</span><br>    <span class="hljs-keyword">return</span> Result.ok(count &gt; <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>关注&#x2F;取关用户</p><p>请求URL：&#x2F;follow&#x2F;{id}&#x2F;{isFollow}</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">follow</span><span class="hljs-params">(Long followUserId, Boolean isFollow)</span> &#123;<br>    <span class="hljs-comment">//  获取登录用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;follow:&quot;</span> + userId;<br><br>    <span class="hljs-comment">// 1. 判断是要关注还是取关</span><br>    <span class="hljs-keyword">if</span>(isFollow)&#123;<br>        <span class="hljs-comment">// 2. 关注，新增数据</span><br>        <span class="hljs-type">Follow</span> <span class="hljs-variable">follow</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Follow</span>();<br>        follow.setUserId(userId);<br>        follow.setFollowUserId(followUserId);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> save(follow);<br>        <span class="hljs-keyword">if</span>(isSuccess)&#123;<br>            <span class="hljs-comment">// 把关注用户的id放入redis集合 sadd userId followUserId</span><br>            stringRedisTemplate.opsForSet().add(key, followUserId.toString());<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 3. 取关，删除 delete from tb_follow where userId = ? and follo_user_id = ?</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;Follow&gt;().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;follow_user_id&quot;</span>, followUserId));<br>        <span class="hljs-keyword">if</span>(isSuccess)&#123;<br>            <span class="hljs-comment">// 把关注用户的id移除redis集合 remove userId followUserId</span><br>            stringRedisTemplate.opsForSet().remove(key, followUserId.toString());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="共同关注"><a href="#共同关注" class="headerlink" title="共同关注"></a>共同关注</h4><p>请求URL：&#x2F;follow&#x2F;common&#x2F;{id}</p><p>思路：想要实现交集的运算，可以使用redis中的set结构，key为userId，通过SINTER s1 s2找到集合s1和s2的交集</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">followCommons</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 1. 获取当前用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;follow:&quot;</span> + userId;<br>    <span class="hljs-comment">// 2. 求交集</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;follow:&quot;</span> + id;<br>    Set&lt;String&gt; intersect = stringRedisTemplate.opsForSet().intersect(key, key2);<br>    <span class="hljs-keyword">if</span>(intersect.isEmpty() || intersect == <span class="hljs-literal">null</span> )&#123;<br>        <span class="hljs-comment">// 无交集</span><br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br>    <span class="hljs-comment">// 3. 解析id集合</span><br>    List&lt;Long&gt; ids = intersect.stream().map(Long::valueOf).collect(Collectors.toList());<br>    <span class="hljs-comment">// 4. 查询用户</span><br>    List&lt;UserDTO&gt; users = userService.listByIds(ids)<br>            .stream()<br>            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))<br>            .collect(Collectors.toList());<br>    <span class="hljs-keyword">return</span> Result.ok(users);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="关注推送"><a href="#关注推送" class="headerlink" title="关注推送"></a>关注推送</h4><p>Feed流模式</p><ul><li><p>TimeLine：不做内容筛选，按照内容发布时间排序，常用于好友或关注。例如：朋友圈</p><ul><li><p>优点：信息全面，不会丢失。实现相对简单</p></li><li><p>缺点：信息噪声较多，用户不一定感兴趣</p></li><li><p>实现方案：</p><ul><li><p>拉模式（读扩散）</p><ul><li><p>只有用户在读取关注用户消息时候才拉去最新消息并按时间排序</p></li><li><p>优点：节省内存空间</p></li><li><p>缺点：每次读都需要临时拉取+排序，延迟较高</p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/hexo-blog\source\_posts\Redis项目及原理总结\feed1.png" alt="拉模式示意图" style="zoom:67%;"></li></ul></li><li><p>推模式（写扩散）</p><ul><li><p>用户直接将消息推送到所有粉丝的收件箱中</p></li><li><p>优点：延迟较低</p></li><li><p>缺点：内存占用较高</p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/hexo-blog\source\_posts\Redis项目及原理总结\feed2.png" alt="推模式示意图" style="zoom:67%;"></li></ul></li><li><p>推拉结合（读写混合）</p><ul><li><p>兼具读扩散和写扩散</p></li><li><p>对于粉丝量很少的用户，采用推模式；对于粉丝量很大的用户，针对活跃粉丝（数量较少）采用推模式，普通粉丝（数量较多）采用拉模式。</p><img src="/2025/08/20/Redis%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/hexo-blog\source\_posts\Redis项目及原理总结\feed3.png" alt="推拉结合模式示意图" style="zoom:67%;"></li></ul></li></ul></li></ul></li><li><p>智能排序：利用算法屏蔽掉违规、用户不感兴趣的内容。推送用户感兴趣的信息来吸引用户</p><ul><li>优点：投喂用户感兴趣信息，用户粘度高，容易沉迷</li><li>缺点：算法不精准可能会起反作用</li></ul></li></ul><p>业务需求</p><ol><li><p>新增笔记的业务，在保存blog的同时，推送到粉丝的收件箱</p></li><li><p>收件箱可以根据时间戳排序，必须使用redis的数据结构实现</p></li><li><p>查询收件箱数据时，可以实现分页查询</p></li></ol><p>Redis数据结构选择</p><ul><li>Feed流中的数据会不断更新，所以数据角标也在变化，因此不能采用传统的分页模式</li><li>采用滚动分页模式（记录前一次查询的最后一个数据，再从最后一个数据开始查询）</li><li>List结构不支持滚动分页模式，而sortedSet支持按照score值进行查询，可以实现滚动分页，查询出的数据不会重复</li></ul><p>代码实现</p><ul><li>推送笔记到粉丝的收件箱</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">saveBlog</span><span class="hljs-params">(Blog blog)</span> &#123;<br>    <span class="hljs-comment">// 1. 获取登录用户</span><br>    <span class="hljs-type">UserDTO</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserHolder.getUser();<br>    blog.setUserId(user.getId());<br>    <span class="hljs-comment">// 2. 保存探店笔记</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> save(blog);<br>    <span class="hljs-keyword">if</span>(!isSuccess)&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;新增笔记失败！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 3. 查询笔记作者的所有粉丝 select * from tb_follow where follow_user_id = ?</span><br>    List&lt;Follow&gt; follows = followService.query().eq(<span class="hljs-string">&quot;follow_user_id&quot;</span>, user.getId()).list();<br>    <span class="hljs-comment">// 4. 推送笔记id给所有粉丝</span><br>    <span class="hljs-keyword">for</span> (Follow follow : follows) &#123;<br>        <span class="hljs-comment">// 4.1 获取粉丝id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> follow.getUserId();<br>        <span class="hljs-comment">// 4.2 推送</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> FEED_KEY+ userId;<br>        stringRedisTemplate.opsForZSet().add(key,blog.getId().toString(), System.currentTimeMillis());<br>    &#125;<br>    <span class="hljs-comment">// 3. 返回id</span><br>    <span class="hljs-keyword">return</span> Result.ok(blog.getId());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>推模式实现feed流（获取关注博主的最新博客），并且以滚动分页查询的方式展示</p><ul><li><p>滚动分页查询参数：</p><table><thead><tr><th align="center">参数</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">max</td><td align="center">第一次查询：当前时间戳 | 已经查询过：上次查询的最小时间戳</td></tr><tr><td align="center">min</td><td align="center">最小时间戳：0</td></tr><tr><td align="center">offset</td><td align="center">第一次查询：0 | 已经查询过：<strong>上一次查询结果中与最小值元素一致的个数</strong></td></tr><tr><td align="center">count</td><td align="center">与前端协调好要展现多少条，eg 3条</td></tr></tbody></table></li></ul></li></ul><p>封装滚动分页结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">滚动分页结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScrollResult</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;?&gt; list;<br>    <span class="hljs-keyword">private</span> Long minTime;<br>    <span class="hljs-keyword">private</span> Integer offset;<br>&#125;<br></code></pre></td></tr></table></figure><p>用户通过滚动分页查询到收件箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogOfFollow</span><span class="hljs-params">(Long max, Integer offset)</span> &#123;<br>    <span class="hljs-comment">// 1. 获取当前用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 2. 查询收件箱 ZREVRANGEBYSCORE key max min LIMIT offset count</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> FEED_KEY + userId;<br>    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples = stringRedisTemplate.opsForZSet().reverseRangeByScoreWithScores(key, <span class="hljs-number">0</span>, max, offset, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(typedTuples==<span class="hljs-literal">null</span>||typedTuples.isEmpty())&#123;<br>        <span class="hljs-comment">// 非空判断</span><br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br>    <span class="hljs-comment">// 3. 解析数据blogId, score(时间戳), offset(与查询出的最后一个元素相同的元素数量)</span><br>    List&lt;Long&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(typedTuples.size());<br>    <span class="hljs-type">long</span> <span class="hljs-variable">minTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 记录与元组中最小时间相同得元素个数=offset</span><br>    <span class="hljs-keyword">for</span>(ZSetOperations.TypedTuple&lt;String&gt; typedTuple : typedTuples)&#123;<br>        <span class="hljs-comment">// 3.1 blogId</span><br>        ids.add(Long.valueOf(typedTuple.getValue()));<br>        <span class="hljs-comment">// 3.2 score(时间戳)_只保留最后一个最小时间就可以 os记录与最小score相同的元素个数，至少是1个</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> typedTuple.getScore().longValue(); <br>        <span class="hljs-comment">// 取出的只有可能是 1. 和上一个元素score相同; 2. 比上一个还小，因为是zset，按照score倒序的</span><br>        <span class="hljs-keyword">if</span>(time == minTime)&#123;<br>            os++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            minTime = typedTuple.getScore().longValue();<br>            os = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 4. 根据id查询blog</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">idStr</span> <span class="hljs-operator">=</span> StrUtil.join(<span class="hljs-string">&quot;,&quot;</span>, ids);<br>    List&lt;Blog&gt; blogs = query().in(<span class="hljs-string">&quot;id&quot;</span>,ids).last(<span class="hljs-string">&quot;ORDER BY FIELD (id,&quot;</span> + idStr + <span class="hljs-string">&quot;)&quot;</span>).list();<br>    <span class="hljs-comment">// 不能直接用List&lt;Blog&gt; blogs = listByIds(ids)的原因是：这种方式是基于MySQL的in语句进行查询，无法保证顺序，需要用orderby来保证顺序</span><br><br>    <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;<br>        <span class="hljs-comment">//查询blog有关用户</span><br>        queryBlogUser(blog);<br>        <span class="hljs-comment">//查询blog是否被点赞</span><br>        isBlogLiked(blog);<br>    &#125;<br><br>    <span class="hljs-comment">// 5. 封装并返回</span><br>    <span class="hljs-type">ScrollResult</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScrollResult</span>();<br>    r.setList(blogs);<br>    r.setOffset(os);<br>    r.setMinTime(minTime);<br>    <span class="hljs-keyword">return</span> Result.ok(r);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-附近商铺"><a href="#2-7-附近商铺" class="headerlink" title="2.7 附近商铺"></a>2.7 附近商铺</h3><p>GEO数据结构</p><p>Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，该功能在 Redis 3.2 版本新增。</p><p>Redis GEO 操作方法有：</p><ul><li>geoadd：添加地理位置的坐标。（包含：经度，纬度，值）</li><li>geopos：获取地理位置的坐标。</li><li>geodist：计算两个位置之间的距离。</li><li>georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。（6.2以后已废弃）</li><li>geosearch：在指定范围内搜索member，并按照与指定点之间的距离排序后返回，范围可以是圆形或矩形。</li><li>geosearchstore：与geosearch功能类似，不过它可以把结果存储到一个指定的key中</li><li>geohash：返回一个或多个位置对象的 geohash 值。</li></ul><p>前置处理</p><ul><li>导入商铺的经纬度信息到redis中，key为typeId（店铺类型），值为店铺id</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">loadShopLoc</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 1. 查询店铺信息</span><br>    List&lt;Shop&gt; list = shopService.list();<br>    <span class="hljs-comment">// 2. 把店铺分组（按照typeid分组，id一致的放到一个集合中）</span><br>    Map&lt;Long, List&lt;Shop&gt;&gt; map =  list.stream().collect(Collectors.groupingBy(Shop::getTypeId));<br>    <span class="hljs-comment">// 3. 分批完成写入redis中</span><br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Long, List&lt;Shop&gt;&gt; entry : map.entrySet()) &#123;<br>        <span class="hljs-comment">// 3.1 获取类型id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">typeId</span> <span class="hljs-operator">=</span> entry.getKey();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> SHOP_GEO_KEY + typeId;<br>        <span class="hljs-comment">// 3.2 获取同类型的店铺集合</span><br>        List&lt;Shop&gt; value = entry.getValue();<br>        List&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt;locations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(value.size());<br>        <span class="hljs-comment">// 3.3 写入redis GEOADD key 经度 纬度 member</span><br>        <span class="hljs-keyword">for</span> (Shop shop : value) &#123;<br>            <span class="hljs-comment">//stringRedisTemplate.opsForGeo().add(key, new Point(shop.getX(), shop.getY()),shop.getId().toString());效率较低，每个店铺都要发起请求</span><br>            locations.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisGeoCommands</span>.GeoLocation&lt;&gt;(<br>                    shop.getId().toString(),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(shop.getX(),shop.getY())<br>            ));<br>        &#125;<br>        stringRedisTemplate.opsForGeo().add(key, locations);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>附近商铺搜索</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryShopByType</span><span class="hljs-params">(Integer typeId, Integer current, Double x, Double y)</span> &#123;<br>    <span class="hljs-comment">// 1. 判断是否需要根据坐标进行查询（前端不一定传过来坐标）</span><br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-literal">null</span> || y == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 不需要坐标查询，按照数据库查询</span><br>        Page&lt;Shop&gt; page = query()<br>                .eq(<span class="hljs-string">&quot;type_id&quot;</span>, typeId)<br>                .page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current, SystemConstants.DEFAULT_PAGE_SIZE));<br>        <span class="hljs-comment">//返回数据</span><br>        <span class="hljs-keyword">return</span> Result.ok(page);<br>    &#125;<br>    <span class="hljs-comment">// 2. 计算分页参数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">from</span> <span class="hljs-operator">=</span> (current -<span class="hljs-number">1</span>) * SystemConstants.DEFAULT_PAGE_SIZE;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> current*SystemConstants.DEFAULT_PAGE_SIZE;<br>    <span class="hljs-comment">// 3. 查询redis 按照距离进行排序和分页。结果：shopid,distance</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> SHOP_GEO_KEY + typeId;<br>    GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; results = stringRedisTemplate.opsForGeo()  <span class="hljs-comment">// GEOSEARCH BYLONLAT x,y BYRADIUS 10 WITHDISTANCE</span><br>            .search(key,<br>                    GeoReference.fromCoordinate(x, y),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Distance</span>(<span class="hljs-number">5000</span>),<br>                    RedisGeoCommands.GeoSearchCommandArgs.newGeoSearchArgs().includeDistance().limit(end)<br>            );<br>    <span class="hljs-comment">// 4. 截取从from到end的部分，解析出id</span><br>    <span class="hljs-keyword">if</span>(results == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br>    List&lt;GeoResult&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt;&gt; list  = results.getContent();<br>    <span class="hljs-keyword">if</span>(list.size() &lt;= from)&#123;<br>        <span class="hljs-comment">// 说明没有下一页了</span><br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br>    List&lt;Long&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(list.size());<br>    Map&lt;String,Distance&gt; distanceMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(list.size());<br>    list.stream().skip(from).forEach(result -&gt;&#123; <span class="hljs-comment">//跳过from前面的东西</span><br>        <span class="hljs-comment">// 获取店铺id</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopIdStr</span> <span class="hljs-operator">=</span> result.getContent().getName();<br>        ids.add(Long.parseLong(shopIdStr));<br>        <span class="hljs-comment">// 获取距离</span><br>        <span class="hljs-type">Distance</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> result.getDistance();<br>        distanceMap.put(shopIdStr, distance);<br>    &#125;);<br>    <span class="hljs-comment">// 5. 根据id查询店铺后返回</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">idStr</span> <span class="hljs-operator">=</span> StrUtil.join(<span class="hljs-string">&quot;,&quot;</span>, ids);<br>    List&lt;Shop&gt; shops = query().in(<span class="hljs-string">&quot;id&quot;</span>, ids).last(<span class="hljs-string">&quot;ORDER BY FIELD (id,&quot;</span> + idStr + <span class="hljs-string">&quot;)&quot;</span>).list();<br>    <span class="hljs-keyword">for</span> (Shop shop : shops) &#123;<br>        shop.setDistance(distanceMap.get(shop.getId().toString()).getValue());<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(shops);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-8用户签到"><a href="#2-8用户签到" class="headerlink" title="2.8用户签到"></a>2.8用户签到</h3><ol><li><p>BitMap的用法</p><p>在统计签到信息等业务中，把每一个bit位对应当月的每一天，就形成了映射关系。用0和1表示状态，这种思路就称为位图（BitMap） </p></li><li><p>操作命令：</p><ol><li><strong>SETBIT</strong>：向指定位置(offset)存入一个0或1</li><li><strong>GETBIT</strong>：获取指定位置(offset)的bit值</li><li><strong>BITCOUNT</strong>：统计BitMap中值为1的bit位的数量</li><li><strong>BITFIELD</strong>：操作(查询、修改、自增)BitMap中bit数组中的指定位置(offset)的值</li><li><strong>BITFIELD_RO</strong>：获取BitMap中bit数组，并以十进制形式返回</li><li><strong>BITOP</strong>：将多个BitMap的结果做位运算(与、或、异或)</li><li><strong>BITPOS</strong>：查找bit数组中指定范围内第一个0或1出现的位置</li></ol></li><li><p>业务需求</p><p>实现签到接口，将当前用户当天签到信息保存到Redis中：</p><p>实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sign</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1. 获取当前登录用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 2. 获取日期</span><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>    <span class="hljs-comment">// 3. 拼接key</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> USER_SIGN_KEY+ userId + now.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;:yyyyMM&quot;</span>));<br>    <span class="hljs-comment">// 4. 获取今天是本月第几号</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> now.getDayOfMonth();<br>    <span class="hljs-comment">// 5. 写入Redis中 setbit key offset 1</span><br>    stringRedisTemplate.opsForValue().setBit(key, dayOfMonth - <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>统计连续签到天数（从最后一次签到开始向前统计，直至第一次未签到位为止，计算总签到次数）</p><p>实现思路：1. 通过BITFIELD key GET u[dayOfMonth] 0，然后通过与1作与运算得到最后一个bit位，然后通过右移操作实现统计</p><p>实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">signCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1. 获取当前登录用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 2. 获取日期</span><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>    <span class="hljs-comment">// 3. 拼接key</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> USER_SIGN_KEY+ userId + now.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;:yyyyMM&quot;</span>));<br>    <span class="hljs-comment">// 4. 获取今天是本月第几号</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> now.getDayOfMonth();<br>    <span class="hljs-comment">// 5. 获取本月截至今天为止的所有签到记录，返回的是一个十进制数字  bitfield key get u(day) 0</span><br>    List&lt;Long&gt; results = stringRedisTemplate.opsForValue().bitField(key,<br>            BitFieldSubCommands.create().<br>                    get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).<br>                    valueAt(<span class="hljs-number">0</span>)<br>    );<br>    <span class="hljs-keyword">if</span>(results.isEmpty() || results == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">// 没有签到结果</span><br>        <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> results.get(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span>|| num == <span class="hljs-literal">null</span> )&#123;<br>        <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 6. 循环遍历</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-comment">// 让数字与1做与运算，得到数字最后一个比特位</span><br>        <span class="hljs-comment">// 判断比特位是否为0</span><br>        <span class="hljs-keyword">if</span>((num &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 如果是0，说明没签到，结束</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 如果不为0，说明签到，计数器加一</span><br>            count ++;<br>            <span class="hljs-comment">// 数字右移一位，进入下一次循环</span><br>            num = num &gt;&gt; <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(count);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-9-UV统计"><a href="#2-9-UV统计" class="headerlink" title="2.9 UV统计"></a>2.9 UV统计</h3><ol><li><p>概念理解</p><ol><li>UV：全称Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1天内，同一个用户多次访问网站，只记录1次；</li><li>PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录一次PV，用户多次打开页面，记录多次PV。</li></ol></li><li><p>HyperLogLog（HLL）：是从Loglog算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。Redis中的HLL是基于string结构实现的，单个HLL的<strong>内存永远小于16kb</strong>，但代价是，其测量结果是有概率性的，<strong>有小于0.81%的误差</strong>，不过对于UV统计，可以忽略。</p></li><li><p>相关命令：</p><ol><li>PFADD key element [element …] 添加元素</li><li>PFCOUNT key [key …] 统计总量</li><li>PFMERGE destkey sourcekey [sourcekey …]</li></ol><blockquote><p>注意：添加多次相同元素，只记录1次，所以HLL非常适合做UV统计</p></blockquote></li><li><p>测试UV统计：利用单元测试，向HLL中添加100万条数据，查看内存占用和统计数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testHyperLogLog</span><span class="hljs-params">()</span>&#123;<br>    String[] values = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">1000</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++) &#123;<br>        j = i % <span class="hljs-number">1000</span>; <span class="hljs-comment">//(j=0~999)</span><br>        values[j] = <span class="hljs-string">&quot;user_&quot;</span> + i;<br>        <span class="hljs-keyword">if</span>(j == <span class="hljs-number">999</span>)&#123;<br>            stringRedisTemplate.opsForHyperLogLog().add(<span class="hljs-string">&quot;hl_test&quot;</span>,values); <span class="hljs-comment">//每隔1000条存入hl中一次，一共保存一百万条数据</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 统计uv</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForHyperLogLog().size(<span class="hljs-string">&quot;hl_test&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;count = &quot;</span> + count);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果为：count &#x3D; 997593</p></li></ol></li></ol><h2 id="3-Redis的分布式"><a href="#3-Redis的分布式" class="headerlink" title="3. Redis的分布式"></a>3. Redis的分布式</h2><h3 id="3-1-Redis持久化"><a href="#3-1-Redis持久化" class="headerlink" title="3.1 Redis持久化"></a>3.1 Redis持久化</h3><h4 id="RDB-Redis-Database-Backup-File"><a href="#RDB-Redis-Database-Backup-File" class="headerlink" title="RDB(Redis Database Backup File)"></a>RDB(Redis Database Backup File)</h4><p>Redis数据备份文件，也叫Redis数据快照，就是将内存中的所有数据都记录到磁盘中。当故障后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，默认保存在当前运行目录。  </p><ul><li>save命令：由Redis主进程来执行RDB，会阻塞所有命令  </li><li>bgsave命令：开启子进程执行RDB，避免主进程受影响</li></ul><p>Redis内部可以设置触发RDB的机制，在redis.conf文件中进行修改。eg. save 5 1 表示在5s内，如果至少有1个key被修改就会执行一次bgsave。其执行流程为，fork主进程得到一个子进程，拷贝页表，共享内存空间，子进程读取内存并写入新的RDB文件，用新的RDB文件替换旧的RDB文件。</p><p>RDB缺点：</p><ul><li>执行间隔时间长，两次RDB之间写入数据有丢失的风险；</li><li>fork子进程、压缩、写RDB文件都比较耗时。</li></ul><h4 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h4><p>Redis追加文件，将Redis处理的每个写命令记录在AOP文件，可以看作命令日志文件。AOF默认是关闭的，需要修改redis.conf配置文件来开启(appendonly yes)和修改命令记录频率(appendfsysnc always&#x2F;everysec&#x2F;no 分别表示l立即&#x2F;每隔1s将&#x2F;由操作系统决定何时将缓存区内容写到aof文件)。</p><p>因为是记录命令，所以AOF文件会很大，并且多次写操作只有最后一次有意义，可以通过bgrewriteaof命令，执行重写操作，用最少命令达到相同效果。同样修改redis.conf文件来配置</p><h4 id="持久化方案对比"><a href="#持久化方案对比" class="headerlink" title="持久化方案对比"></a>持久化方案对比</h4><table><thead><tr><th></th><th><strong>RDB</strong></th><th><strong>AOF</strong></th></tr></thead><tbody><tr><td><strong>持久化方式</strong></td><td>定时对整个内存做快照</td><td>记录每一次执行的命令</td></tr><tr><td><strong>数据完整性</strong></td><td>两次备份之间的数据会丢失</td><td>相对完整，取决于刷盘策略</td></tr><tr><td><strong>文件大小</strong></td><td>会有压缩，文件体积小</td><td>记录命令，文件体积较大</td></tr><tr><td><strong>恢复速度</strong></td><td>很快</td><td>慢，要重新执行命令</td></tr><tr><td><strong>恢复优先级</strong></td><td>低，因为完整性不如AOF</td><td>高，因为数据完整性更高，优先用AOF恢复</td></tr><tr><td><strong>系统资源占用</strong></td><td>高，大量CPU和资源消耗</td><td>低，主要是磁盘IO资源，但重写时会占用大量CPU和内存资源</td></tr><tr><td><strong>适用场景</strong></td><td>可以容忍数分钟的数据丢失，追求更快的启动速度</td><td>对数据安全性较高</td></tr></tbody></table><h3 id="3-2-Redis主从集群"><a href="#3-2-Redis主从集群" class="headerlink" title="3.2 Redis主从集群"></a>3.2 Redis主从集群</h3><h4 id="搭建主从架构"><a href="#搭建主从架构" class="headerlink" title="搭建主从架构"></a>搭建主从架构</h4><p>单节点Redis的并发能力有限，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离。</p><ol><li><p>准备实例和配置</p><p>要在同一台虚拟机开启3个实例，需要准备三份不同的配置文件和目录，配置文件所在的目录就是工作目录。</p><ul><li>创建三个目录</li><li>在每个目录下设置配置文件（持久化为默认的RDB模式）</li><li>修改每个实例的端口及工作目录</li><li>修改每个实例的声明ip（由于在虚拟机内配置，虚拟机本身就有多个IP，为避免将来混乱，需要指定每个实例绑定ip信息 replica-announce-ip xxx.xxx.xxx.xxx）</li></ul></li><li><p>启动实例：redis-service 目录&#x2F;redis.conf</p></li><li><p>开启主从关系</p><ul><li><p>配置主从关系，使用replicaof 或者slaveof命令</p></li><li><p>有临时&#x2F;永久两种模式</p><ul><li><p>永久生效</p><p>在redis.conf 中添加一行配置：slaveof(或者replicaof) <masterip> <masterport></masterport></masterip></p></li><li><p>临时生效（重启后失效）</p><p>使用redis-cli客户端连接redis服务，执行slaveof命令：slaveof(或者replicaof)  <masterip> <masterport></masterport></masterip></p></li></ul></li></ul></li></ol><h4 id="数据同步原理"><a href="#数据同步原理" class="headerlink" title="数据同步原理"></a>数据同步原理</h4>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
